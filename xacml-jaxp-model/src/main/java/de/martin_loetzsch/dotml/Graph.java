//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package de.martin_loetzsch.dotml;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.martin-loetzsch.de/DOTML}cluster-or-graph"&gt;
 *       &lt;attribute name="file-name" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="margin" type="{http://www.martin-loetzsch.de/DOTML}point" /&gt;
 *       &lt;attribute name="nodesep" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="rankdir" type="{http://www.martin-loetzsch.de/DOTML}rankdir" /&gt;
 *       &lt;attribute name="ranksep" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="ratio" type="{http://www.martin-loetzsch.de/DOTML}ratio" /&gt;
 *       &lt;attribute name="size" type="{http://www.martin-loetzsch.de/DOTML}point" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "graph")
public class Graph extends ClusterOrGraph implements Cloneable {

  @XmlAttribute(name = "file-name", required = true)
  protected String fileName;
  @XmlAttribute(name = "margin")
  protected String margin;
  @XmlAttribute(name = "nodesep")
  protected BigDecimal nodesep;
  @XmlAttribute(name = "rankdir")
  protected Rankdir rankdir;
  @XmlAttribute(name = "ranksep")
  protected BigDecimal ranksep;
  @XmlAttribute(name = "ratio")
  protected String ratio;
  @XmlAttribute(name = "size")
  protected String size;

  /**
   * Gets the value of the fileName property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFileName() {
    return fileName;
  }

  /**
   * Sets the value of the fileName property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setFileName(String value) {
    this.fileName = value;
  }

  /**
   * Gets the value of the margin property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getMargin() {
    return margin;
  }

  /**
   * Sets the value of the margin property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setMargin(String value) {
    this.margin = value;
  }

  /**
   * Gets the value of the nodesep property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getNodesep() {
    return nodesep;
  }

  /**
   * Sets the value of the nodesep property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  protected void setNodesep(BigDecimal value) {
    this.nodesep = value;
  }

  /**
   * Gets the value of the rankdir property.
   * 
   * @return possible object is {@link Rankdir }
   * 
   */
  public Rankdir getRankdir() {
    return rankdir;
  }

  /**
   * Sets the value of the rankdir property.
   * 
   * @param value allowed object is {@link Rankdir }
   * 
   */
  protected void setRankdir(Rankdir value) {
    this.rankdir = value;
  }

  /**
   * Gets the value of the ranksep property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getRanksep() {
    return ranksep;
  }

  /**
   * Sets the value of the ranksep property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  protected void setRanksep(BigDecimal value) {
    this.ranksep = value;
  }

  /**
   * Gets the value of the ratio property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getRatio() {
    return ratio;
  }

  /**
   * Sets the value of the ratio property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setRatio(String value) {
    this.ratio = value;
  }

  /**
   * Gets the value of the size property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getSize() {
    return size;
  }

  /**
   * Sets the value of the size property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setSize(String value) {
    this.size = value;
  }

  public static Graph.Builder<Void> builder() {
    return new Graph.Builder<Void>(null, null, false);
  }

  public static Graph.Builder<Void> copyOf(final Graph other) {
    return new Graph.Builder<Void>(null, other, true);
  }

  public static Graph.Builder<Void> copyOf(final Graph other, final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    return new Graph.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static Graph.Builder<Void> copyExcept(final Graph other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static Graph.Builder<Void> copyOnly(final Graph other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((((((((((((((((super.toString() + "(fileName = ") + fileName) + "), ") + "(margin = ") + margin) + "), ") + "(nodesep = ") + nodesep) + "), ") + "(rankdir = ") + rankdir) + "), ") + "(ranksep = ") + ranksep) + "), ") + "(ratio = ") + ratio) + "), ") + "(size = ") + size) + ") ");
  }

  @Override
  public Graph clone() throws CloneNotSupportedException {
    final Graph newObject = ((Graph) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> extends ClusterOrGraph.Builder<TParentBuilder> {

    private String fileName;
    private String margin;
    private BigDecimal nodesep;
    private Rankdir rankdir;
    private BigDecimal ranksep;
    private String ratio;
    private String size;

    public Builder(final TParentBuilder parentBuilder, final Graph other, final boolean copy) {
      super(parentBuilder, other, copy);
      if (copy) {
        this.fileName = other.fileName;
        this.margin = other.margin;
        this.nodesep = other.nodesep;
        this.rankdir = other.rankdir;
        this.ranksep = other.ranksep;
        this.ratio = other.ratio;
        this.size = other.size;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final Graph other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      super(parentBuilder, other, copy);
      if (copy) {
        final PropertyTree fileNamePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fileName"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fileNamePropertyTree != null)
            : ((fileNamePropertyTree == null) || (!fileNamePropertyTree.isLeaf())))) {
          this.fileName = other.fileName;
        }
        final PropertyTree marginPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("margin"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (marginPropertyTree != null)
            : ((marginPropertyTree == null) || (!marginPropertyTree.isLeaf())))) {
          this.margin = other.margin;
        }
        final PropertyTree nodesepPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("nodesep"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (nodesepPropertyTree != null)
            : ((nodesepPropertyTree == null) || (!nodesepPropertyTree.isLeaf())))) {
          this.nodesep = other.nodesep;
        }
        final PropertyTree rankdirPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("rankdir"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (rankdirPropertyTree != null)
            : ((rankdirPropertyTree == null) || (!rankdirPropertyTree.isLeaf())))) {
          this.rankdir = other.rankdir;
        }
        final PropertyTree ranksepPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("ranksep"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (ranksepPropertyTree != null)
            : ((ranksepPropertyTree == null) || (!ranksepPropertyTree.isLeaf())))) {
          this.ranksep = other.ranksep;
        }
        final PropertyTree ratioPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("ratio"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (ratioPropertyTree != null)
            : ((ratioPropertyTree == null) || (!ratioPropertyTree.isLeaf())))) {
          this.ratio = other.ratio;
        }
        final PropertyTree sizePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("size"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (sizePropertyTree != null)
            : ((sizePropertyTree == null) || (!sizePropertyTree.isLeaf())))) {
          this.size = other.size;
        }
      }
    }

    protected <P extends Graph> P init(final P product) {
      product.fileName = this.fileName;
      product.margin = this.margin;
      product.nodesep = this.nodesep;
      product.rankdir = this.rankdir;
      product.ranksep = this.ranksep;
      product.ratio = this.ratio;
      product.size = this.size;
      return super.init(product);
    }

    public Graph.Builder<TParentBuilder> withFileName(final String fileName) {
      this.fileName = fileName;
      return this;
    }

    public Graph.Builder<TParentBuilder> withMargin(final String margin) {
      this.margin = margin;
      return this;
    }

    public Graph.Builder<TParentBuilder> withNodesep(final BigDecimal nodesep) {
      this.nodesep = nodesep;
      return this;
    }

    public Graph.Builder<TParentBuilder> withRankdir(final Rankdir rankdir) {
      this.rankdir = rankdir;
      return this;
    }

    public Graph.Builder<TParentBuilder> withRanksep(final BigDecimal ranksep) {
      this.ranksep = ranksep;
      return this;
    }

    public Graph.Builder<TParentBuilder> withRatio(final String ratio) {
      this.ratio = ratio;
      return this;
    }

    public Graph.Builder<TParentBuilder> withSize(final String size) {
      this.size = size;
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> addNodeOrClusterOrSubGraph(
        final List<?> nodeOrClusterOrSubGraph) {
      super.addNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> addNodeOrClusterOrSubGraph(
        Object... nodeOrClusterOrSubGraph) {
      super.addNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> withNodeOrClusterOrSubGraph(
        final List<?> nodeOrClusterOrSubGraph) {
      super.withNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> withNodeOrClusterOrSubGraph(
        Object... nodeOrClusterOrSubGraph) {
      super.withNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> withBgcolor(final String bgcolor) {
      super.withBgcolor(bgcolor);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> withLabel(final String label) {
      super.withLabel(label);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> withFontname(final String fontname) {
      super.withFontname(fontname);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> withFontsize(final BigDecimal fontsize) {
      super.withFontsize(fontsize);
      return this;
    }

    @Override
    public Graph.Builder<TParentBuilder> withFontcolor(final String fontcolor) {
      super.withFontcolor(fontcolor);
      return this;
    }

    public Graph build() {
      if (this._product == null) {
        return this.init(new Graph());
      } else {
        return ((Graph) this._product);
      }
    }

  }

  public static class Select extends Graph.Selector<Graph.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static Graph.Select _root() {
      return new Graph.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends ClusterOrGraph.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> fileName = null;
    private com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> margin = null;
    private com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> nodesep = null;
    private com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> rankdir = null;
    private com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> ranksep = null;
    private com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> ratio = null;
    private com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> size = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.fileName != null) {
        products.put("fileName", this.fileName.init());
      }
      if (this.margin != null) {
        products.put("margin", this.margin.init());
      }
      if (this.nodesep != null) {
        products.put("nodesep", this.nodesep.init());
      }
      if (this.rankdir != null) {
        products.put("rankdir", this.rankdir.init());
      }
      if (this.ranksep != null) {
        products.put("ranksep", this.ranksep.init());
      }
      if (this.ratio != null) {
        products.put("ratio", this.ratio.init());
      }
      if (this.size != null) {
        products.put("size", this.size.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> fileName() {
      return ((this.fileName == null) ? this.fileName =
          new com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>>(this._root, this,
              "fileName") : this.fileName);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> margin() {
      return ((this.margin == null) ? this.margin =
          new com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>>(this._root, this,
              "margin") : this.margin);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> nodesep() {
      return ((this.nodesep == null) ? this.nodesep =
          new com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>>(this._root, this,
              "nodesep") : this.nodesep);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> rankdir() {
      return ((this.rankdir == null) ? this.rankdir =
          new com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>>(this._root, this,
              "rankdir") : this.rankdir);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> ranksep() {
      return ((this.ranksep == null) ? this.ranksep =
          new com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>>(this._root, this,
              "ranksep") : this.ranksep);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> ratio() {
      return ((this.ratio == null) ? this.ratio =
          new com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>>(this._root, this,
              "ratio") : this.ratio);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>> size() {
      return ((this.size == null) ? this.size =
          new com.kscs.util.jaxb.Selector<TRoot, Graph.Selector<TRoot, TParent>>(this._root, this,
              "size") : this.size);
    }

  }

}
