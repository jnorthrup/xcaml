//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation,
// v2.2.10-b140310.1920
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.02.03 at 12:40:57 AM PST
//

package de.martin_loetzsch.dotml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for shape.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * <p>
 * 
 * <pre>
 * &lt;simpleType name="shape">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="box"/>
 *     &lt;enumeration value="circle"/>
 *     &lt;enumeration value="ellipse"/>
 *     &lt;enumeration value="point"/>
 *     &lt;enumeration value="egg"/>
 *     &lt;enumeration value="triangle"/>
 *     &lt;enumeration value="plaintext"/>
 *     &lt;enumeration value="diamond"/>
 *     &lt;enumeration value="trapezium"/>
 *     &lt;enumeration value="parallelogram"/>
 *     &lt;enumeration value="house"/>
 *     &lt;enumeration value="hexagon"/>
 *     &lt;enumeration value="octagon"/>
 *     &lt;enumeration value="doublecircle"/>
 *     &lt;enumeration value="doubleoctagon"/>
 *     &lt;enumeration value="invtriangle"/>
 *     &lt;enumeration value="invtrapezium"/>
 *     &lt;enumeration value="invhouse"/>
 *     &lt;enumeration value="Mdiamond"/>
 *     &lt;enumeration value="Msquare"/>
 *     &lt;enumeration value="Mcircle"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "shape")
@XmlEnum
public enum Shape {

  @XmlEnumValue("box")
  BOX("box"), @XmlEnumValue("circle")
  CIRCLE("circle"), @XmlEnumValue("ellipse")
  ELLIPSE("ellipse"), @XmlEnumValue("point")
  POINT("point"), @XmlEnumValue("egg")
  EGG("egg"), @XmlEnumValue("triangle")
  TRIANGLE("triangle"), @XmlEnumValue("plaintext")
  PLAINTEXT("plaintext"), @XmlEnumValue("diamond")
  DIAMOND("diamond"), @XmlEnumValue("trapezium")
  TRAPEZIUM("trapezium"), @XmlEnumValue("parallelogram")
  PARALLELOGRAM("parallelogram"), @XmlEnumValue("house")
  HOUSE("house"), @XmlEnumValue("hexagon")
  HEXAGON("hexagon"), @XmlEnumValue("octagon")
  OCTAGON("octagon"), @XmlEnumValue("doublecircle")
  DOUBLECIRCLE("doublecircle"), @XmlEnumValue("doubleoctagon")
  DOUBLEOCTAGON("doubleoctagon"), @XmlEnumValue("invtriangle")
  INVTRIANGLE("invtriangle"), @XmlEnumValue("invtrapezium")
  INVTRAPEZIUM("invtrapezium"), @XmlEnumValue("invhouse")
  INVHOUSE("invhouse"), @XmlEnumValue("Mdiamond")
  MDIAMOND("Mdiamond"), @XmlEnumValue("Msquare")
  MSQUARE("Msquare"), @XmlEnumValue("Mcircle")
  MCIRCLE("Mcircle");
  private final String value;

  Shape(String v) {
    value = v;
  }

  public String value() {
    return value;
  }

  public static Shape fromValue(String v) {
    for (Shape c : Shape.values()) {
      if (c.value.equals(v)) {
        return c;
      }
    }
    throw new IllegalArgumentException(v);
  }

}
