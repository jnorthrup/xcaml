//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package de.martin_loetzsch.dotml;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * A group of nodes with rank constraints
 * 
 * <p>
 * Java class for sub-graph complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="sub-graph"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence maxOccurs="unbounded"&gt;
 *         &lt;choice&gt;
 *           &lt;element name="node" type="{http://www.martin-loetzsch.de/DOTML}node"/&gt;
 *           &lt;element name="record" type="{http://www.martin-loetzsch.de/DOTML}record-node"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="rank" use="required" type="{http://www.martin-loetzsch.de/DOTML}rank" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "sub-graph", propOrder = {"nodeOrRecord"})
public class SubGraph implements Cloneable {

  @XmlElements({
      @XmlElement(name = "node", type = Node.class),
      @XmlElement(name = "record", type = RecordNode.class)})
  protected List<Object> nodeOrRecord;
  @XmlAttribute(name = "rank", required = true)
  protected Rank rank;
  protected transient List<Object> nodeOrRecord_RO = null;

  /**
   * Gets the value of the rank property.
   * 
   * @return possible object is {@link Rank }
   * 
   */
  public Rank getRank() {
    return rank;
  }

  /**
   * Sets the value of the rank property.
   * 
   * @param value allowed object is {@link Rank }
   * 
   */
  protected void setRank(Rank value) {
    this.rank = value;
  }

  public static SubGraph.Builder<Void> builder() {
    return new SubGraph.Builder<Void>(null, null, false);
  }

  public static SubGraph.Builder<Void> copyOf(final SubGraph other) {
    return new SubGraph.Builder<Void>(null, other, true);
  }

  public static SubGraph.Builder<Void> copyOf(final SubGraph other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new SubGraph.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static SubGraph.Builder<Void> copyExcept(final SubGraph other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static SubGraph.Builder<Void> copyOnly(final SubGraph other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((("(nodeOrRecord = " + nodeOrRecord) + "), ") + "(rank = ") + rank) + ") ");
  }

  @Override
  public SubGraph clone() throws CloneNotSupportedException {
    final SubGraph newObject = ((SubGraph) super.clone());
    newObject.nodeOrRecord =
        ((this.nodeOrRecord == null) ? null : new ArrayList<Object>(this.nodeOrRecord));
    newObject.nodeOrRecord_RO =
        ((nodeOrRecord == null) ? null : Collections.unmodifiableList(newObject.nodeOrRecord));
    return newObject;
  }

  public List<Object> getNodeOrRecord() {
    if (this.nodeOrRecord == null) {
      this.nodeOrRecord = new ArrayList<Object>();
    }
    if (this.nodeOrRecord_RO == null) {
      this.nodeOrRecord_RO =
          ((nodeOrRecord == null) ? null : Collections.unmodifiableList(this.nodeOrRecord));
    }
    return this.nodeOrRecord_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final SubGraph _product;
    private List<Object> nodeOrRecord;
    private Rank rank;

    public Builder(final TParentBuilder parentBuilder, final SubGraph other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.nodeOrRecord =
            ((other.nodeOrRecord == null) ? null : new ArrayList<Object>(other.nodeOrRecord));
        this.rank = other.rank;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final SubGraph other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree nodeOrRecordPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("nodeOrRecord"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (nodeOrRecordPropertyTree != null)
            : ((nodeOrRecordPropertyTree == null) || (!nodeOrRecordPropertyTree.isLeaf())))) {
          this.nodeOrRecord =
              ((other.nodeOrRecord == null) ? null : new ArrayList<Object>(other.nodeOrRecord));
        }
        final PropertyTree rankPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("rank"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (rankPropertyTree != null)
            : ((rankPropertyTree == null) || (!rankPropertyTree.isLeaf())))) {
          this.rank = other.rank;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends SubGraph> P init(final P product) {
      product.nodeOrRecord = this.nodeOrRecord;
      product.nodeOrRecord_RO =
          ((nodeOrRecord == null) ? null : Collections.unmodifiableList(product.nodeOrRecord));
      product.rank = this.rank;
      return product;
    }

    public SubGraph.Builder<TParentBuilder> addNodeOrRecord(final List<?> nodeOrRecord) {
      if (this.nodeOrRecord == null) {
        this.nodeOrRecord = new ArrayList<Object>();
      }
      this.nodeOrRecord.addAll(nodeOrRecord);
      return this;
    }

    public SubGraph.Builder<TParentBuilder> withNodeOrRecord(final List<?> nodeOrRecord) {
      if (this.nodeOrRecord != null) {
        this.nodeOrRecord.clear();
      }
      return addNodeOrRecord(nodeOrRecord);
    }

    public SubGraph.Builder<TParentBuilder> addNodeOrRecord(Object... nodeOrRecord) {
      addNodeOrRecord(Arrays.asList(nodeOrRecord));
      return this;
    }

    public SubGraph.Builder<TParentBuilder> withNodeOrRecord(Object... nodeOrRecord) {
      withNodeOrRecord(Arrays.asList(nodeOrRecord));
      return this;
    }

    public SubGraph.Builder<TParentBuilder> withRank(final Rank rank) {
      this.rank = rank;
      return this;
    }

    public SubGraph build() {
      if (this._product == null) {
        return this.init(new SubGraph());
      } else {
        return ((SubGraph) this._product);
      }
    }

  }

  public static class Select extends SubGraph.Selector<SubGraph.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static SubGraph.Select _root() {
      return new SubGraph.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, SubGraph.Selector<TRoot, TParent>> nodeOrRecord =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, SubGraph.Selector<TRoot, TParent>> rank = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.nodeOrRecord != null) {
        products.put("nodeOrRecord", this.nodeOrRecord.init());
      }
      if (this.rank != null) {
        products.put("rank", this.rank.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, SubGraph.Selector<TRoot, TParent>> nodeOrRecord() {
      return ((this.nodeOrRecord == null) ? this.nodeOrRecord =
          new com.kscs.util.jaxb.Selector<TRoot, SubGraph.Selector<TRoot, TParent>>(this._root,
              this, "nodeOrRecord") : this.nodeOrRecord);
    }

    public com.kscs.util.jaxb.Selector<TRoot, SubGraph.Selector<TRoot, TParent>> rank() {
      return ((this.rank == null) ? this.rank =
          new com.kscs.util.jaxb.Selector<TRoot, SubGraph.Selector<TRoot, TParent>>(this._root,
              this, "rank") : this.rank);
    }

  }

}
