//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package de.martin_loetzsch.dotml;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * The root element of a record.
 * 
 * <p>
 * Java class for record-node complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="record-node"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.martin-loetzsch.de/DOTML}record"&gt;
 *       &lt;attGroup ref="{http://www.martin-loetzsch.de/DOTML}node-and-record-attributes"/&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "record-node")
public class RecordNode extends Record implements Cloneable, NodeAndRecordAttributes {

  @XmlAttribute(name = "color")
  protected String color;
  @XmlAttribute(name = "fillcolor")
  protected String fillcolor;
  @XmlAttribute(name = "height")
  protected BigDecimal height;
  @XmlAttribute(name = "style")
  protected Style style;
  @XmlAttribute(name = "width")
  protected BigDecimal width;
  @XmlAttribute(name = "fontname")
  protected String fontname;
  @XmlAttribute(name = "fontsize")
  protected BigDecimal fontsize;
  @XmlAttribute(name = "fontcolor")
  protected String fontcolor;

  /**
   * Gets the value of the color property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getColor() {
    return color;
  }

  /**
   * Sets the value of the color property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setColor(String value) {
    this.color = value;
  }

  /**
   * Gets the value of the fillcolor property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFillcolor() {
    return fillcolor;
  }

  /**
   * Sets the value of the fillcolor property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFillcolor(String value) {
    this.fillcolor = value;
  }

  /**
   * Gets the value of the height property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getHeight() {
    return height;
  }

  /**
   * Sets the value of the height property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setHeight(BigDecimal value) {
    this.height = value;
  }

  /**
   * Gets the value of the style property.
   * 
   * @return possible object is {@link Style }
   * 
   */
  public Style getStyle() {
    return style;
  }

  /**
   * Sets the value of the style property.
   * 
   * @param value allowed object is {@link Style }
   * 
   */
  public void setStyle(Style value) {
    this.style = value;
  }

  /**
   * Gets the value of the width property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getWidth() {
    return width;
  }

  /**
   * Sets the value of the width property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setWidth(BigDecimal value) {
    this.width = value;
  }

  /**
   * Gets the value of the fontname property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFontname() {
    return fontname;
  }

  /**
   * Sets the value of the fontname property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFontname(String value) {
    this.fontname = value;
  }

  /**
   * Gets the value of the fontsize property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getFontsize() {
    return fontsize;
  }

  /**
   * Sets the value of the fontsize property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setFontsize(BigDecimal value) {
    this.fontsize = value;
  }

  /**
   * Gets the value of the fontcolor property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFontcolor() {
    return fontcolor;
  }

  /**
   * Sets the value of the fontcolor property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFontcolor(String value) {
    this.fontcolor = value;
  }

  public static RecordNode.Builder<Void> builder() {
    return new RecordNode.Builder<Void>(null, null, false);
  }

  public static RecordNode.Builder<Void> copyOf(final RecordNode other) {
    return new RecordNode.Builder<Void>(null, other, true);
  }

  public static RecordNode.Builder<Void> copyOf(final RecordNode other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new RecordNode.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static RecordNode.Builder<Void> copyExcept(final RecordNode other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static RecordNode.Builder<Void> copyOnly(final RecordNode other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((((((((((((((((((((((super.toString() + "(color = ") + color) + "), ") + "(fillcolor = ") + fillcolor) + "), ") + "(height = ") + height) + "), ") + "(style = ") + style) + "), ") + "(width = ") + width) + "), ") + "(fontname = ") + fontname) + "), ") + "(fontsize = ") + fontsize) + "), ") + "(fontcolor = ") + fontcolor) + ") ");
  }

  @Override
  public RecordNode clone() throws CloneNotSupportedException {
    final RecordNode newObject = ((RecordNode) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> extends Record.Builder<TParentBuilder> implements
      NodeAndRecordAttributes.BuildSupport<TParentBuilder> {

    private String color;
    private String fillcolor;
    private BigDecimal height;
    private Style style;
    private BigDecimal width;
    private String fontname;
    private BigDecimal fontsize;
    private String fontcolor;

    public Builder(final TParentBuilder parentBuilder, final RecordNode other, final boolean copy) {
      super(parentBuilder, other, copy);
      if (copy) {
        this.color = other.color;
        this.fillcolor = other.fillcolor;
        this.height = other.height;
        this.style = other.style;
        this.width = other.width;
        this.fontname = other.fontname;
        this.fontsize = other.fontsize;
        this.fontcolor = other.fontcolor;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final RecordNode other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      super(parentBuilder, other, copy);
      if (copy) {
        final PropertyTree colorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("color"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (colorPropertyTree != null)
            : ((colorPropertyTree == null) || (!colorPropertyTree.isLeaf())))) {
          this.color = other.color;
        }
        final PropertyTree fillcolorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fillcolor"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fillcolorPropertyTree != null)
            : ((fillcolorPropertyTree == null) || (!fillcolorPropertyTree.isLeaf())))) {
          this.fillcolor = other.fillcolor;
        }
        final PropertyTree heightPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("height"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (heightPropertyTree != null)
            : ((heightPropertyTree == null) || (!heightPropertyTree.isLeaf())))) {
          this.height = other.height;
        }
        final PropertyTree stylePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("style"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (stylePropertyTree != null)
            : ((stylePropertyTree == null) || (!stylePropertyTree.isLeaf())))) {
          this.style = other.style;
        }
        final PropertyTree widthPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("width"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (widthPropertyTree != null)
            : ((widthPropertyTree == null) || (!widthPropertyTree.isLeaf())))) {
          this.width = other.width;
        }
        final PropertyTree fontnamePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontname"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontnamePropertyTree != null)
            : ((fontnamePropertyTree == null) || (!fontnamePropertyTree.isLeaf())))) {
          this.fontname = other.fontname;
        }
        final PropertyTree fontsizePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontsize"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontsizePropertyTree != null)
            : ((fontsizePropertyTree == null) || (!fontsizePropertyTree.isLeaf())))) {
          this.fontsize = other.fontsize;
        }
        final PropertyTree fontcolorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontcolor"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontcolorPropertyTree != null)
            : ((fontcolorPropertyTree == null) || (!fontcolorPropertyTree.isLeaf())))) {
          this.fontcolor = other.fontcolor;
        }
      }
    }

    protected <P extends RecordNode> P init(final P product) {
      product.color = this.color;
      product.fillcolor = this.fillcolor;
      product.height = this.height;
      product.style = this.style;
      product.width = this.width;
      product.fontname = this.fontname;
      product.fontsize = this.fontsize;
      product.fontcolor = this.fontcolor;
      return super.init(product);
    }

    public RecordNode.Builder<TParentBuilder> withColor(final String color) {
      this.color = color;
      return this;
    }

    public RecordNode.Builder<TParentBuilder> withFillcolor(final String fillcolor) {
      this.fillcolor = fillcolor;
      return this;
    }

    public RecordNode.Builder<TParentBuilder> withHeight(final BigDecimal height) {
      this.height = height;
      return this;
    }

    public RecordNode.Builder<TParentBuilder> withStyle(final Style style) {
      this.style = style;
      return this;
    }

    public RecordNode.Builder<TParentBuilder> withWidth(final BigDecimal width) {
      this.width = width;
      return this;
    }

    public RecordNode.Builder<TParentBuilder> withFontname(final String fontname) {
      this.fontname = fontname;
      return this;
    }

    public RecordNode.Builder<TParentBuilder> withFontsize(final BigDecimal fontsize) {
      this.fontsize = fontsize;
      return this;
    }

    public RecordNode.Builder<TParentBuilder> withFontcolor(final String fontcolor) {
      this.fontcolor = fontcolor;
      return this;
    }

    @Override
    public RecordNode.Builder<TParentBuilder> addNodeOrRecord(final List<?> nodeOrRecord) {
      super.addNodeOrRecord(nodeOrRecord);
      return this;
    }

    @Override
    public RecordNode.Builder<TParentBuilder> addNodeOrRecord(Object... nodeOrRecord) {
      super.addNodeOrRecord(nodeOrRecord);
      return this;
    }

    @Override
    public RecordNode.Builder<TParentBuilder> withNodeOrRecord(final List<?> nodeOrRecord) {
      super.withNodeOrRecord(nodeOrRecord);
      return this;
    }

    @Override
    public RecordNode.Builder<TParentBuilder> withNodeOrRecord(Object... nodeOrRecord) {
      super.withNodeOrRecord(nodeOrRecord);
      return this;
    }

    public RecordNode build() {
      if (this._product == null) {
        return this.init(new RecordNode());
      } else {
        return ((RecordNode) this._product);
      }
    }

  }

  public static class Select extends RecordNode.Selector<RecordNode.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static RecordNode.Select _root() {
      return new RecordNode.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends Record.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> color = null;
    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fillcolor =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> height = null;
    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> style = null;
    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> width = null;
    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fontname = null;
    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fontsize = null;
    private com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fontcolor =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.color != null) {
        products.put("color", this.color.init());
      }
      if (this.fillcolor != null) {
        products.put("fillcolor", this.fillcolor.init());
      }
      if (this.height != null) {
        products.put("height", this.height.init());
      }
      if (this.style != null) {
        products.put("style", this.style.init());
      }
      if (this.width != null) {
        products.put("width", this.width.init());
      }
      if (this.fontname != null) {
        products.put("fontname", this.fontname.init());
      }
      if (this.fontsize != null) {
        products.put("fontsize", this.fontsize.init());
      }
      if (this.fontcolor != null) {
        products.put("fontcolor", this.fontcolor.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> color() {
      return ((this.color == null) ? this.color =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "color") : this.color);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fillcolor() {
      return ((this.fillcolor == null) ? this.fillcolor =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "fillcolor") : this.fillcolor);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> height() {
      return ((this.height == null) ? this.height =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "height") : this.height);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> style() {
      return ((this.style == null) ? this.style =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "style") : this.style);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> width() {
      return ((this.width == null) ? this.width =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "width") : this.width);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fontname() {
      return ((this.fontname == null) ? this.fontname =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "fontname") : this.fontname);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fontsize() {
      return ((this.fontsize == null) ? this.fontsize =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "fontsize") : this.fontsize);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>> fontcolor() {
      return ((this.fontcolor == null) ? this.fontcolor =
          new com.kscs.util.jaxb.Selector<TRoot, RecordNode.Selector<TRoot, TParent>>(this._root,
              this, "fontcolor") : this.fontcolor);
    }

  }

}
