//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package de.martin_loetzsch.dotml;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * The base class for clusters and graphs.
 * 
 * <p>
 * Java class for cluster-or-graph complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="cluster-or-graph"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence maxOccurs="unbounded" minOccurs="0"&gt;
 *         &lt;choice&gt;
 *           &lt;element name="node" type="{http://www.martin-loetzsch.de/DOTML}node"/&gt;
 *           &lt;element name="cluster" type="{http://www.martin-loetzsch.de/DOTML}cluster"/&gt;
 *           &lt;element name="sub-graph" type="{http://www.martin-loetzsch.de/DOTML}sub-graph"/&gt;
 *           &lt;element name="record" type="{http://www.martin-loetzsch.de/DOTML}record-node"/&gt;
 *           &lt;element name="edge" type="{http://www.martin-loetzsch.de/DOTML}edge"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *       &lt;attGroup ref="{http://www.martin-loetzsch.de/DOTML}font-attributes"/&gt;
 *       &lt;attribute name="bgcolor" type="{http://www.martin-loetzsch.de/DOTML}color" /&gt;
 *       &lt;attribute name="label" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "cluster-or-graph", propOrder = {"nodeOrClusterOrSubGraph"})
@XmlSeeAlso({Cluster.class, Graph.class})
public class ClusterOrGraph implements Cloneable, FontAttributes {

  @XmlElements({
      @XmlElement(name = "node", type = Node.class),
      @XmlElement(name = "cluster", type = Cluster.class),
      @XmlElement(name = "sub-graph", type = SubGraph.class),
      @XmlElement(name = "record", type = RecordNode.class),
      @XmlElement(name = "edge", type = Edge.class)})
  protected List<Object> nodeOrClusterOrSubGraph;
  @XmlAttribute(name = "bgcolor")
  protected String bgcolor;
  @XmlAttribute(name = "label")
  protected String label;
  @XmlAttribute(name = "fontname")
  protected String fontname;
  @XmlAttribute(name = "fontsize")
  protected BigDecimal fontsize;
  @XmlAttribute(name = "fontcolor")
  protected String fontcolor;

  /**
   * Gets the value of the nodeOrClusterOrSubGraph property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the nodeOrClusterOrSubGraph property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getNodeOrClusterOrSubGraph().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link Node } {@link Cluster } {@link SubGraph }
   * {@link RecordNode } {@link Edge }
   * 
   * 
   */
  public List<Object> getNodeOrClusterOrSubGraph() {
    if (nodeOrClusterOrSubGraph == null) {
      nodeOrClusterOrSubGraph = new ArrayList<Object>();
    }
    return this.nodeOrClusterOrSubGraph;
  }

  /**
   * Gets the value of the bgcolor property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getBgcolor() {
    return bgcolor;
  }

  /**
   * Sets the value of the bgcolor property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setBgcolor(String value) {
    this.bgcolor = value;
  }

  /**
   * Gets the value of the label property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLabel() {
    return label;
  }

  /**
   * Sets the value of the label property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLabel(String value) {
    this.label = value;
  }

  /**
   * Gets the value of the fontname property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFontname() {
    return fontname;
  }

  /**
   * Sets the value of the fontname property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFontname(String value) {
    this.fontname = value;
  }

  /**
   * Gets the value of the fontsize property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getFontsize() {
    return fontsize;
  }

  /**
   * Sets the value of the fontsize property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setFontsize(BigDecimal value) {
    this.fontsize = value;
  }

  /**
   * Gets the value of the fontcolor property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFontcolor() {
    return fontcolor;
  }

  /**
   * Sets the value of the fontcolor property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFontcolor(String value) {
    this.fontcolor = value;
  }

  public static ClusterOrGraph.Builder<Void> builder() {
    return new ClusterOrGraph.Builder<Void>(null, null, false);
  }

  public static ClusterOrGraph.Builder<Void> copyOf(final ClusterOrGraph other) {
    return new ClusterOrGraph.Builder<Void>(null, other, true);
  }

  public static ClusterOrGraph.Builder<Void> copyOf(final ClusterOrGraph other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new ClusterOrGraph.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static ClusterOrGraph.Builder<Void> copyExcept(final ClusterOrGraph other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ClusterOrGraph.Builder<Void> copyOnly(final ClusterOrGraph other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((((((((((((((("(nodeOrClusterOrSubGraph = " + nodeOrClusterOrSubGraph) + "), ") + "(bgcolor = ") + bgcolor) + "), ") + "(label = ") + label) + "), ") + "(fontname = ") + fontname) + "), ") + "(fontsize = ") + fontsize) + "), ") + "(fontcolor = ") + fontcolor) + ") ");
  }

  @Override
  public ClusterOrGraph clone() throws CloneNotSupportedException {
    final ClusterOrGraph newObject = ((ClusterOrGraph) super.clone());
    newObject.nodeOrClusterOrSubGraph =
        ((this.nodeOrClusterOrSubGraph == null) ? null : new ArrayList<Object>(
            this.nodeOrClusterOrSubGraph));
    return newObject;
  }

  public static class Builder<TParentBuilder> implements
      FontAttributes.BuildSupport<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final ClusterOrGraph _product;
    private List<Object> nodeOrClusterOrSubGraph;
    private String bgcolor;
    private String label;
    private String fontname;
    private BigDecimal fontsize;
    private String fontcolor;

    public Builder(final TParentBuilder parentBuilder, final ClusterOrGraph other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.nodeOrClusterOrSubGraph =
            ((other.nodeOrClusterOrSubGraph == null) ? null : new ArrayList<Object>(
                other.nodeOrClusterOrSubGraph));
        this.bgcolor = other.bgcolor;
        this.label = other.label;
        this.fontname = other.fontname;
        this.fontsize = other.fontsize;
        this.fontcolor = other.fontcolor;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ClusterOrGraph other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree nodeOrClusterOrSubGraphPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("nodeOrClusterOrSubGraph"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (nodeOrClusterOrSubGraphPropertyTree != null)
            : ((nodeOrClusterOrSubGraphPropertyTree == null) || (!nodeOrClusterOrSubGraphPropertyTree
                .isLeaf())))) {
          this.nodeOrClusterOrSubGraph =
              ((other.nodeOrClusterOrSubGraph == null) ? null : new ArrayList<Object>(
                  other.nodeOrClusterOrSubGraph));
        }
        final PropertyTree bgcolorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("bgcolor"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (bgcolorPropertyTree != null)
            : ((bgcolorPropertyTree == null) || (!bgcolorPropertyTree.isLeaf())))) {
          this.bgcolor = other.bgcolor;
        }
        final PropertyTree labelPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("label"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labelPropertyTree != null)
            : ((labelPropertyTree == null) || (!labelPropertyTree.isLeaf())))) {
          this.label = other.label;
        }
        final PropertyTree fontnamePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontname"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontnamePropertyTree != null)
            : ((fontnamePropertyTree == null) || (!fontnamePropertyTree.isLeaf())))) {
          this.fontname = other.fontname;
        }
        final PropertyTree fontsizePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontsize"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontsizePropertyTree != null)
            : ((fontsizePropertyTree == null) || (!fontsizePropertyTree.isLeaf())))) {
          this.fontsize = other.fontsize;
        }
        final PropertyTree fontcolorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontcolor"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontcolorPropertyTree != null)
            : ((fontcolorPropertyTree == null) || (!fontcolorPropertyTree.isLeaf())))) {
          this.fontcolor = other.fontcolor;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends ClusterOrGraph> P init(final P product) {
      product.nodeOrClusterOrSubGraph = this.nodeOrClusterOrSubGraph;
      product.bgcolor = this.bgcolor;
      product.label = this.label;
      product.fontname = this.fontname;
      product.fontsize = this.fontsize;
      product.fontcolor = this.fontcolor;
      return product;
    }

    public ClusterOrGraph.Builder<TParentBuilder> addNodeOrClusterOrSubGraph(
        final List<?> nodeOrClusterOrSubGraph) {
      if (this.nodeOrClusterOrSubGraph == null) {
        this.nodeOrClusterOrSubGraph = new ArrayList<Object>();
      }
      this.nodeOrClusterOrSubGraph.addAll(nodeOrClusterOrSubGraph);
      return this;
    }

    public ClusterOrGraph.Builder<TParentBuilder> withNodeOrClusterOrSubGraph(
        final List<?> nodeOrClusterOrSubGraph) {
      if (this.nodeOrClusterOrSubGraph != null) {
        this.nodeOrClusterOrSubGraph.clear();
      }
      return addNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
    }

    public ClusterOrGraph.Builder<TParentBuilder> addNodeOrClusterOrSubGraph(
        Object... nodeOrClusterOrSubGraph) {
      addNodeOrClusterOrSubGraph(Arrays.asList(nodeOrClusterOrSubGraph));
      return this;
    }

    public ClusterOrGraph.Builder<TParentBuilder> withNodeOrClusterOrSubGraph(
        Object... nodeOrClusterOrSubGraph) {
      withNodeOrClusterOrSubGraph(Arrays.asList(nodeOrClusterOrSubGraph));
      return this;
    }

    public ClusterOrGraph.Builder<TParentBuilder> withBgcolor(final String bgcolor) {
      this.bgcolor = bgcolor;
      return this;
    }

    public ClusterOrGraph.Builder<TParentBuilder> withLabel(final String label) {
      this.label = label;
      return this;
    }

    public ClusterOrGraph.Builder<TParentBuilder> withFontname(final String fontname) {
      this.fontname = fontname;
      return this;
    }

    public ClusterOrGraph.Builder<TParentBuilder> withFontsize(final BigDecimal fontsize) {
      this.fontsize = fontsize;
      return this;
    }

    public ClusterOrGraph.Builder<TParentBuilder> withFontcolor(final String fontcolor) {
      this.fontcolor = fontcolor;
      return this;
    }

    public ClusterOrGraph build() {
      if (this._product == null) {
        return this.init(new ClusterOrGraph());
      } else {
        return ((ClusterOrGraph) this._product);
      }
    }

  }

  public static class Select extends ClusterOrGraph.Selector<ClusterOrGraph.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ClusterOrGraph.Select _root() {
      return new ClusterOrGraph.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> nodeOrClusterOrSubGraph =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> bgcolor =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> label =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> fontname =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> fontsize =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> fontcolor =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.nodeOrClusterOrSubGraph != null) {
        products.put("nodeOrClusterOrSubGraph", this.nodeOrClusterOrSubGraph.init());
      }
      if (this.bgcolor != null) {
        products.put("bgcolor", this.bgcolor.init());
      }
      if (this.label != null) {
        products.put("label", this.label.init());
      }
      if (this.fontname != null) {
        products.put("fontname", this.fontname.init());
      }
      if (this.fontsize != null) {
        products.put("fontsize", this.fontsize.init());
      }
      if (this.fontcolor != null) {
        products.put("fontcolor", this.fontcolor.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> nodeOrClusterOrSubGraph() {
      return ((this.nodeOrClusterOrSubGraph == null) ? this.nodeOrClusterOrSubGraph =
          new com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>>(
              this._root, this, "nodeOrClusterOrSubGraph") : this.nodeOrClusterOrSubGraph);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> bgcolor() {
      return ((this.bgcolor == null) ? this.bgcolor =
          new com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>>(
              this._root, this, "bgcolor") : this.bgcolor);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> label() {
      return ((this.label == null) ? this.label =
          new com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>>(
              this._root, this, "label") : this.label);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> fontname() {
      return ((this.fontname == null) ? this.fontname =
          new com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>>(
              this._root, this, "fontname") : this.fontname);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> fontsize() {
      return ((this.fontsize == null) ? this.fontsize =
          new com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>>(
              this._root, this, "fontsize") : this.fontsize);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>> fontcolor() {
      return ((this.fontcolor == null) ? this.fontcolor =
          new com.kscs.util.jaxb.Selector<TRoot, ClusterOrGraph.Selector<TRoot, TParent>>(
              this._root, this, "fontcolor") : this.fontcolor);
    }

  }

}
