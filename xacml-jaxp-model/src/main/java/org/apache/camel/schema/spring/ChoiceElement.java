//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation,
// v2.2.10-b140310.1920
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.03.04 at 01:11:38 AM PST
//

package org.apache.camel.schema.spring;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;

/**
 * <p>
 * Java class for anonymous complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType>
 *   &lt;complexContent>
 *     &lt;extension base="{http://camel.apache.org/schema/spring}processorDefinition">
 *       &lt;sequence>
 *         &lt;element ref="{http://camel.apache.org/schema/spring}when" maxOccurs="unbounded" minOccurs="0"/>
 *         &lt;element ref="{http://camel.apache.org/schema/spring}otherwise" minOccurs="0"/>
 *       &lt;/sequence>
 *       &lt;anyAttribute processContents='skip' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {"when", "otherwise"})
@XmlRootElement(name = "choice")
public class ChoiceElement extends ProcessorDefinition {

  protected List<WhenDefinition> when;
  protected OtherwiseElement otherwise;

  /**
   * Gets the value of the when property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the when property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getWhen().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link WhenDefinition }
   * 
   * 
   */
  public List<WhenDefinition> getWhen() {
    if (when == null) {
      when = new ArrayList<WhenDefinition>();
    }
    return this.when;
  }

  /**
   * Gets the value of the otherwise property.
   * 
   * @return possible object is {@link OtherwiseElement }
   * 
   */
  public OtherwiseElement getOtherwise() {
    return otherwise;
  }

  /**
   * Sets the value of the otherwise property.
   * 
   * @param value allowed object is {@link OtherwiseElement }
   * 
   */
  public void setOtherwise(OtherwiseElement value) {
    this.otherwise = value;
  }

  public ChoiceElement withWhen(WhenDefinition... values) {
    if (values != null) {
      for (WhenDefinition value : values) {
        getWhen().add(value);
      }
    }
    return this;
  }

  public ChoiceElement withWhen(Collection<WhenDefinition> values) {
    if (values != null) {
      getWhen().addAll(values);
    }
    return this;
  }

  public ChoiceElement withOtherwise(OtherwiseElement value) {
    setOtherwise(value);
    return this;
  }

  @Override
  public ChoiceElement withInheritErrorHandler(Boolean value) {
    setInheritErrorHandler(value);
    return this;
  }

  @Override
  public ChoiceElement withDescription(DescriptionElement value) {
    setDescription(value);
    return this;
  }

  @Override
  public ChoiceElement withCustomId(Boolean value) {
    setCustomId(value);
    return this;
  }

  @Override
  public ChoiceElement withId(String value) {
    setId(value);
    return this;
  }

  /**
   * Generates a String representation of the contents of this type. This is an extension method, produced by the 'ts'
   * xjc plugin
   * 
   */
  @Override
  public String toString() {
    return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
  }

}
