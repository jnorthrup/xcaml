//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation,
// v2.2.10-b140310.1920
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.02.24 at 01:59:12 PM PST
//

package org.apache.camel.schema.spring;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;

/**
 * <p>
 * Java class for onCompletionDefinition complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="onCompletionDefinition">
 *   &lt;complexContent>
 *     &lt;extension base="{http://camel.apache.org/schema/spring}processorDefinition">
 *       &lt;sequence>
 *         &lt;element name="onWhen" type="{http://camel.apache.org/schema/spring}whenDefinition" minOccurs="0"/>
 *         &lt;choice maxOccurs="unbounded" minOccurs="0">
 *           &lt;element ref="{http://camel.apache.org/schema/spring}aop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}aggregate"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}bean"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}doCatch"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}when"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}choice"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}otherwise"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}convertBodyTo"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}delay"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}dynamicRouter"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}enrich"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}filter"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}doFinally"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}idempotentConsumer"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}inOnly"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}inOut"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}intercept"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}interceptFrom"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}interceptToEndpoint"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}loadBalance"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}log"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}loop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}marshal"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}multicast"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}onCompletion"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}onException"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}pipeline"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}policy"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}pollEnrich"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}process"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}recipientList"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}removeHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}removeHeaders"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}removeProperty"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}resequence"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}rollback"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}route"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}routingSlip"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}sample"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}setBody"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}setExchangePattern"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}setFaultBody"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}setHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}setOutHeader"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}setProperty"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}sort"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}split"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}stop"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}threads"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}throttle"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}throwException"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}to"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}transacted"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}transform"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}doTry"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}unmarshal"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}validate"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}wireTap"/>
 *           &lt;element ref="{http://camel.apache.org/schema/spring}restBinding"/>
 *         &lt;/choice>
 *       &lt;/sequence>
 *       &lt;attribute name="mode" type="{http://camel.apache.org/schema/spring}onCompletionMode" />
 *       &lt;attribute name="onCompleteOnly" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="onFailureOnly" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="parallelProcessing" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;attribute name="executorServiceRef" type="{http://www.w3.org/2001/XMLSchema}string" />
 *       &lt;attribute name="useOriginalMessage" type="{http://www.w3.org/2001/XMLSchema}boolean" />
 *       &lt;anyAttribute processContents='skip' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "onCompletionDefinition", propOrder = {"onWhen", "aopOrAggregateOrBean"})
public class OnCompletionDefinition extends ProcessorDefinition {

  protected WhenDefinition onWhen;
  @XmlElements({
      @XmlElement(name = "aop", type = AopDefinition.class),
      @XmlElement(name = "aggregate", type = AggregateDefinition.class),
      @XmlElement(name = "bean", type = BeanDefinition.class),
      @XmlElement(name = "doCatch", type = CatchDefinition.class),
      @XmlElement(name = "when", type = WhenDefinition.class),
      @XmlElement(name = "choice", type = ChoiceDefinition.class),
      @XmlElement(name = "otherwise", type = OtherwiseDefinition.class),
      @XmlElement(name = "convertBodyTo", type = ConvertBodyDefinition.class),
      @XmlElement(name = "delay", type = DelayDefinition.class),
      @XmlElement(name = "dynamicRouter", type = DynamicRouterDefinition.class),
      @XmlElement(name = "enrich", type = EnrichDefinition.class),
      @XmlElement(name = "filter", type = FilterDefinition.class),
      @XmlElement(name = "doFinally", type = FinallyDefinition.class),
      @XmlElement(name = "idempotentConsumer", type = IdempotentConsumerDefinition.class),
      @XmlElement(name = "inOnly", type = InOnlyDefinition.class),
      @XmlElement(name = "inOut", type = InOutDefinition.class),
      @XmlElement(name = "intercept", type = InterceptDefinition.class),
      @XmlElement(name = "interceptFrom", type = InterceptFromDefinition.class),
      @XmlElement(name = "interceptToEndpoint", type = InterceptSendToEndpointDefinition.class),
      @XmlElement(name = "loadBalance", type = LoadBalanceDefinition.class),
      @XmlElement(name = "log", type = LogDefinition.class),
      @XmlElement(name = "loop", type = LoopDefinition.class),
      @XmlElement(name = "marshal", type = MarshalDefinition.class),
      @XmlElement(name = "multicast", type = MulticastDefinition.class),
      @XmlElement(name = "onCompletion", type = OnCompletionDefinition.class),
      @XmlElement(name = "onException", type = OnExceptionDefinition.class),
      @XmlElement(name = "pipeline", type = PipelineDefinition.class),
      @XmlElement(name = "policy", type = PolicyDefinition.class),
      @XmlElement(name = "pollEnrich", type = PollEnrichDefinition.class),
      @XmlElement(name = "process", type = ProcessDefinition.class),
      @XmlElement(name = "recipientList", type = RecipientListDefinition.class),
      @XmlElement(name = "removeHeader", type = RemoveHeaderDefinition.class),
      @XmlElement(name = "removeHeaders", type = RemoveHeadersDefinition.class),
      @XmlElement(name = "removeProperty", type = RemovePropertyDefinition.class),
      @XmlElement(name = "resequence", type = ResequenceDefinition.class),
      @XmlElement(name = "rollback", type = RollbackDefinition.class),
      @XmlElement(name = "route", type = RouteDefinition.class),
      @XmlElement(name = "routingSlip", type = RoutingSlipDefinition.class),
      @XmlElement(name = "sample", type = SamplingDefinition.class),
      @XmlElement(name = "setBody", type = SetBodyDefinition.class),
      @XmlElement(name = "setExchangePattern", type = SetExchangePatternDefinition.class),
      @XmlElement(name = "setFaultBody", type = SetFaultBodyDefinition.class),
      @XmlElement(name = "setHeader", type = SetHeaderDefinition.class),
      @XmlElement(name = "setOutHeader", type = SetOutHeaderDefinition.class),
      @XmlElement(name = "setProperty", type = SetPropertyDefinition.class),
      @XmlElement(name = "sort", type = SortDefinition.class),
      @XmlElement(name = "split", type = SplitDefinition.class),
      @XmlElement(name = "stop", type = StopDefinition.class),
      @XmlElement(name = "threads", type = ThreadsDefinition.class),
      @XmlElement(name = "throttle", type = ThrottleDefinition.class),
      @XmlElement(name = "throwException", type = ThrowExceptionDefinition.class),
      @XmlElement(name = "to", type = ToDefinition.class),
      @XmlElement(name = "transacted", type = TransactedDefinition.class),
      @XmlElement(name = "transform", type = TransformDefinition.class),
      @XmlElement(name = "doTry", type = TryDefinition.class),
      @XmlElement(name = "unmarshal", type = UnmarshalDefinition.class),
      @XmlElement(name = "validate", type = ValidateDefinition.class),
      @XmlElement(name = "wireTap", type = WireTapDefinition.class),
      @XmlElement(name = "restBinding", type = RestBindingDefinition.class)})
  protected List<ProcessorDefinition> aopOrAggregateOrBean;
  @XmlAttribute(name = "mode")
  protected OnCompletionMode mode;
  @XmlAttribute(name = "onCompleteOnly")
  protected Boolean onCompleteOnly;
  @XmlAttribute(name = "onFailureOnly")
  protected Boolean onFailureOnly;
  @XmlAttribute(name = "parallelProcessing")
  protected Boolean parallelProcessing;
  @XmlAttribute(name = "executorServiceRef")
  protected String executorServiceRef;
  @XmlAttribute(name = "useOriginalMessage")
  protected Boolean useOriginalMessage;

  /**
   * Gets the value of the onWhen property.
   * 
   * @return possible object is {@link WhenDefinition }
   * 
   */
  public WhenDefinition getOnWhen() {
    return onWhen;
  }

  /**
   * Sets the value of the onWhen property.
   * 
   * @param value allowed object is {@link WhenDefinition }
   * 
   */
  public void setOnWhen(WhenDefinition value) {
    this.onWhen = value;
  }

  /**
   * Gets the value of the aopOrAggregateOrBean property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the aopOrAggregateOrBean property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getAopOrAggregateOrBean().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link AopDefinition } {@link AggregateDefinition }
   * {@link BeanDefinition } {@link CatchDefinition } {@link WhenDefinition } {@link ChoiceDefinition }
   * {@link OtherwiseDefinition } {@link ConvertBodyDefinition } {@link DelayDefinition } {@link DynamicRouterDefinition }
   * {@link EnrichDefinition } {@link FilterDefinition } {@link FinallyDefinition } {@link IdempotentConsumerDefinition }
   * {@link InOnlyDefinition } {@link InOutDefinition } {@link InterceptDefinition } {@link InterceptFromDefinition }
   * {@link InterceptSendToEndpointDefinition } {@link LoadBalanceDefinition } {@link LogDefinition }
   * {@link LoopDefinition } {@link MarshalDefinition } {@link MulticastDefinition } {@link OnCompletionDefinition }
   * {@link OnExceptionDefinition } {@link PipelineDefinition } {@link PolicyDefinition } {@link PollEnrichDefinition }
   * {@link ProcessDefinition } {@link RecipientListDefinition } {@link RemoveHeaderDefinition }
   * {@link RemoveHeadersDefinition } {@link RemovePropertyDefinition } {@link ResequenceDefinition }
   * {@link RollbackDefinition } {@link RouteDefinition } {@link RoutingSlipDefinition } {@link SamplingDefinition }
   * {@link SetBodyDefinition } {@link SetExchangePatternDefinition } {@link SetFaultBodyDefinition }
   * {@link SetHeaderDefinition } {@link SetOutHeaderDefinition } {@link SetPropertyDefinition } {@link SortDefinition }
   * {@link SplitDefinition } {@link StopDefinition } {@link ThreadsDefinition } {@link ThrottleDefinition }
   * {@link ThrowExceptionDefinition } {@link ToDefinition } {@link TransactedDefinition } {@link TransformDefinition }
   * {@link TryDefinition } {@link UnmarshalDefinition } {@link ValidateDefinition } {@link WireTapDefinition }
   * {@link RestBindingDefinition }
   * 
   * 
   */
  public List<ProcessorDefinition> getAopOrAggregateOrBean() {
    if (aopOrAggregateOrBean == null) {
      aopOrAggregateOrBean = new ArrayList<ProcessorDefinition>();
    }
    return this.aopOrAggregateOrBean;
  }

  /**
   * Gets the value of the mode property.
   * 
   * @return possible object is {@link OnCompletionMode }
   * 
   */
  public OnCompletionMode getMode() {
    return mode;
  }

  /**
   * Sets the value of the mode property.
   * 
   * @param value allowed object is {@link OnCompletionMode }
   * 
   */
  public void setMode(OnCompletionMode value) {
    this.mode = value;
  }

  /**
   * Gets the value of the onCompleteOnly property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isOnCompleteOnly() {
    return onCompleteOnly;
  }

  /**
   * Sets the value of the onCompleteOnly property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setOnCompleteOnly(Boolean value) {
    this.onCompleteOnly = value;
  }

  /**
   * Gets the value of the onFailureOnly property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isOnFailureOnly() {
    return onFailureOnly;
  }

  /**
   * Sets the value of the onFailureOnly property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setOnFailureOnly(Boolean value) {
    this.onFailureOnly = value;
  }

  /**
   * Gets the value of the parallelProcessing property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isParallelProcessing() {
    return parallelProcessing;
  }

  /**
   * Sets the value of the parallelProcessing property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setParallelProcessing(Boolean value) {
    this.parallelProcessing = value;
  }

  /**
   * Gets the value of the executorServiceRef property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getExecutorServiceRef() {
    return executorServiceRef;
  }

  /**
   * Sets the value of the executorServiceRef property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setExecutorServiceRef(String value) {
    this.executorServiceRef = value;
  }

  /**
   * Gets the value of the useOriginalMessage property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isUseOriginalMessage() {
    return useOriginalMessage;
  }

  /**
   * Sets the value of the useOriginalMessage property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setUseOriginalMessage(Boolean value) {
    this.useOriginalMessage = value;
  }

  public OnCompletionDefinition withOnWhen(WhenDefinition value) {
    setOnWhen(value);
    return this;
  }

  public OnCompletionDefinition withAopOrAggregateOrBean(ProcessorDefinition... values) {
    if (values != null) {
      for (ProcessorDefinition value : values) {
        getAopOrAggregateOrBean().add(value);
      }
    }
    return this;
  }

  public OnCompletionDefinition withAopOrAggregateOrBean(Collection<ProcessorDefinition> values) {
    if (values != null) {
      getAopOrAggregateOrBean().addAll(values);
    }
    return this;
  }

  public OnCompletionDefinition withMode(OnCompletionMode value) {
    setMode(value);
    return this;
  }

  public OnCompletionDefinition withOnCompleteOnly(Boolean value) {
    setOnCompleteOnly(value);
    return this;
  }

  public OnCompletionDefinition withOnFailureOnly(Boolean value) {
    setOnFailureOnly(value);
    return this;
  }

  public OnCompletionDefinition withParallelProcessing(Boolean value) {
    setParallelProcessing(value);
    return this;
  }

  public OnCompletionDefinition withExecutorServiceRef(String value) {
    setExecutorServiceRef(value);
    return this;
  }

  public OnCompletionDefinition withUseOriginalMessage(Boolean value) {
    setUseOriginalMessage(value);
    return this;
  }

  @Override
  public OnCompletionDefinition withInheritErrorHandler(Boolean value) {
    setInheritErrorHandler(value);
    return this;
  }

  @Override
  public OnCompletionDefinition withDescription(DescriptionDefinition value) {
    setDescription(value);
    return this;
  }

  @Override
  public OnCompletionDefinition withCustomId(Boolean value) {
    setCustomId(value);
    return this;
  }

  @Override
  public OnCompletionDefinition withId(String value) {
    setId(value);
    return this;
  }

  /**
   * Generates a String representation of the contents of this type. This is an extension method, produced by the 'ts'
   * xjc plugin
   * 
   */
  @Override
  public String toString() {
    return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
  }

}
