//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation,
// v2.2.10-b140310.1920
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.02.24 at 01:59:12 PM PST
//

package org.apache.camel.schema.spring;

import java.util.Collection;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;

/**
 * <p>
 * Java class for filterDefinition complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="filterDefinition">
 *   &lt;complexContent>
 *     &lt;extension base="{http://camel.apache.org/schema/spring}expressionNode">
 *       &lt;sequence>
 *       &lt;/sequence>
 *       &lt;anyAttribute processContents='skip' namespace='##other'/>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "filterDefinition")
public class FilterDefinition extends ExpressionNode {

  @Override
  public FilterDefinition withExpressionDefinition(Expression value) {
    setExpressionDefinition(value);
    return this;
  }

  @Override
  public FilterDefinition withConstant(ConstantExpression value) {
    setConstant(value);
    return this;
  }

  @Override
  public FilterDefinition withEl(ElExpression value) {
    setEl(value);
    return this;
  }

  @Override
  public FilterDefinition withGroovy(GroovyExpression value) {
    setGroovy(value);
    return this;
  }

  @Override
  public FilterDefinition withHeader(HeaderExpression value) {
    setHeader(value);
    return this;
  }

  @Override
  public FilterDefinition withJxpath(JxPathExpression value) {
    setJxpath(value);
    return this;
  }

  @Override
  public FilterDefinition withJavaScript(JavaScriptExpression value) {
    setJavaScript(value);
    return this;
  }

  @Override
  public FilterDefinition withJsonpath(JsonPathExpression value) {
    setJsonpath(value);
    return this;
  }

  @Override
  public FilterDefinition withLanguage(LanguageExpression value) {
    setLanguage(value);
    return this;
  }

  @Override
  public FilterDefinition withMethod(MethodCallExpression value) {
    setMethod(value);
    return this;
  }

  @Override
  public FilterDefinition withMvel(MvelExpression value) {
    setMvel(value);
    return this;
  }

  @Override
  public FilterDefinition withOgnl(OgnlExpression value) {
    setOgnl(value);
    return this;
  }

  @Override
  public FilterDefinition withPhp(PhpExpression value) {
    setPhp(value);
    return this;
  }

  @Override
  public FilterDefinition withProperty(Object value) {
    setProperty(value);
    return this;
  }

  @Override
  public FilterDefinition withPython(PythonExpression value) {
    setPython(value);
    return this;
  }

  @Override
  public FilterDefinition withRef(RefExpression value) {
    setRef(value);
    return this;
  }

  @Override
  public FilterDefinition withRuby(RubyExpression value) {
    setRuby(value);
    return this;
  }

  @Override
  public FilterDefinition withSimple(SimpleExpression value) {
    setSimple(value);
    return this;
  }

  @Override
  public FilterDefinition withSpel(SpELExpression value) {
    setSpel(value);
    return this;
  }

  @Override
  public FilterDefinition withSql(SqlExpression value) {
    setSql(value);
    return this;
  }

  @Override
  public FilterDefinition withTokenize(TokenizerExpression value) {
    setTokenize(value);
    return this;
  }

  @Override
  public FilterDefinition withVtdxml(VtdXmlExpression value) {
    setVtdxml(value);
    return this;
  }

  @Override
  public FilterDefinition withXtokenize(XmlTokenizerExpression value) {
    setXtokenize(value);
    return this;
  }

  @Override
  public FilterDefinition withXpath(XPathExpression value) {
    setXpath(value);
    return this;
  }

  @Override
  public FilterDefinition withXquery(XQueryExpression value) {
    setXquery(value);
    return this;
  }

  @Override
  public FilterDefinition withAopOrAggregateOrBean(ProcessorDefinition... values) {
    if (values != null) {
      for (ProcessorDefinition value : values) {
        getAopOrAggregateOrBean().add(value);
      }
    }
    return this;
  }

  @Override
  public FilterDefinition withAopOrAggregateOrBean(Collection<ProcessorDefinition> values) {
    if (values != null) {
      getAopOrAggregateOrBean().addAll(values);
    }
    return this;
  }

  @Override
  public FilterDefinition withInheritErrorHandler(Boolean value) {
    setInheritErrorHandler(value);
    return this;
  }

  @Override
  public FilterDefinition withDescription(DescriptionDefinition value) {
    setDescription(value);
    return this;
  }

  @Override
  public FilterDefinition withCustomId(Boolean value) {
    setCustomId(value);
    return this;
  }

  @Override
  public FilterDefinition withId(String value) {
    setId(value);
    return this;
  }

  /**
   * Generates a String representation of the contents of this type. This is an extension method, produced by the 'ts'
   * xjc plugin
   * 
   */
  @Override
  public String toString() {
    return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
  }

}
