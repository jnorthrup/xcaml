//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for PolicyIssuerType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PolicyIssuerType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Content" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Attribute" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PolicyIssuerType", propOrder = {"content", "attribute"})
public class PolicyIssuerType implements Cloneable {

  @XmlElement(name = "Content")
  protected ContentType content;
  @XmlElement(name = "Attribute")
  protected List<AttributeType> attribute;
  protected transient List<AttributeType> attribute_RO = null;

  /**
   * Gets the value of the content property.
   * 
   * @return possible object is {@link ContentType }
   * 
   */
  public ContentType getContent() {
    return content;
  }

  /**
   * Sets the value of the content property.
   * 
   * @param value allowed object is {@link ContentType }
   * 
   */
  protected void setContent(ContentType value) {
    this.content = value;
  }

  public static PolicyIssuerType.Builder<Void> builder() {
    return new PolicyIssuerType.Builder<Void>(null, null, false);
  }

  public static PolicyIssuerType.Builder<Void> copyOf(final PolicyIssuerType other) {
    return new PolicyIssuerType.Builder<Void>(null, other, true);
  }

  public static PolicyIssuerType.Builder<Void> copyOf(final PolicyIssuerType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new PolicyIssuerType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static PolicyIssuerType.Builder<Void> copyExcept(final PolicyIssuerType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static PolicyIssuerType.Builder<Void> copyOnly(final PolicyIssuerType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((("(content = " + content) + "), ") + "(attribute = ") + attribute) + ") ");
  }

  @Override
  public PolicyIssuerType clone() throws CloneNotSupportedException {
    final PolicyIssuerType newObject = ((PolicyIssuerType) super.clone());
    newObject.content = ((this.content == null) ? null : this.content.clone());
    if (this.attribute == null) {
      newObject.attribute = null;
    } else {
      newObject.attribute = new ArrayList<AttributeType>();
      for (AttributeType item : this.attribute) {
        newObject.attribute.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.attribute_RO =
        ((attribute == null) ? null : Collections.unmodifiableList(newObject.attribute));
    return newObject;
  }

  public List<AttributeType> getAttribute() {
    if (this.attribute == null) {
      this.attribute = new ArrayList<AttributeType>();
    }
    if (this.attribute_RO == null) {
      this.attribute_RO =
          ((attribute == null) ? null : Collections.unmodifiableList(this.attribute));
    }
    return this.attribute_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final PolicyIssuerType _product;
    private ContentType.Builder<PolicyIssuerType.Builder<TParentBuilder>> content;
    private List<AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>> attribute;

    public Builder(final TParentBuilder parentBuilder, final PolicyIssuerType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.content =
            ((other.content == null) ? null
                : new ContentType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(this,
                    other.content, true));
        if (other.attribute == null) {
          this.attribute = null;
        } else {
          this.attribute =
              new ArrayList<AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>>();
          for (AttributeType _item : other.attribute) {
            this.attribute.add(((_item == null) ? null
                : new AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(this, _item,
                    true)));
          }
        }
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final PolicyIssuerType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree contentPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("content"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (contentPropertyTree != null)
            : ((contentPropertyTree == null) || (!contentPropertyTree.isLeaf())))) {
          this.content =
              ((other.content == null) ? null
                  : new ContentType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(this,
                      other.content, true, contentPropertyTree, treeUse));
        }
        final PropertyTree attributePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attribute"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributePropertyTree != null)
            : ((attributePropertyTree == null) || (!attributePropertyTree.isLeaf())))) {
          if (other.attribute == null) {
            this.attribute = null;
          } else {
            this.attribute =
                new ArrayList<AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>>();
            for (AttributeType _item : other.attribute) {
              this.attribute.add(((_item == null) ? null
                  : new AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(this,
                      _item, true, attributePropertyTree, treeUse)));
            }
          }
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends PolicyIssuerType> P init(final P product) {
      product.content = ((this.content == null) ? null : this.content.build());
      if (this.attribute != null) {
        final List<AttributeType> attribute = new ArrayList<AttributeType>(this.attribute.size());
        for (AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>> _item : this.attribute) {
          attribute.add(_item.build());
        }
        product.attribute = attribute;
      }
      product.attribute_RO =
          ((attribute == null) ? null : Collections.unmodifiableList(product.attribute));
      return product;
    }

    public PolicyIssuerType.Builder<TParentBuilder> withContent(final ContentType content) {
      this.content =
          ((content == null) ? null
              : new ContentType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(this, content,
                  false));
      return this;
    }

    public ContentType.Builder<? extends PolicyIssuerType.Builder<TParentBuilder>> withContent() {
      return this.content =
          new ContentType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(this, null, false);
    }

    public PolicyIssuerType.Builder<TParentBuilder> addAttribute(
        final List<? extends AttributeType> attribute) {
      if (this.attribute == null) {
        this.attribute =
            new ArrayList<AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>>();
      }
      for (AttributeType _item : attribute) {
        this.attribute.add(new AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(
            this, _item, false));
      }
      return this;
    }

    public PolicyIssuerType.Builder<TParentBuilder> withAttribute(
        final List<? extends AttributeType> attribute) {
      if (this.attribute != null) {
        this.attribute.clear();
      }
      return addAttribute(attribute);
    }

    public PolicyIssuerType.Builder<TParentBuilder> addAttribute(AttributeType... attribute) {
      addAttribute(Arrays.asList(attribute));
      return this;
    }

    public PolicyIssuerType.Builder<TParentBuilder> withAttribute(AttributeType... attribute) {
      withAttribute(Arrays.asList(attribute));
      return this;
    }

    public AttributeType.Builder<? extends PolicyIssuerType.Builder<TParentBuilder>> addAttribute() {
      if (this.attribute == null) {
        this.attribute =
            new ArrayList<AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>>();
      }
      final AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>> attributeBuilder =
          new AttributeType.Builder<PolicyIssuerType.Builder<TParentBuilder>>(this, null, false);
      this.attribute.add(attributeBuilder);
      return attributeBuilder;
    }

    public PolicyIssuerType build() {
      if (this._product == null) {
        return this.init(new PolicyIssuerType());
      } else {
        return ((PolicyIssuerType) this._product);
      }
    }

  }

  public static class Select extends PolicyIssuerType.Selector<PolicyIssuerType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static PolicyIssuerType.Select _root() {
      return new PolicyIssuerType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private ContentType.Selector<TRoot, PolicyIssuerType.Selector<TRoot, TParent>> content = null;
    private AttributeType.Selector<TRoot, PolicyIssuerType.Selector<TRoot, TParent>> attribute =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.content != null) {
        products.put("content", this.content.init());
      }
      if (this.attribute != null) {
        products.put("attribute", this.attribute.init());
      }
      return products;
    }

    public ContentType.Selector<TRoot, PolicyIssuerType.Selector<TRoot, TParent>> content() {
      return ((this.content == null) ? this.content =
          new ContentType.Selector<TRoot, PolicyIssuerType.Selector<TRoot, TParent>>(this._root,
              this, "content") : this.content);
    }

    public AttributeType.Selector<TRoot, PolicyIssuerType.Selector<TRoot, TParent>> attribute() {
      return ((this.attribute == null) ? this.attribute =
          new AttributeType.Selector<TRoot, PolicyIssuerType.Selector<TRoot, TParent>>(this._root,
              this, "attribute") : this.attribute);
    }

  }

}
