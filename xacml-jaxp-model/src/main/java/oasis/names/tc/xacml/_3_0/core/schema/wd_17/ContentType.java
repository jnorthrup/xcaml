//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlMixed;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for ContentType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ContentType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;any processContents='lax'/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ContentType", propOrder = {"content"})
public class ContentType implements Cloneable {

  @XmlMixed
  @XmlAnyElement(lax = true)
  protected List<Object> content;
  protected transient List<Object> content_RO = null;

  public static ContentType.Builder<Void> builder() {
    return new ContentType.Builder<Void>(null, null, false);
  }

  public static ContentType.Builder<Void> copyOf(final ContentType other) {
    return new ContentType.Builder<Void>(null, other, true);
  }

  public static ContentType.Builder<Void> copyOf(final ContentType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new ContentType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static ContentType.Builder<Void> copyExcept(final ContentType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ContentType.Builder<Void> copyOnly(final ContentType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(content = " + content) + ") ");
  }

  @Override
  public ContentType clone() throws CloneNotSupportedException {
    final ContentType newObject = ((ContentType) super.clone());
    newObject.content = ((this.content == null) ? null : new ArrayList<Object>(this.content));
    newObject.content_RO =
        ((content == null) ? null : Collections.unmodifiableList(newObject.content));
    return newObject;
  }

  public List<Object> getContent() {
    if (this.content == null) {
      this.content = new ArrayList<Object>();
    }
    if (this.content_RO == null) {
      this.content_RO = ((content == null) ? null : Collections.unmodifiableList(this.content));
    }
    return this.content_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final ContentType _product;
    private List<Object> content;

    public Builder(final TParentBuilder parentBuilder, final ContentType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.content = ((other.content == null) ? null : new ArrayList<Object>(other.content));
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ContentType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree contentPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("content"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (contentPropertyTree != null)
            : ((contentPropertyTree == null) || (!contentPropertyTree.isLeaf())))) {
          this.content = ((other.content == null) ? null : new ArrayList<Object>(other.content));
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends ContentType> P init(final P product) {
      product.content = this.content;
      product.content_RO =
          ((content == null) ? null : Collections.unmodifiableList(product.content));
      return product;
    }

    public ContentType.Builder<TParentBuilder> addContent(final List<?> content) {
      if (this.content == null) {
        this.content = new ArrayList<Object>();
      }
      this.content.addAll(content);
      return this;
    }

    public ContentType.Builder<TParentBuilder> withContent(final List<?> content) {
      if (this.content != null) {
        this.content.clear();
      }
      return addContent(content);
    }

    public ContentType.Builder<TParentBuilder> addContent(Object... content) {
      addContent(Arrays.asList(content));
      return this;
    }

    public ContentType.Builder<TParentBuilder> withContent(Object... content) {
      withContent(Arrays.asList(content));
      return this;
    }

    public ContentType build() {
      if (this._product == null) {
        return this.init(new ContentType());
      } else {
        return ((ContentType) this._product);
      }
    }

  }

  public static class Select extends ContentType.Selector<ContentType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ContentType.Select _root() {
      return new ContentType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ContentType.Selector<TRoot, TParent>> content = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.content != null) {
        products.put("content", this.content.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ContentType.Selector<TRoot, TParent>> content() {
      return ((this.content == null) ? this.content =
          new com.kscs.util.jaxb.Selector<TRoot, ContentType.Selector<TRoot, TParent>>(this._root,
              this, "content") : this.content);
    }

  }

}
