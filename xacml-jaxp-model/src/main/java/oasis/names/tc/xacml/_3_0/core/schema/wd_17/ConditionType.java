//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for ConditionType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ConditionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Expression"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ConditionType", propOrder = {"expression"})
public class ConditionType implements Cloneable {

  @XmlElementRef(name = "Expression", namespace = "urn:oasis:names:tc:xacml:3.0:core:schema:wd-17", type = JAXBElement.class)
  protected JAXBElement<?> expression;

  /**
   * Gets the value of the expression property.
   * 
   * @return possible object is {@link JAXBElement }{@code <}{@link AttributeDesignatorType }{@code >} {@link JAXBElement }
   *         {@code <}{@link AttributeValueType }{@code >} {@link JAXBElement }{@code <}{@link ApplyType }{@code >}
   *         {@link JAXBElement }{@code <}{@link FunctionType }{@code >} {@link JAXBElement }{@code <}
   *         {@link ExpressionType }{@code >} {@link JAXBElement }{@code <}{@link AttributeSelectorType }{@code >}
   *         {@link JAXBElement }{@code <}{@link VariableReferenceType }{@code >}
   * 
   */
  public JAXBElement<?> getExpression() {
    return expression;
  }

  /**
   * Sets the value of the expression property.
   * 
   * @param value allowed object is {@link JAXBElement }{@code <}{@link AttributeDesignatorType }{@code >}
   *          {@link JAXBElement }{@code <}{@link AttributeValueType }{@code >} {@link JAXBElement }{@code <}
   *          {@link ApplyType }{@code >} {@link JAXBElement }{@code <}{@link FunctionType }{@code >} {@link JAXBElement }
   *          {@code <}{@link ExpressionType }{@code >} {@link JAXBElement }{@code <}{@link AttributeSelectorType }{@code >}
   *          {@link JAXBElement }{@code <}{@link VariableReferenceType }{@code >}
   * 
   */
  public void setExpression(JAXBElement<?> value) {
    this.expression = value;
  }

  public static ConditionType.Builder<Void> builder() {
    return new ConditionType.Builder<Void>(null, null, false);
  }

  public static ConditionType.Builder<Void> copyOf(final ConditionType other) {
    return new ConditionType.Builder<Void>(null, other, true);
  }

  public static ConditionType.Builder<Void> copyOf(final ConditionType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new ConditionType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static ConditionType.Builder<Void> copyExcept(final ConditionType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ConditionType.Builder<Void> copyOnly(final ConditionType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(expression = " + expression) + ") ");
  }

  @Override
  public ConditionType clone() throws CloneNotSupportedException {
    final ConditionType newObject = ((ConditionType) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final ConditionType _product;
    private JAXBElement<?> expression;

    public Builder(final TParentBuilder parentBuilder, final ConditionType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.expression = other.expression;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ConditionType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree expressionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("expression"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (expressionPropertyTree != null)
            : ((expressionPropertyTree == null) || (!expressionPropertyTree.isLeaf())))) {
          this.expression = other.expression;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends ConditionType> P init(final P product) {
      product.expression = this.expression;
      return product;
    }

    public ConditionType.Builder<TParentBuilder> withExpression(final JAXBElement<?> expression) {
      this.expression = expression;
      return this;
    }

    public ConditionType build() {
      if (this._product == null) {
        return this.init(new ConditionType());
      } else {
        return ((ConditionType) this._product);
      }
    }

  }

  public static class Select extends ConditionType.Selector<ConditionType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ConditionType.Select _root() {
      return new ConditionType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ConditionType.Selector<TRoot, TParent>> expression =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.expression != null) {
        products.put("expression", this.expression.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ConditionType.Selector<TRoot, TParent>> expression() {
      return ((this.expression == null) ? this.expression =
          new com.kscs.util.jaxb.Selector<TRoot, ConditionType.Selector<TRoot, TParent>>(
              this._root, this, "expression") : this.expression);
    }

  }

}
