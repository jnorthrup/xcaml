//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for TargetType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="TargetType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence maxOccurs="unbounded" minOccurs="0"&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AnyOf"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "TargetType", propOrder = {"anyOf"})
public class TargetType implements Cloneable {

  @XmlElement(name = "AnyOf")
  protected List<AnyOfType> anyOf;

  /**
   * Gets the value of the anyOf property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the anyOf property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getAnyOf().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link AnyOfType }
   * 
   * 
   */
  public List<AnyOfType> getAnyOf() {
    if (anyOf == null) {
      anyOf = new ArrayList<AnyOfType>();
    }
    return this.anyOf;
  }

  public static TargetType.Builder<Void> builder() {
    return new TargetType.Builder<Void>(null, null, false);
  }

  public static TargetType.Builder<Void> copyOf(final TargetType other) {
    return new TargetType.Builder<Void>(null, other, true);
  }

  public static TargetType.Builder<Void> copyOf(final TargetType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new TargetType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static TargetType.Builder<Void> copyExcept(final TargetType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static TargetType.Builder<Void> copyOnly(final TargetType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(anyOf = " + anyOf) + ") ");
  }

  @Override
  public TargetType clone() throws CloneNotSupportedException {
    final TargetType newObject = ((TargetType) super.clone());
    if (this.anyOf == null) {
      newObject.anyOf = null;
    } else {
      newObject.anyOf = new ArrayList<AnyOfType>();
      for (AnyOfType item : this.anyOf) {
        newObject.anyOf.add(((item == null) ? null : item.clone()));
      }
    }
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final TargetType _product;
    private List<AnyOfType.Builder<TargetType.Builder<TParentBuilder>>> anyOf;

    public Builder(final TParentBuilder parentBuilder, final TargetType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.anyOf == null) {
          this.anyOf = null;
        } else {
          this.anyOf = new ArrayList<AnyOfType.Builder<TargetType.Builder<TParentBuilder>>>();
          for (AnyOfType _item : other.anyOf) {
            this.anyOf.add(((_item == null) ? null
                : new AnyOfType.Builder<TargetType.Builder<TParentBuilder>>(this, _item, true)));
          }
        }
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final TargetType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree anyOfPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("anyOf"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (anyOfPropertyTree != null)
            : ((anyOfPropertyTree == null) || (!anyOfPropertyTree.isLeaf())))) {
          if (other.anyOf == null) {
            this.anyOf = null;
          } else {
            this.anyOf = new ArrayList<AnyOfType.Builder<TargetType.Builder<TParentBuilder>>>();
            for (AnyOfType _item : other.anyOf) {
              this.anyOf.add(((_item == null) ? null
                  : new AnyOfType.Builder<TargetType.Builder<TParentBuilder>>(this, _item, true,
                      anyOfPropertyTree, treeUse)));
            }
          }
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends TargetType> P init(final P product) {
      if (this.anyOf != null) {
        final List<AnyOfType> anyOf = new ArrayList<AnyOfType>(this.anyOf.size());
        for (AnyOfType.Builder<TargetType.Builder<TParentBuilder>> _item : this.anyOf) {
          anyOf.add(_item.build());
        }
        product.anyOf = anyOf;
      }
      return product;
    }

    public TargetType.Builder<TParentBuilder> addAnyOf(final List<? extends AnyOfType> anyOf) {
      if (this.anyOf == null) {
        this.anyOf = new ArrayList<AnyOfType.Builder<TargetType.Builder<TParentBuilder>>>();
      }
      for (AnyOfType _item : anyOf) {
        this.anyOf
            .add(new AnyOfType.Builder<TargetType.Builder<TParentBuilder>>(this, _item, false));
      }
      return this;
    }

    public TargetType.Builder<TParentBuilder> withAnyOf(final List<? extends AnyOfType> anyOf) {
      if (this.anyOf != null) {
        this.anyOf.clear();
      }
      return addAnyOf(anyOf);
    }

    public TargetType.Builder<TParentBuilder> addAnyOf(AnyOfType... anyOf) {
      addAnyOf(Arrays.asList(anyOf));
      return this;
    }

    public TargetType.Builder<TParentBuilder> withAnyOf(AnyOfType... anyOf) {
      withAnyOf(Arrays.asList(anyOf));
      return this;
    }

    public AnyOfType.Builder<? extends TargetType.Builder<TParentBuilder>> addAnyOf() {
      if (this.anyOf == null) {
        this.anyOf = new ArrayList<AnyOfType.Builder<TargetType.Builder<TParentBuilder>>>();
      }
      final AnyOfType.Builder<TargetType.Builder<TParentBuilder>> anyOfBuilder =
          new AnyOfType.Builder<TargetType.Builder<TParentBuilder>>(this, null, false);
      this.anyOf.add(anyOfBuilder);
      return anyOfBuilder;
    }

    public TargetType build() {
      if (this._product == null) {
        return this.init(new TargetType());
      } else {
        return ((TargetType) this._product);
      }
    }

  }

  public static class Select extends TargetType.Selector<TargetType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static TargetType.Select _root() {
      return new TargetType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AnyOfType.Selector<TRoot, TargetType.Selector<TRoot, TParent>> anyOf = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.anyOf != null) {
        products.put("anyOf", this.anyOf.init());
      }
      return products;
    }

    public AnyOfType.Selector<TRoot, TargetType.Selector<TRoot, TParent>> anyOf() {
      return ((this.anyOf == null) ? this.anyOf =
          new AnyOfType.Selector<TRoot, TargetType.Selector<TRoot, TParent>>(this._root, this,
              "anyOf") : this.anyOf);
    }

  }

}
