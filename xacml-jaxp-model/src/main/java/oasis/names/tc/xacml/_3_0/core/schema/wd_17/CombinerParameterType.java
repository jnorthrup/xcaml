//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for CombinerParameterType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CombinerParameterType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AttributeValue"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="ParameterName" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CombinerParameterType", propOrder = {"attributeValue"})
public class CombinerParameterType implements Cloneable {

  @XmlElement(name = "AttributeValue", required = true)
  protected AttributeValueType attributeValue;
  @XmlAttribute(name = "ParameterName", required = true)
  protected String parameterName;

  /**
   * Gets the value of the attributeValue property.
   * 
   * @return possible object is {@link AttributeValueType }
   * 
   */
  public AttributeValueType getAttributeValue() {
    return attributeValue;
  }

  /**
   * Sets the value of the attributeValue property.
   * 
   * @param value allowed object is {@link AttributeValueType }
   * 
   */
  protected void setAttributeValue(AttributeValueType value) {
    this.attributeValue = value;
  }

  /**
   * Gets the value of the parameterName property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getParameterName() {
    return parameterName;
  }

  /**
   * Sets the value of the parameterName property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setParameterName(String value) {
    this.parameterName = value;
  }

  public static CombinerParameterType.Builder<Void> builder() {
    return new CombinerParameterType.Builder<Void>(null, null, false);
  }

  public static CombinerParameterType.Builder<Void> copyOf(final CombinerParameterType other) {
    return new CombinerParameterType.Builder<Void>(null, other, true);
  }

  public static CombinerParameterType.Builder<Void> copyOf(final CombinerParameterType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new CombinerParameterType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static CombinerParameterType.Builder<Void> copyExcept(final CombinerParameterType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static CombinerParameterType.Builder<Void> copyOnly(final CombinerParameterType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((("(attributeValue = " + attributeValue) + "), ") + "(parameterName = ") + parameterName) + ") ");
  }

  @Override
  public CombinerParameterType clone() throws CloneNotSupportedException {
    final CombinerParameterType newObject = ((CombinerParameterType) super.clone());
    newObject.attributeValue = ((this.attributeValue == null) ? null : this.attributeValue.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final CombinerParameterType _product;
    private AttributeValueType.Builder<CombinerParameterType.Builder<TParentBuilder>> attributeValue;
    private String parameterName;

    public Builder(final TParentBuilder parentBuilder, final CombinerParameterType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.attributeValue =
            ((other.attributeValue == null) ? null
                : new AttributeValueType.Builder<CombinerParameterType.Builder<TParentBuilder>>(
                    this, other.attributeValue, true));
        this.parameterName = other.parameterName;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final CombinerParameterType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree attributeValuePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeValue"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributeValuePropertyTree != null)
            : ((attributeValuePropertyTree == null) || (!attributeValuePropertyTree.isLeaf())))) {
          this.attributeValue =
              ((other.attributeValue == null) ? null
                  : new AttributeValueType.Builder<CombinerParameterType.Builder<TParentBuilder>>(
                      this, other.attributeValue, true, attributeValuePropertyTree, treeUse));
        }
        final PropertyTree parameterNamePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("parameterName"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (parameterNamePropertyTree != null)
            : ((parameterNamePropertyTree == null) || (!parameterNamePropertyTree.isLeaf())))) {
          this.parameterName = other.parameterName;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends CombinerParameterType> P init(final P product) {
      product.attributeValue = ((this.attributeValue == null) ? null : this.attributeValue.build());
      product.parameterName = this.parameterName;
      return product;
    }

    public CombinerParameterType.Builder<TParentBuilder> withAttributeValue(
        final AttributeValueType attributeValue) {
      this.attributeValue =
          ((attributeValue == null) ? null
              : new AttributeValueType.Builder<CombinerParameterType.Builder<TParentBuilder>>(this,
                  attributeValue, false));
      return this;
    }

    public AttributeValueType.Builder<? extends CombinerParameterType.Builder<TParentBuilder>> withAttributeValue() {
      return this.attributeValue =
          new AttributeValueType.Builder<CombinerParameterType.Builder<TParentBuilder>>(this, null,
              false);
    }

    public CombinerParameterType.Builder<TParentBuilder> withParameterName(
        final String parameterName) {
      this.parameterName = parameterName;
      return this;
    }

    public CombinerParameterType build() {
      if (this._product == null) {
        return this.init(new CombinerParameterType());
      } else {
        return ((CombinerParameterType) this._product);
      }
    }

  }

  public static class Select extends
      CombinerParameterType.Selector<CombinerParameterType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static CombinerParameterType.Select _root() {
      return new CombinerParameterType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AttributeValueType.Selector<TRoot, CombinerParameterType.Selector<TRoot, TParent>> attributeValue =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, CombinerParameterType.Selector<TRoot, TParent>> parameterName =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.attributeValue != null) {
        products.put("attributeValue", this.attributeValue.init());
      }
      if (this.parameterName != null) {
        products.put("parameterName", this.parameterName.init());
      }
      return products;
    }

    public AttributeValueType.Selector<TRoot, CombinerParameterType.Selector<TRoot, TParent>> attributeValue() {
      return ((this.attributeValue == null) ? this.attributeValue =
          new AttributeValueType.Selector<TRoot, CombinerParameterType.Selector<TRoot, TParent>>(
              this._root, this, "attributeValue") : this.attributeValue);
    }

    public com.kscs.util.jaxb.Selector<TRoot, CombinerParameterType.Selector<TRoot, TParent>> parameterName() {
      return ((this.parameterName == null) ? this.parameterName =
          new com.kscs.util.jaxb.Selector<TRoot, CombinerParameterType.Selector<TRoot, TParent>>(
              this._root, this, "parameterName") : this.parameterName);
    }

  }

}
