//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for ObligationsType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ObligationsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Obligation" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ObligationsType", propOrder = {"obligation"})
public class ObligationsType implements Cloneable {

  @XmlElement(name = "Obligation", required = true)
  protected List<ObligationType> obligation;
  protected transient List<ObligationType> obligation_RO = null;

  public static ObligationsType.Builder<Void> builder() {
    return new ObligationsType.Builder<Void>(null, null, false);
  }

  public static ObligationsType.Builder<Void> copyOf(final ObligationsType other) {
    return new ObligationsType.Builder<Void>(null, other, true);
  }

  public static ObligationsType.Builder<Void> copyOf(final ObligationsType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new ObligationsType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static ObligationsType.Builder<Void> copyExcept(final ObligationsType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ObligationsType.Builder<Void> copyOnly(final ObligationsType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(obligation = " + obligation) + ") ");
  }

  @Override
  public ObligationsType clone() throws CloneNotSupportedException {
    final ObligationsType newObject = ((ObligationsType) super.clone());
    if (this.obligation == null) {
      newObject.obligation = null;
    } else {
      newObject.obligation = new ArrayList<ObligationType>();
      for (ObligationType item : this.obligation) {
        newObject.obligation.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.obligation_RO =
        ((obligation == null) ? null : Collections.unmodifiableList(newObject.obligation));
    return newObject;
  }

  public List<ObligationType> getObligation() {
    if (this.obligation == null) {
      this.obligation = new ArrayList<ObligationType>();
    }
    if (this.obligation_RO == null) {
      this.obligation_RO =
          ((obligation == null) ? null : Collections.unmodifiableList(this.obligation));
    }
    return this.obligation_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final ObligationsType _product;
    private List<ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>> obligation;

    public Builder(final TParentBuilder parentBuilder, final ObligationsType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.obligation == null) {
          this.obligation = null;
        } else {
          this.obligation =
              new ArrayList<ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>>();
          for (ObligationType _item : other.obligation) {
            this.obligation.add(((_item == null) ? null
                : new ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>(this, _item,
                    true)));
          }
        }
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ObligationsType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree obligationPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("obligation"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (obligationPropertyTree != null)
            : ((obligationPropertyTree == null) || (!obligationPropertyTree.isLeaf())))) {
          if (other.obligation == null) {
            this.obligation = null;
          } else {
            this.obligation =
                new ArrayList<ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>>();
            for (ObligationType _item : other.obligation) {
              this.obligation.add(((_item == null) ? null
                  : new ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>(this,
                      _item, true, obligationPropertyTree, treeUse)));
            }
          }
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends ObligationsType> P init(final P product) {
      if (this.obligation != null) {
        final List<ObligationType> obligation =
            new ArrayList<ObligationType>(this.obligation.size());
        for (ObligationType.Builder<ObligationsType.Builder<TParentBuilder>> _item : this.obligation) {
          obligation.add(_item.build());
        }
        product.obligation = obligation;
      }
      product.obligation_RO =
          ((obligation == null) ? null : Collections.unmodifiableList(product.obligation));
      return product;
    }

    public ObligationsType.Builder<TParentBuilder> addObligation(
        final List<? extends ObligationType> obligation) {
      if (this.obligation == null) {
        this.obligation =
            new ArrayList<ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>>();
      }
      for (ObligationType _item : obligation) {
        this.obligation.add(new ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>(
            this, _item, false));
      }
      return this;
    }

    public ObligationsType.Builder<TParentBuilder> withObligation(
        final List<? extends ObligationType> obligation) {
      if (this.obligation != null) {
        this.obligation.clear();
      }
      return addObligation(obligation);
    }

    public ObligationsType.Builder<TParentBuilder> addObligation(ObligationType... obligation) {
      addObligation(Arrays.asList(obligation));
      return this;
    }

    public ObligationsType.Builder<TParentBuilder> withObligation(ObligationType... obligation) {
      withObligation(Arrays.asList(obligation));
      return this;
    }

    public ObligationType.Builder<? extends ObligationsType.Builder<TParentBuilder>> addObligation() {
      if (this.obligation == null) {
        this.obligation =
            new ArrayList<ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>>();
      }
      final ObligationType.Builder<ObligationsType.Builder<TParentBuilder>> obligationBuilder =
          new ObligationType.Builder<ObligationsType.Builder<TParentBuilder>>(this, null, false);
      this.obligation.add(obligationBuilder);
      return obligationBuilder;
    }

    public ObligationsType build() {
      if (this._product == null) {
        return this.init(new ObligationsType());
      } else {
        return ((ObligationsType) this._product);
      }
    }

  }

  public static class Select extends ObligationsType.Selector<ObligationsType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ObligationsType.Select _root() {
      return new ObligationsType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private ObligationType.Selector<TRoot, ObligationsType.Selector<TRoot, TParent>> obligation =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.obligation != null) {
        products.put("obligation", this.obligation.init());
      }
      return products;
    }

    public ObligationType.Selector<TRoot, ObligationsType.Selector<TRoot, TParent>> obligation() {
      return ((this.obligation == null) ? this.obligation =
          new ObligationType.Selector<TRoot, ObligationsType.Selector<TRoot, TParent>>(this._root,
              this, "obligation") : this.obligation);
    }

  }

}
