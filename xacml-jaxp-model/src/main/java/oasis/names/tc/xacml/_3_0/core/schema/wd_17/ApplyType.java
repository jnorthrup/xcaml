//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementRef;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for ApplyType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ApplyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}ExpressionType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Expression" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="FunctionId" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ApplyType", propOrder = {"description", "expression"})
public class ApplyType extends ExpressionType implements Cloneable {

  @XmlElement(name = "Description")
  protected String description;
  @XmlElementRef(name = "Expression", namespace = "urn:oasis:names:tc:xacml:3.0:core:schema:wd-17", type = JAXBElement.class, required = false)
  protected List<JAXBElement<?>> expression;
  @XmlAttribute(name = "FunctionId", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String functionId;
  protected transient List<JAXBElement<?>> expression_RO = null;

  /**
   * Gets the value of the description property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getDescription() {
    return description;
  }

  /**
   * Sets the value of the description property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setDescription(String value) {
    this.description = value;
  }

  /**
   * Gets the value of the functionId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFunctionId() {
    return functionId;
  }

  /**
   * Sets the value of the functionId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setFunctionId(String value) {
    this.functionId = value;
  }

  public static ApplyType.Builder<Void> builder() {
    return new ApplyType.Builder<Void>(null, null, false);
  }

  public static ApplyType.Builder<Void> copyOf(final ApplyType other) {
    return new ApplyType.Builder<Void>(null, other, true);
  }

  public static ApplyType.Builder<Void> copyOf(final ApplyType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new ApplyType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static ApplyType.Builder<Void> copyExcept(final ApplyType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ApplyType.Builder<Void> copyOnly(final ApplyType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((((super.toString() + "(description = ") + description) + "), ") + "(expression = ") + expression) + "), ") + "(functionId = ") + functionId) + ") ");
  }

  @Override
  public ApplyType clone() throws CloneNotSupportedException {
    final ApplyType newObject = ((ApplyType) super.clone());
    newObject.expression =
        ((this.expression == null) ? null : new ArrayList<JAXBElement<?>>(this.expression));
    newObject.expression_RO =
        ((expression == null) ? null : Collections.unmodifiableList(newObject.expression));
    return newObject;
  }

  public List<JAXBElement<?>> getExpression() {
    if (this.expression == null) {
      this.expression = new ArrayList<JAXBElement<?>>();
    }
    if (this.expression_RO == null) {
      this.expression_RO =
          ((expression == null) ? null : Collections.unmodifiableList(this.expression));
    }
    return this.expression_RO;
  }

  public static class Builder<TParentBuilder> extends ExpressionType.Builder<TParentBuilder> {

    private String description;
    private List<JAXBElement<?>> expression;
    private String functionId;

    public Builder(final TParentBuilder parentBuilder, final ApplyType other, final boolean copy) {
      super(parentBuilder, other, copy);
      if (copy) {
        this.description = other.description;
        this.expression =
            ((other.expression == null) ? null : new ArrayList<JAXBElement<?>>(other.expression));
        this.functionId = other.functionId;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ApplyType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      super(parentBuilder, other, copy);
      if (copy) {
        final PropertyTree descriptionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("description"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (descriptionPropertyTree != null)
            : ((descriptionPropertyTree == null) || (!descriptionPropertyTree.isLeaf())))) {
          this.description = other.description;
        }
        final PropertyTree expressionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("expression"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (expressionPropertyTree != null)
            : ((expressionPropertyTree == null) || (!expressionPropertyTree.isLeaf())))) {
          this.expression =
              ((other.expression == null) ? null : new ArrayList<JAXBElement<?>>(other.expression));
        }
        final PropertyTree functionIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("functionId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (functionIdPropertyTree != null)
            : ((functionIdPropertyTree == null) || (!functionIdPropertyTree.isLeaf())))) {
          this.functionId = other.functionId;
        }
      }
    }

    protected <P extends ApplyType> P init(final P product) {
      product.description = this.description;
      product.expression = this.expression;
      product.expression_RO =
          ((expression == null) ? null : Collections.unmodifiableList(product.expression));
      product.functionId = this.functionId;
      return super.init(product);
    }

    public ApplyType.Builder<TParentBuilder> withDescription(final String description) {
      this.description = description;
      return this;
    }

    public ApplyType.Builder<TParentBuilder> addExpression(
        final List<? extends JAXBElement<?>> expression) {
      if (this.expression == null) {
        this.expression = new ArrayList<JAXBElement<?>>();
      }
      this.expression.addAll(expression);
      return this;
    }

    public ApplyType.Builder<TParentBuilder> withExpression(
        final List<? extends JAXBElement<?>> expression) {
      if (this.expression != null) {
        this.expression.clear();
      }
      return addExpression(expression);
    }

    public ApplyType.Builder<TParentBuilder> addExpression(JAXBElement<?>... expression) {
      addExpression(Arrays.asList(expression));
      return this;
    }

    public ApplyType.Builder<TParentBuilder> withExpression(JAXBElement<?>... expression) {
      withExpression(Arrays.asList(expression));
      return this;
    }

    public ApplyType.Builder<TParentBuilder> withFunctionId(final String functionId) {
      this.functionId = functionId;
      return this;
    }

    public ApplyType build() {
      if (this._product == null) {
        return this.init(new ApplyType());
      } else {
        return ((ApplyType) this._product);
      }
    }

  }

  public static class Select extends ApplyType.Selector<ApplyType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ApplyType.Select _root() {
      return new ApplyType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends ExpressionType.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>> description =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>> expression =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>> functionId =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.description != null) {
        products.put("description", this.description.init());
      }
      if (this.expression != null) {
        products.put("expression", this.expression.init());
      }
      if (this.functionId != null) {
        products.put("functionId", this.functionId.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>> description() {
      return ((this.description == null) ? this.description =
          new com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>>(this._root,
              this, "description") : this.description);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>> expression() {
      return ((this.expression == null) ? this.expression =
          new com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>>(this._root,
              this, "expression") : this.expression);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>> functionId() {
      return ((this.functionId == null) ? this.functionId =
          new com.kscs.util.jaxb.Selector<TRoot, ApplyType.Selector<TRoot, TParent>>(this._root,
              this, "functionId") : this.functionId);
    }

  }

}
