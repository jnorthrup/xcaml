//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for MatchType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MatchType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AttributeValue"/&gt;
 *         &lt;choice&gt;
 *           &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AttributeDesignator"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AttributeSelector"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="MatchId" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MatchType", propOrder = {
    "attributeValue", "attributeDesignator", "attributeSelector"})
public class MatchType implements Cloneable {

  @XmlElement(name = "AttributeValue", required = true)
  protected AttributeValueType attributeValue;
  @XmlElement(name = "AttributeDesignator")
  protected AttributeDesignatorType attributeDesignator;
  @XmlElement(name = "AttributeSelector")
  protected AttributeSelectorType attributeSelector;
  @XmlAttribute(name = "MatchId", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String matchId;

  /**
   * Gets the value of the attributeValue property.
   * 
   * @return possible object is {@link AttributeValueType }
   * 
   */
  public AttributeValueType getAttributeValue() {
    return attributeValue;
  }

  /**
   * Sets the value of the attributeValue property.
   * 
   * @param value allowed object is {@link AttributeValueType }
   * 
   */
  protected void setAttributeValue(AttributeValueType value) {
    this.attributeValue = value;
  }

  /**
   * Gets the value of the attributeDesignator property.
   * 
   * @return possible object is {@link AttributeDesignatorType }
   * 
   */
  public AttributeDesignatorType getAttributeDesignator() {
    return attributeDesignator;
  }

  /**
   * Sets the value of the attributeDesignator property.
   * 
   * @param value allowed object is {@link AttributeDesignatorType }
   * 
   */
  protected void setAttributeDesignator(AttributeDesignatorType value) {
    this.attributeDesignator = value;
  }

  /**
   * Gets the value of the attributeSelector property.
   * 
   * @return possible object is {@link AttributeSelectorType }
   * 
   */
  public AttributeSelectorType getAttributeSelector() {
    return attributeSelector;
  }

  /**
   * Sets the value of the attributeSelector property.
   * 
   * @param value allowed object is {@link AttributeSelectorType }
   * 
   */
  protected void setAttributeSelector(AttributeSelectorType value) {
    this.attributeSelector = value;
  }

  /**
   * Gets the value of the matchId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getMatchId() {
    return matchId;
  }

  /**
   * Sets the value of the matchId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setMatchId(String value) {
    this.matchId = value;
  }

  public static MatchType.Builder<Void> builder() {
    return new MatchType.Builder<Void>(null, null, false);
  }

  public static MatchType.Builder<Void> copyOf(final MatchType other) {
    return new MatchType.Builder<Void>(null, other, true);
  }

  public static MatchType.Builder<Void> copyOf(final MatchType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new MatchType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static MatchType.Builder<Void> copyExcept(final MatchType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static MatchType.Builder<Void> copyOnly(final MatchType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((((((((("(attributeValue = " + attributeValue) + "), ") + "(attributeDesignator = ") + attributeDesignator) + "), ") + "(attributeSelector = ") + attributeSelector) + "), ") + "(matchId = ") + matchId) + ") ");
  }

  @Override
  public MatchType clone() throws CloneNotSupportedException {
    final MatchType newObject = ((MatchType) super.clone());
    newObject.attributeValue = ((this.attributeValue == null) ? null : this.attributeValue.clone());
    newObject.attributeDesignator =
        ((this.attributeDesignator == null) ? null : this.attributeDesignator.clone());
    newObject.attributeSelector =
        ((this.attributeSelector == null) ? null : this.attributeSelector.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final MatchType _product;
    private AttributeValueType.Builder<MatchType.Builder<TParentBuilder>> attributeValue;
    private AttributeDesignatorType.Builder<MatchType.Builder<TParentBuilder>> attributeDesignator;
    private AttributeSelectorType.Builder<MatchType.Builder<TParentBuilder>> attributeSelector;
    private String matchId;

    public Builder(final TParentBuilder parentBuilder, final MatchType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.attributeValue =
            ((other.attributeValue == null) ? null
                : new AttributeValueType.Builder<MatchType.Builder<TParentBuilder>>(this,
                    other.attributeValue, true));
        this.attributeDesignator =
            ((other.attributeDesignator == null) ? null
                : new AttributeDesignatorType.Builder<MatchType.Builder<TParentBuilder>>(this,
                    other.attributeDesignator, true));
        this.attributeSelector =
            ((other.attributeSelector == null) ? null
                : new AttributeSelectorType.Builder<MatchType.Builder<TParentBuilder>>(this,
                    other.attributeSelector, true));
        this.matchId = other.matchId;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final MatchType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree attributeValuePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeValue"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributeValuePropertyTree != null)
            : ((attributeValuePropertyTree == null) || (!attributeValuePropertyTree.isLeaf())))) {
          this.attributeValue =
              ((other.attributeValue == null) ? null
                  : new AttributeValueType.Builder<MatchType.Builder<TParentBuilder>>(this,
                      other.attributeValue, true, attributeValuePropertyTree, treeUse));
        }
        final PropertyTree attributeDesignatorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeDesignator"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributeDesignatorPropertyTree != null)
            : ((attributeDesignatorPropertyTree == null) || (!attributeDesignatorPropertyTree
                .isLeaf())))) {
          this.attributeDesignator =
              ((other.attributeDesignator == null) ? null
                  : new AttributeDesignatorType.Builder<MatchType.Builder<TParentBuilder>>(this,
                      other.attributeDesignator, true, attributeDesignatorPropertyTree, treeUse));
        }
        final PropertyTree attributeSelectorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeSelector"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (attributeSelectorPropertyTree != null)
            : ((attributeSelectorPropertyTree == null) || (!attributeSelectorPropertyTree.isLeaf())))) {
          this.attributeSelector =
              ((other.attributeSelector == null) ? null
                  : new AttributeSelectorType.Builder<MatchType.Builder<TParentBuilder>>(this,
                      other.attributeSelector, true, attributeSelectorPropertyTree, treeUse));
        }
        final PropertyTree matchIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("matchId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (matchIdPropertyTree != null)
            : ((matchIdPropertyTree == null) || (!matchIdPropertyTree.isLeaf())))) {
          this.matchId = other.matchId;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends MatchType> P init(final P product) {
      product.attributeValue = ((this.attributeValue == null) ? null : this.attributeValue.build());
      product.attributeDesignator =
          ((this.attributeDesignator == null) ? null : this.attributeDesignator.build());
      product.attributeSelector =
          ((this.attributeSelector == null) ? null : this.attributeSelector.build());
      product.matchId = this.matchId;
      return product;
    }

    public MatchType.Builder<TParentBuilder> withAttributeValue(
        final AttributeValueType attributeValue) {
      this.attributeValue =
          ((attributeValue == null) ? null
              : new AttributeValueType.Builder<MatchType.Builder<TParentBuilder>>(this,
                  attributeValue, false));
      return this;
    }

    public AttributeValueType.Builder<? extends MatchType.Builder<TParentBuilder>> withAttributeValue() {
      return this.attributeValue =
          new AttributeValueType.Builder<MatchType.Builder<TParentBuilder>>(this, null, false);
    }

    public MatchType.Builder<TParentBuilder> withAttributeDesignator(
        final AttributeDesignatorType attributeDesignator) {
      this.attributeDesignator =
          ((attributeDesignator == null) ? null
              : new AttributeDesignatorType.Builder<MatchType.Builder<TParentBuilder>>(this,
                  attributeDesignator, false));
      return this;
    }

    public AttributeDesignatorType.Builder<? extends MatchType.Builder<TParentBuilder>> withAttributeDesignator() {
      return this.attributeDesignator =
          new AttributeDesignatorType.Builder<MatchType.Builder<TParentBuilder>>(this, null, false);
    }

    public MatchType.Builder<TParentBuilder> withAttributeSelector(
        final AttributeSelectorType attributeSelector) {
      this.attributeSelector =
          ((attributeSelector == null) ? null
              : new AttributeSelectorType.Builder<MatchType.Builder<TParentBuilder>>(this,
                  attributeSelector, false));
      return this;
    }

    public AttributeSelectorType.Builder<? extends MatchType.Builder<TParentBuilder>> withAttributeSelector() {
      return this.attributeSelector =
          new AttributeSelectorType.Builder<MatchType.Builder<TParentBuilder>>(this, null, false);
    }

    public MatchType.Builder<TParentBuilder> withMatchId(final String matchId) {
      this.matchId = matchId;
      return this;
    }

    public MatchType build() {
      if (this._product == null) {
        return this.init(new MatchType());
      } else {
        return ((MatchType) this._product);
      }
    }

  }

  public static class Select extends MatchType.Selector<MatchType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static MatchType.Select _root() {
      return new MatchType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AttributeValueType.Selector<TRoot, MatchType.Selector<TRoot, TParent>> attributeValue =
        null;
    private AttributeDesignatorType.Selector<TRoot, MatchType.Selector<TRoot, TParent>> attributeDesignator =
        null;
    private AttributeSelectorType.Selector<TRoot, MatchType.Selector<TRoot, TParent>> attributeSelector =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, MatchType.Selector<TRoot, TParent>> matchId = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.attributeValue != null) {
        products.put("attributeValue", this.attributeValue.init());
      }
      if (this.attributeDesignator != null) {
        products.put("attributeDesignator", this.attributeDesignator.init());
      }
      if (this.attributeSelector != null) {
        products.put("attributeSelector", this.attributeSelector.init());
      }
      if (this.matchId != null) {
        products.put("matchId", this.matchId.init());
      }
      return products;
    }

    public AttributeValueType.Selector<TRoot, MatchType.Selector<TRoot, TParent>> attributeValue() {
      return ((this.attributeValue == null) ? this.attributeValue =
          new AttributeValueType.Selector<TRoot, MatchType.Selector<TRoot, TParent>>(this._root,
              this, "attributeValue") : this.attributeValue);
    }

    public AttributeDesignatorType.Selector<TRoot, MatchType.Selector<TRoot, TParent>> attributeDesignator() {
      return ((this.attributeDesignator == null) ? this.attributeDesignator =
          new AttributeDesignatorType.Selector<TRoot, MatchType.Selector<TRoot, TParent>>(
              this._root, this, "attributeDesignator") : this.attributeDesignator);
    }

    public AttributeSelectorType.Selector<TRoot, MatchType.Selector<TRoot, TParent>> attributeSelector() {
      return ((this.attributeSelector == null) ? this.attributeSelector =
          new AttributeSelectorType.Selector<TRoot, MatchType.Selector<TRoot, TParent>>(this._root,
              this, "attributeSelector") : this.attributeSelector);
    }

    public com.kscs.util.jaxb.Selector<TRoot, MatchType.Selector<TRoot, TParent>> matchId() {
      return ((this.matchId == null) ? this.matchId =
          new com.kscs.util.jaxb.Selector<TRoot, MatchType.Selector<TRoot, TParent>>(this._root,
              this, "matchId") : this.matchId);
    }

  }

}
