//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for AnyOfType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AnyOfType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence maxOccurs="unbounded"&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AllOf"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AnyOfType", propOrder = {"allOf"})
public class AnyOfType implements Cloneable {

  @XmlElement(name = "AllOf", required = true)
  protected List<AllOfType> allOf;
  protected transient List<AllOfType> allOf_RO = null;

  public static AnyOfType.Builder<Void> builder() {
    return new AnyOfType.Builder<Void>(null, null, false);
  }

  public static AnyOfType.Builder<Void> copyOf(final AnyOfType other) {
    return new AnyOfType.Builder<Void>(null, other, true);
  }

  public static AnyOfType.Builder<Void> copyOf(final AnyOfType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new AnyOfType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static AnyOfType.Builder<Void> copyExcept(final AnyOfType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static AnyOfType.Builder<Void> copyOnly(final AnyOfType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(allOf = " + allOf) + ") ");
  }

  @Override
  public AnyOfType clone() throws CloneNotSupportedException {
    final AnyOfType newObject = ((AnyOfType) super.clone());
    if (this.allOf == null) {
      newObject.allOf = null;
    } else {
      newObject.allOf = new ArrayList<AllOfType>();
      for (AllOfType item : this.allOf) {
        newObject.allOf.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.allOf_RO = ((allOf == null) ? null : Collections.unmodifiableList(newObject.allOf));
    return newObject;
  }

  public List<AllOfType> getAllOf() {
    if (this.allOf == null) {
      this.allOf = new ArrayList<AllOfType>();
    }
    if (this.allOf_RO == null) {
      this.allOf_RO = ((allOf == null) ? null : Collections.unmodifiableList(this.allOf));
    }
    return this.allOf_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final AnyOfType _product;
    private List<AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>> allOf;

    public Builder(final TParentBuilder parentBuilder, final AnyOfType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.allOf == null) {
          this.allOf = null;
        } else {
          this.allOf = new ArrayList<AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>>();
          for (AllOfType _item : other.allOf) {
            this.allOf.add(((_item == null) ? null
                : new AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>(this, _item, true)));
          }
        }
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final AnyOfType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree allOfPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("allOf"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (allOfPropertyTree != null)
            : ((allOfPropertyTree == null) || (!allOfPropertyTree.isLeaf())))) {
          if (other.allOf == null) {
            this.allOf = null;
          } else {
            this.allOf = new ArrayList<AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>>();
            for (AllOfType _item : other.allOf) {
              this.allOf.add(((_item == null) ? null
                  : new AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>(this, _item, true,
                      allOfPropertyTree, treeUse)));
            }
          }
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends AnyOfType> P init(final P product) {
      if (this.allOf != null) {
        final List<AllOfType> allOf = new ArrayList<AllOfType>(this.allOf.size());
        for (AllOfType.Builder<AnyOfType.Builder<TParentBuilder>> _item : this.allOf) {
          allOf.add(_item.build());
        }
        product.allOf = allOf;
      }
      product.allOf_RO = ((allOf == null) ? null : Collections.unmodifiableList(product.allOf));
      return product;
    }

    public AnyOfType.Builder<TParentBuilder> addAllOf(final List<? extends AllOfType> allOf) {
      if (this.allOf == null) {
        this.allOf = new ArrayList<AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>>();
      }
      for (AllOfType _item : allOf) {
        this.allOf
            .add(new AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>(this, _item, false));
      }
      return this;
    }

    public AnyOfType.Builder<TParentBuilder> withAllOf(final List<? extends AllOfType> allOf) {
      if (this.allOf != null) {
        this.allOf.clear();
      }
      return addAllOf(allOf);
    }

    public AnyOfType.Builder<TParentBuilder> addAllOf(AllOfType... allOf) {
      addAllOf(Arrays.asList(allOf));
      return this;
    }

    public AnyOfType.Builder<TParentBuilder> withAllOf(AllOfType... allOf) {
      withAllOf(Arrays.asList(allOf));
      return this;
    }

    public AllOfType.Builder<? extends AnyOfType.Builder<TParentBuilder>> addAllOf() {
      if (this.allOf == null) {
        this.allOf = new ArrayList<AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>>();
      }
      final AllOfType.Builder<AnyOfType.Builder<TParentBuilder>> allOfBuilder =
          new AllOfType.Builder<AnyOfType.Builder<TParentBuilder>>(this, null, false);
      this.allOf.add(allOfBuilder);
      return allOfBuilder;
    }

    public AnyOfType build() {
      if (this._product == null) {
        return this.init(new AnyOfType());
      } else {
        return ((AnyOfType) this._product);
      }
    }

  }

  public static class Select extends AnyOfType.Selector<AnyOfType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static AnyOfType.Select _root() {
      return new AnyOfType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AllOfType.Selector<TRoot, AnyOfType.Selector<TRoot, TParent>> allOf = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.allOf != null) {
        products.put("allOf", this.allOf.init());
      }
      return products;
    }

    public AllOfType.Selector<TRoot, AnyOfType.Selector<TRoot, TParent>> allOf() {
      return ((this.allOf == null) ? this.allOf =
          new AllOfType.Selector<TRoot, AnyOfType.Selector<TRoot, TParent>>(this._root, this,
              "allOf") : this.allOf);
    }

  }

}
