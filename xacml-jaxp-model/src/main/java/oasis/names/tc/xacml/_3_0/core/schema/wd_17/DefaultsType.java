//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for DefaultsType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="DefaultsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;choice&gt;
 *           &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}XPathVersion"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "DefaultsType", propOrder = {"xPathVersion"})
public class DefaultsType implements Cloneable {

  @XmlElement(name = "XPathVersion")
  @XmlSchemaType(name = "anyURI")
  protected String xPathVersion;

  /**
   * Gets the value of the xPathVersion property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getXPathVersion() {
    return xPathVersion;
  }

  /**
   * Sets the value of the xPathVersion property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setXPathVersion(String value) {
    this.xPathVersion = value;
  }

  public static DefaultsType.Builder<Void> builder() {
    return new DefaultsType.Builder<Void>(null, null, false);
  }

  public static DefaultsType.Builder<Void> copyOf(final DefaultsType other) {
    return new DefaultsType.Builder<Void>(null, other, true);
  }

  public static DefaultsType.Builder<Void> copyOf(final DefaultsType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new DefaultsType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static DefaultsType.Builder<Void> copyExcept(final DefaultsType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static DefaultsType.Builder<Void> copyOnly(final DefaultsType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(xPathVersion = " + xPathVersion) + ") ");
  }

  @Override
  public DefaultsType clone() throws CloneNotSupportedException {
    final DefaultsType newObject = ((DefaultsType) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final DefaultsType _product;
    private String xPathVersion;

    public Builder(final TParentBuilder parentBuilder, final DefaultsType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.xPathVersion = other.xPathVersion;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final DefaultsType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree xPathVersionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("xPathVersion"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (xPathVersionPropertyTree != null)
            : ((xPathVersionPropertyTree == null) || (!xPathVersionPropertyTree.isLeaf())))) {
          this.xPathVersion = other.xPathVersion;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends DefaultsType> P init(final P product) {
      product.xPathVersion = this.xPathVersion;
      return product;
    }

    public DefaultsType.Builder<TParentBuilder> withXPathVersion(final String xPathVersion) {
      this.xPathVersion = xPathVersion;
      return this;
    }

    public DefaultsType build() {
      if (this._product == null) {
        return this.init(new DefaultsType());
      } else {
        return ((DefaultsType) this._product);
      }
    }

  }

  public static class Select extends DefaultsType.Selector<DefaultsType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static DefaultsType.Select _root() {
      return new DefaultsType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, DefaultsType.Selector<TRoot, TParent>> xPathVersion =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.xPathVersion != null) {
        products.put("xPathVersion", this.xPathVersion.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, DefaultsType.Selector<TRoot, TParent>> xPathVersion() {
      return ((this.xPathVersion == null) ? this.xPathVersion =
          new com.kscs.util.jaxb.Selector<TRoot, DefaultsType.Selector<TRoot, TParent>>(this._root,
              this, "xPathVersion") : this.xPathVersion);
    }

  }

}
