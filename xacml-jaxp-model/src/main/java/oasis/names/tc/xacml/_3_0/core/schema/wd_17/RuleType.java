//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for RuleType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RuleType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Target" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Condition" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}ObligationExpressions" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AdviceExpressions" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="RuleId" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="Effect" use="required" type="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}EffectType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RuleType", propOrder = {
    "description", "target", "condition", "obligationExpressions", "adviceExpressions"})
public class RuleType implements Cloneable {

  @XmlElement(name = "Description")
  protected String description;
  @XmlElement(name = "Target")
  protected TargetType target;
  @XmlElement(name = "Condition")
  protected ConditionType condition;
  @XmlElement(name = "ObligationExpressions")
  protected ObligationExpressionsType obligationExpressions;
  @XmlElement(name = "AdviceExpressions")
  protected AdviceExpressionsType adviceExpressions;
  @XmlAttribute(name = "RuleId", required = true)
  protected String ruleId;
  @XmlAttribute(name = "Effect", required = true)
  protected EffectType effect;

  /**
   * Gets the value of the description property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getDescription() {
    return description;
  }

  /**
   * Sets the value of the description property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setDescription(String value) {
    this.description = value;
  }

  /**
   * Gets the value of the target property.
   * 
   * @return possible object is {@link TargetType }
   * 
   */
  public TargetType getTarget() {
    return target;
  }

  /**
   * Sets the value of the target property.
   * 
   * @param value allowed object is {@link TargetType }
   * 
   */
  protected void setTarget(TargetType value) {
    this.target = value;
  }

  /**
   * Gets the value of the condition property.
   * 
   * @return possible object is {@link ConditionType }
   * 
   */
  public ConditionType getCondition() {
    return condition;
  }

  /**
   * Sets the value of the condition property.
   * 
   * @param value allowed object is {@link ConditionType }
   * 
   */
  protected void setCondition(ConditionType value) {
    this.condition = value;
  }

  /**
   * Gets the value of the obligationExpressions property.
   * 
   * @return possible object is {@link ObligationExpressionsType }
   * 
   */
  public ObligationExpressionsType getObligationExpressions() {
    return obligationExpressions;
  }

  /**
   * Sets the value of the obligationExpressions property.
   * 
   * @param value allowed object is {@link ObligationExpressionsType }
   * 
   */
  protected void setObligationExpressions(ObligationExpressionsType value) {
    this.obligationExpressions = value;
  }

  /**
   * Gets the value of the adviceExpressions property.
   * 
   * @return possible object is {@link AdviceExpressionsType }
   * 
   */
  public AdviceExpressionsType getAdviceExpressions() {
    return adviceExpressions;
  }

  /**
   * Sets the value of the adviceExpressions property.
   * 
   * @param value allowed object is {@link AdviceExpressionsType }
   * 
   */
  protected void setAdviceExpressions(AdviceExpressionsType value) {
    this.adviceExpressions = value;
  }

  /**
   * Gets the value of the ruleId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getRuleId() {
    return ruleId;
  }

  /**
   * Sets the value of the ruleId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setRuleId(String value) {
    this.ruleId = value;
  }

  /**
   * Gets the value of the effect property.
   * 
   * @return possible object is {@link EffectType }
   * 
   */
  public EffectType getEffect() {
    return effect;
  }

  /**
   * Sets the value of the effect property.
   * 
   * @param value allowed object is {@link EffectType }
   * 
   */
  protected void setEffect(EffectType value) {
    this.effect = value;
  }

  public static RuleType.Builder<Void> builder() {
    return new RuleType.Builder<Void>(null, null, false);
  }

  public static RuleType.Builder<Void> copyOf(final RuleType other) {
    return new RuleType.Builder<Void>(null, other, true);
  }

  public static RuleType.Builder<Void> copyOf(final RuleType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new RuleType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static RuleType.Builder<Void> copyExcept(final RuleType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static RuleType.Builder<Void> copyOnly(final RuleType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((((((((((((((("(description = " + description) + "), ") + "(target = ") + target) + "), ") + "(condition = ") + condition) + "), ") + "(obligationExpressions = ") + obligationExpressions) + "), ") + "(adviceExpressions = ") + adviceExpressions) + "), ") + "(ruleId = ") + ruleId) + "), ") + "(effect = ") + effect) + ") ");
  }

  @Override
  public RuleType clone() throws CloneNotSupportedException {
    final RuleType newObject = ((RuleType) super.clone());
    newObject.target = ((this.target == null) ? null : this.target.clone());
    newObject.condition = ((this.condition == null) ? null : this.condition.clone());
    newObject.obligationExpressions =
        ((this.obligationExpressions == null) ? null : this.obligationExpressions.clone());
    newObject.adviceExpressions =
        ((this.adviceExpressions == null) ? null : this.adviceExpressions.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final RuleType _product;
    private String description;
    private TargetType.Builder<RuleType.Builder<TParentBuilder>> target;
    private ConditionType.Builder<RuleType.Builder<TParentBuilder>> condition;
    private ObligationExpressionsType.Builder<RuleType.Builder<TParentBuilder>> obligationExpressions;
    private AdviceExpressionsType.Builder<RuleType.Builder<TParentBuilder>> adviceExpressions;
    private String ruleId;
    private EffectType effect;

    public Builder(final TParentBuilder parentBuilder, final RuleType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.description = other.description;
        this.target =
            ((other.target == null)
                ? null
                : new TargetType.Builder<RuleType.Builder<TParentBuilder>>(this, other.target, true));
        this.condition =
            ((other.condition == null) ? null
                : new ConditionType.Builder<RuleType.Builder<TParentBuilder>>(this,
                    other.condition, true));
        this.obligationExpressions =
            ((other.obligationExpressions == null) ? null
                : new ObligationExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this,
                    other.obligationExpressions, true));
        this.adviceExpressions =
            ((other.adviceExpressions == null) ? null
                : new AdviceExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this,
                    other.adviceExpressions, true));
        this.ruleId = other.ruleId;
        this.effect = other.effect;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final RuleType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree descriptionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("description"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (descriptionPropertyTree != null)
            : ((descriptionPropertyTree == null) || (!descriptionPropertyTree.isLeaf())))) {
          this.description = other.description;
        }
        final PropertyTree targetPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("target"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (targetPropertyTree != null)
            : ((targetPropertyTree == null) || (!targetPropertyTree.isLeaf())))) {
          this.target =
              ((other.target == null) ? null
                  : new TargetType.Builder<RuleType.Builder<TParentBuilder>>(this, other.target,
                      true, targetPropertyTree, treeUse));
        }
        final PropertyTree conditionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("condition"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (conditionPropertyTree != null)
            : ((conditionPropertyTree == null) || (!conditionPropertyTree.isLeaf())))) {
          this.condition =
              ((other.condition == null) ? null
                  : new ConditionType.Builder<RuleType.Builder<TParentBuilder>>(this,
                      other.condition, true, conditionPropertyTree, treeUse));
        }
        final PropertyTree obligationExpressionsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("obligationExpressions"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (obligationExpressionsPropertyTree != null)
            : ((obligationExpressionsPropertyTree == null) || (!obligationExpressionsPropertyTree
                .isLeaf())))) {
          this.obligationExpressions =
              ((other.obligationExpressions == null)
                  ? null
                  : new ObligationExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this,
                      other.obligationExpressions, true, obligationExpressionsPropertyTree, treeUse));
        }
        final PropertyTree adviceExpressionsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("adviceExpressions"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (adviceExpressionsPropertyTree != null)
            : ((adviceExpressionsPropertyTree == null) || (!adviceExpressionsPropertyTree.isLeaf())))) {
          this.adviceExpressions =
              ((other.adviceExpressions == null) ? null
                  : new AdviceExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this,
                      other.adviceExpressions, true, adviceExpressionsPropertyTree, treeUse));
        }
        final PropertyTree ruleIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("ruleId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (ruleIdPropertyTree != null)
            : ((ruleIdPropertyTree == null) || (!ruleIdPropertyTree.isLeaf())))) {
          this.ruleId = other.ruleId;
        }
        final PropertyTree effectPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("effect"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (effectPropertyTree != null)
            : ((effectPropertyTree == null) || (!effectPropertyTree.isLeaf())))) {
          this.effect = other.effect;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends RuleType> P init(final P product) {
      product.description = this.description;
      product.target = ((this.target == null) ? null : this.target.build());
      product.condition = ((this.condition == null) ? null : this.condition.build());
      product.obligationExpressions =
          ((this.obligationExpressions == null) ? null : this.obligationExpressions.build());
      product.adviceExpressions =
          ((this.adviceExpressions == null) ? null : this.adviceExpressions.build());
      product.ruleId = this.ruleId;
      product.effect = this.effect;
      return product;
    }

    public RuleType.Builder<TParentBuilder> withDescription(final String description) {
      this.description = description;
      return this;
    }

    public RuleType.Builder<TParentBuilder> withTarget(final TargetType target) {
      this.target =
          ((target == null) ? null : new TargetType.Builder<RuleType.Builder<TParentBuilder>>(this,
              target, false));
      return this;
    }

    public TargetType.Builder<? extends RuleType.Builder<TParentBuilder>> withTarget() {
      return this.target =
          new TargetType.Builder<RuleType.Builder<TParentBuilder>>(this, null, false);
    }

    public RuleType.Builder<TParentBuilder> withCondition(final ConditionType condition) {
      this.condition =
          ((condition == null) ? null
              : new ConditionType.Builder<RuleType.Builder<TParentBuilder>>(this, condition, false));
      return this;
    }

    public ConditionType.Builder<? extends RuleType.Builder<TParentBuilder>> withCondition() {
      return this.condition =
          new ConditionType.Builder<RuleType.Builder<TParentBuilder>>(this, null, false);
    }

    public RuleType.Builder<TParentBuilder> withObligationExpressions(
        final ObligationExpressionsType obligationExpressions) {
      this.obligationExpressions =
          ((obligationExpressions == null) ? null
              : new ObligationExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this,
                  obligationExpressions, false));
      return this;
    }

    public ObligationExpressionsType.Builder<? extends RuleType.Builder<TParentBuilder>> withObligationExpressions() {
      return this.obligationExpressions =
          new ObligationExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this, null, false);
    }

    public RuleType.Builder<TParentBuilder> withAdviceExpressions(
        final AdviceExpressionsType adviceExpressions) {
      this.adviceExpressions =
          ((adviceExpressions == null) ? null
              : new AdviceExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this,
                  adviceExpressions, false));
      return this;
    }

    public AdviceExpressionsType.Builder<? extends RuleType.Builder<TParentBuilder>> withAdviceExpressions() {
      return this.adviceExpressions =
          new AdviceExpressionsType.Builder<RuleType.Builder<TParentBuilder>>(this, null, false);
    }

    public RuleType.Builder<TParentBuilder> withRuleId(final String ruleId) {
      this.ruleId = ruleId;
      return this;
    }

    public RuleType.Builder<TParentBuilder> withEffect(final EffectType effect) {
      this.effect = effect;
      return this;
    }

    public RuleType build() {
      if (this._product == null) {
        return this.init(new RuleType());
      } else {
        return ((RuleType) this._product);
      }
    }

  }

  public static class Select extends RuleType.Selector<RuleType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static RuleType.Select _root() {
      return new RuleType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>> description =
        null;
    private TargetType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> target = null;
    private ConditionType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> condition = null;
    private ObligationExpressionsType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> obligationExpressions =
        null;
    private AdviceExpressionsType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> adviceExpressions =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>> ruleId = null;
    private com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>> effect = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.description != null) {
        products.put("description", this.description.init());
      }
      if (this.target != null) {
        products.put("target", this.target.init());
      }
      if (this.condition != null) {
        products.put("condition", this.condition.init());
      }
      if (this.obligationExpressions != null) {
        products.put("obligationExpressions", this.obligationExpressions.init());
      }
      if (this.adviceExpressions != null) {
        products.put("adviceExpressions", this.adviceExpressions.init());
      }
      if (this.ruleId != null) {
        products.put("ruleId", this.ruleId.init());
      }
      if (this.effect != null) {
        products.put("effect", this.effect.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>> description() {
      return ((this.description == null) ? this.description =
          new com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>>(this._root,
              this, "description") : this.description);
    }

    public TargetType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> target() {
      return ((this.target == null) ? this.target =
          new TargetType.Selector<TRoot, RuleType.Selector<TRoot, TParent>>(this._root, this,
              "target") : this.target);
    }

    public ConditionType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> condition() {
      return ((this.condition == null) ? this.condition =
          new ConditionType.Selector<TRoot, RuleType.Selector<TRoot, TParent>>(this._root, this,
              "condition") : this.condition);
    }

    public ObligationExpressionsType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> obligationExpressions() {
      return ((this.obligationExpressions == null) ? this.obligationExpressions =
          new ObligationExpressionsType.Selector<TRoot, RuleType.Selector<TRoot, TParent>>(
              this._root, this, "obligationExpressions") : this.obligationExpressions);
    }

    public AdviceExpressionsType.Selector<TRoot, RuleType.Selector<TRoot, TParent>> adviceExpressions() {
      return ((this.adviceExpressions == null) ? this.adviceExpressions =
          new AdviceExpressionsType.Selector<TRoot, RuleType.Selector<TRoot, TParent>>(this._root,
              this, "adviceExpressions") : this.adviceExpressions);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>> ruleId() {
      return ((this.ruleId == null) ? this.ruleId =
          new com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>>(this._root,
              this, "ruleId") : this.ruleId);
    }

    public com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>> effect() {
      return ((this.effect == null) ? this.effect =
          new com.kscs.util.jaxb.Selector<TRoot, RuleType.Selector<TRoot, TParent>>(this._root,
              this, "effect") : this.effect);
    }

  }

}
