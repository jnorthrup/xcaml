//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for RequestType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="RequestType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}RequestDefaults" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Attributes" maxOccurs="unbounded"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}MultiRequests" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="ReturnPolicyIdList" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="CombinedDecision" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "RequestType", propOrder = {"requestDefaults", "attributes", "multiRequests"})
public class RequestType implements Cloneable {

  @XmlElement(name = "RequestDefaults")
  protected RequestDefaultsType requestDefaults;
  @XmlElement(name = "Attributes", required = true)
  protected List<AttributesType> attributes;
  @XmlElement(name = "MultiRequests")
  protected MultiRequestsType multiRequests;
  @XmlAttribute(name = "ReturnPolicyIdList", required = true)
  protected boolean returnPolicyIdList;
  @XmlAttribute(name = "CombinedDecision", required = true)
  protected boolean combinedDecision;
  protected transient List<AttributesType> attributes_RO = null;

  /**
   * Gets the value of the requestDefaults property.
   * 
   * @return possible object is {@link RequestDefaultsType }
   * 
   */
  public RequestDefaultsType getRequestDefaults() {
    return requestDefaults;
  }

  /**
   * Sets the value of the requestDefaults property.
   * 
   * @param value allowed object is {@link RequestDefaultsType }
   * 
   */
  protected void setRequestDefaults(RequestDefaultsType value) {
    this.requestDefaults = value;
  }

  /**
   * Gets the value of the multiRequests property.
   * 
   * @return possible object is {@link MultiRequestsType }
   * 
   */
  public MultiRequestsType getMultiRequests() {
    return multiRequests;
  }

  /**
   * Sets the value of the multiRequests property.
   * 
   * @param value allowed object is {@link MultiRequestsType }
   * 
   */
  protected void setMultiRequests(MultiRequestsType value) {
    this.multiRequests = value;
  }

  /**
   * Gets the value of the returnPolicyIdList property.
   * 
   */
  public boolean isReturnPolicyIdList() {
    return returnPolicyIdList;
  }

  /**
   * Sets the value of the returnPolicyIdList property.
   * 
   */
  protected void setReturnPolicyIdList(boolean value) {
    this.returnPolicyIdList = value;
  }

  /**
   * Gets the value of the combinedDecision property.
   * 
   */
  public boolean isCombinedDecision() {
    return combinedDecision;
  }

  /**
   * Sets the value of the combinedDecision property.
   * 
   */
  protected void setCombinedDecision(boolean value) {
    this.combinedDecision = value;
  }

  public static RequestType.Builder<Void> builder() {
    return new RequestType.Builder<Void>(null, null, false);
  }

  public static RequestType.Builder<Void> copyOf(final RequestType other) {
    return new RequestType.Builder<Void>(null, other, true);
  }

  public static RequestType.Builder<Void> copyOf(final RequestType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new RequestType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static RequestType.Builder<Void> copyExcept(final RequestType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static RequestType.Builder<Void> copyOnly(final RequestType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((((((((("(requestDefaults = " + requestDefaults) + "), ") + "(attributes = ") + attributes) + "), ") + "(multiRequests = ") + multiRequests) + "), ") + "(returnPolicyIdList = ") + returnPolicyIdList) + "), ") + "(combinedDecision = ") + combinedDecision) + ") ");
  }

  @Override
  public RequestType clone() throws CloneNotSupportedException {
    final RequestType newObject = ((RequestType) super.clone());
    newObject.requestDefaults =
        ((this.requestDefaults == null) ? null : this.requestDefaults.clone());
    if (this.attributes == null) {
      newObject.attributes = null;
    } else {
      newObject.attributes = new ArrayList<AttributesType>();
      for (AttributesType item : this.attributes) {
        newObject.attributes.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.attributes_RO =
        ((attributes == null) ? null : Collections.unmodifiableList(newObject.attributes));
    newObject.multiRequests = ((this.multiRequests == null) ? null : this.multiRequests.clone());
    return newObject;
  }

  public List<AttributesType> getAttributes() {
    if (this.attributes == null) {
      this.attributes = new ArrayList<AttributesType>();
    }
    if (this.attributes_RO == null) {
      this.attributes_RO =
          ((attributes == null) ? null : Collections.unmodifiableList(this.attributes));
    }
    return this.attributes_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final RequestType _product;
    private RequestDefaultsType.Builder<RequestType.Builder<TParentBuilder>> requestDefaults;
    private List<AttributesType.Builder<RequestType.Builder<TParentBuilder>>> attributes;
    private MultiRequestsType.Builder<RequestType.Builder<TParentBuilder>> multiRequests;
    private boolean returnPolicyIdList;
    private boolean combinedDecision;

    public Builder(final TParentBuilder parentBuilder, final RequestType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.requestDefaults =
            ((other.requestDefaults == null) ? null
                : new RequestDefaultsType.Builder<RequestType.Builder<TParentBuilder>>(this,
                    other.requestDefaults, true));
        if (other.attributes == null) {
          this.attributes = null;
        } else {
          this.attributes =
              new ArrayList<AttributesType.Builder<RequestType.Builder<TParentBuilder>>>();
          for (AttributesType _item : other.attributes) {
            this.attributes
                .add(((_item == null) ? null
                    : new AttributesType.Builder<RequestType.Builder<TParentBuilder>>(this, _item,
                        true)));
          }
        }
        this.multiRequests =
            ((other.multiRequests == null) ? null
                : new MultiRequestsType.Builder<RequestType.Builder<TParentBuilder>>(this,
                    other.multiRequests, true));
        this.returnPolicyIdList = other.returnPolicyIdList;
        this.combinedDecision = other.combinedDecision;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final RequestType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree requestDefaultsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("requestDefaults"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (requestDefaultsPropertyTree != null)
            : ((requestDefaultsPropertyTree == null) || (!requestDefaultsPropertyTree.isLeaf())))) {
          this.requestDefaults =
              ((other.requestDefaults == null) ? null
                  : new RequestDefaultsType.Builder<RequestType.Builder<TParentBuilder>>(this,
                      other.requestDefaults, true, requestDefaultsPropertyTree, treeUse));
        }
        final PropertyTree attributesPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributes"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributesPropertyTree != null)
            : ((attributesPropertyTree == null) || (!attributesPropertyTree.isLeaf())))) {
          if (other.attributes == null) {
            this.attributes = null;
          } else {
            this.attributes =
                new ArrayList<AttributesType.Builder<RequestType.Builder<TParentBuilder>>>();
            for (AttributesType _item : other.attributes) {
              this.attributes.add(((_item == null) ? null
                  : new AttributesType.Builder<RequestType.Builder<TParentBuilder>>(this, _item,
                      true, attributesPropertyTree, treeUse)));
            }
          }
        }
        final PropertyTree multiRequestsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("multiRequests"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (multiRequestsPropertyTree != null)
            : ((multiRequestsPropertyTree == null) || (!multiRequestsPropertyTree.isLeaf())))) {
          this.multiRequests =
              ((other.multiRequests == null) ? null
                  : new MultiRequestsType.Builder<RequestType.Builder<TParentBuilder>>(this,
                      other.multiRequests, true, multiRequestsPropertyTree, treeUse));
        }
        final PropertyTree returnPolicyIdListPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("returnPolicyIdList"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (returnPolicyIdListPropertyTree != null)
            : ((returnPolicyIdListPropertyTree == null) || (!returnPolicyIdListPropertyTree
                .isLeaf())))) {
          this.returnPolicyIdList = other.returnPolicyIdList;
        }
        final PropertyTree combinedDecisionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("combinedDecision"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (combinedDecisionPropertyTree != null)
            : ((combinedDecisionPropertyTree == null) || (!combinedDecisionPropertyTree.isLeaf())))) {
          this.combinedDecision = other.combinedDecision;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends RequestType> P init(final P product) {
      product.requestDefaults =
          ((this.requestDefaults == null) ? null : this.requestDefaults.build());
      if (this.attributes != null) {
        final List<AttributesType> attributes =
            new ArrayList<AttributesType>(this.attributes.size());
        for (AttributesType.Builder<RequestType.Builder<TParentBuilder>> _item : this.attributes) {
          attributes.add(_item.build());
        }
        product.attributes = attributes;
      }
      product.attributes_RO =
          ((attributes == null) ? null : Collections.unmodifiableList(product.attributes));
      product.multiRequests = ((this.multiRequests == null) ? null : this.multiRequests.build());
      product.returnPolicyIdList = this.returnPolicyIdList;
      product.combinedDecision = this.combinedDecision;
      return product;
    }

    public RequestType.Builder<TParentBuilder> withRequestDefaults(
        final RequestDefaultsType requestDefaults) {
      this.requestDefaults =
          ((requestDefaults == null) ? null
              : new RequestDefaultsType.Builder<RequestType.Builder<TParentBuilder>>(this,
                  requestDefaults, false));
      return this;
    }

    public RequestDefaultsType.Builder<? extends RequestType.Builder<TParentBuilder>> withRequestDefaults() {
      return this.requestDefaults =
          new RequestDefaultsType.Builder<RequestType.Builder<TParentBuilder>>(this, null, false);
    }

    public RequestType.Builder<TParentBuilder> addAttributes(
        final List<? extends AttributesType> attributes) {
      if (this.attributes == null) {
        this.attributes =
            new ArrayList<AttributesType.Builder<RequestType.Builder<TParentBuilder>>>();
      }
      for (AttributesType _item : attributes) {
        this.attributes.add(new AttributesType.Builder<RequestType.Builder<TParentBuilder>>(this,
            _item, false));
      }
      return this;
    }

    public RequestType.Builder<TParentBuilder> withAttributes(
        final List<? extends AttributesType> attributes) {
      if (this.attributes != null) {
        this.attributes.clear();
      }
      return addAttributes(attributes);
    }

    public RequestType.Builder<TParentBuilder> addAttributes(AttributesType... attributes) {
      addAttributes(Arrays.asList(attributes));
      return this;
    }

    public RequestType.Builder<TParentBuilder> withAttributes(AttributesType... attributes) {
      withAttributes(Arrays.asList(attributes));
      return this;
    }

    public AttributesType.Builder<? extends RequestType.Builder<TParentBuilder>> addAttributes() {
      if (this.attributes == null) {
        this.attributes =
            new ArrayList<AttributesType.Builder<RequestType.Builder<TParentBuilder>>>();
      }
      final AttributesType.Builder<RequestType.Builder<TParentBuilder>> attributesBuilder =
          new AttributesType.Builder<RequestType.Builder<TParentBuilder>>(this, null, false);
      this.attributes.add(attributesBuilder);
      return attributesBuilder;
    }

    public RequestType.Builder<TParentBuilder> withMultiRequests(
        final MultiRequestsType multiRequests) {
      this.multiRequests =
          ((multiRequests == null) ? null
              : new MultiRequestsType.Builder<RequestType.Builder<TParentBuilder>>(this,
                  multiRequests, false));
      return this;
    }

    public MultiRequestsType.Builder<? extends RequestType.Builder<TParentBuilder>> withMultiRequests() {
      return this.multiRequests =
          new MultiRequestsType.Builder<RequestType.Builder<TParentBuilder>>(this, null, false);
    }

    public RequestType.Builder<TParentBuilder> withReturnPolicyIdList(
        final boolean returnPolicyIdList) {
      this.returnPolicyIdList = returnPolicyIdList;
      return this;
    }

    public RequestType.Builder<TParentBuilder> withCombinedDecision(final boolean combinedDecision) {
      this.combinedDecision = combinedDecision;
      return this;
    }

    public RequestType build() {
      if (this._product == null) {
        return this.init(new RequestType());
      } else {
        return ((RequestType) this._product);
      }
    }

  }

  public static class Select extends RequestType.Selector<RequestType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static RequestType.Select _root() {
      return new RequestType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private RequestDefaultsType.Selector<TRoot, RequestType.Selector<TRoot, TParent>> requestDefaults =
        null;
    private AttributesType.Selector<TRoot, RequestType.Selector<TRoot, TParent>> attributes = null;
    private MultiRequestsType.Selector<TRoot, RequestType.Selector<TRoot, TParent>> multiRequests =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.requestDefaults != null) {
        products.put("requestDefaults", this.requestDefaults.init());
      }
      if (this.attributes != null) {
        products.put("attributes", this.attributes.init());
      }
      if (this.multiRequests != null) {
        products.put("multiRequests", this.multiRequests.init());
      }
      return products;
    }

    public RequestDefaultsType.Selector<TRoot, RequestType.Selector<TRoot, TParent>> requestDefaults() {
      return ((this.requestDefaults == null) ? this.requestDefaults =
          new RequestDefaultsType.Selector<TRoot, RequestType.Selector<TRoot, TParent>>(this._root,
              this, "requestDefaults") : this.requestDefaults);
    }

    public AttributesType.Selector<TRoot, RequestType.Selector<TRoot, TParent>> attributes() {
      return ((this.attributes == null) ? this.attributes =
          new AttributesType.Selector<TRoot, RequestType.Selector<TRoot, TParent>>(this._root,
              this, "attributes") : this.attributes);
    }

    public MultiRequestsType.Selector<TRoot, RequestType.Selector<TRoot, TParent>> multiRequests() {
      return ((this.multiRequests == null) ? this.multiRequests =
          new MultiRequestsType.Selector<TRoot, RequestType.Selector<TRoot, TParent>>(this._root,
              this, "multiRequests") : this.multiRequests);
    }

  }

}
