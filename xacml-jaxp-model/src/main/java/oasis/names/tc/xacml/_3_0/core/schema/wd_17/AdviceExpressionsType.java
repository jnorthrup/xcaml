//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for AdviceExpressionsType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AdviceExpressionsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AdviceExpression" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AdviceExpressionsType", propOrder = {"adviceExpression"})
public class AdviceExpressionsType implements Cloneable {

  @XmlElement(name = "AdviceExpression", required = true)
  protected List<AdviceExpressionType> adviceExpression;
  protected transient List<AdviceExpressionType> adviceExpression_RO = null;

  public static AdviceExpressionsType.Builder<Void> builder() {
    return new AdviceExpressionsType.Builder<Void>(null, null, false);
  }

  public static AdviceExpressionsType.Builder<Void> copyOf(final AdviceExpressionsType other) {
    return new AdviceExpressionsType.Builder<Void>(null, other, true);
  }

  public static AdviceExpressionsType.Builder<Void> copyOf(final AdviceExpressionsType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new AdviceExpressionsType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static AdviceExpressionsType.Builder<Void> copyExcept(final AdviceExpressionsType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static AdviceExpressionsType.Builder<Void> copyOnly(final AdviceExpressionsType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(adviceExpression = " + adviceExpression) + ") ");
  }

  @Override
  public AdviceExpressionsType clone() throws CloneNotSupportedException {
    final AdviceExpressionsType newObject = ((AdviceExpressionsType) super.clone());
    if (this.adviceExpression == null) {
      newObject.adviceExpression = null;
    } else {
      newObject.adviceExpression = new ArrayList<AdviceExpressionType>();
      for (AdviceExpressionType item : this.adviceExpression) {
        newObject.adviceExpression.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.adviceExpression_RO =
        ((adviceExpression == null) ? null : Collections
            .unmodifiableList(newObject.adviceExpression));
    return newObject;
  }

  public List<AdviceExpressionType> getAdviceExpression() {
    if (this.adviceExpression == null) {
      this.adviceExpression = new ArrayList<AdviceExpressionType>();
    }
    if (this.adviceExpression_RO == null) {
      this.adviceExpression_RO =
          ((adviceExpression == null) ? null : Collections.unmodifiableList(this.adviceExpression));
    }
    return this.adviceExpression_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final AdviceExpressionsType _product;
    private List<AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>> adviceExpression;

    public Builder(final TParentBuilder parentBuilder, final AdviceExpressionsType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.adviceExpression == null) {
          this.adviceExpression = null;
        } else {
          this.adviceExpression =
              new ArrayList<AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>>();
          for (AdviceExpressionType _item : other.adviceExpression) {
            this.adviceExpression.add(((_item == null) ? null
                : new AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>(
                    this, _item, true)));
          }
        }
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final AdviceExpressionsType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree adviceExpressionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("adviceExpression"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (adviceExpressionPropertyTree != null)
            : ((adviceExpressionPropertyTree == null) || (!adviceExpressionPropertyTree.isLeaf())))) {
          if (other.adviceExpression == null) {
            this.adviceExpression = null;
          } else {
            this.adviceExpression =
                new ArrayList<AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>>();
            for (AdviceExpressionType _item : other.adviceExpression) {
              this.adviceExpression
                  .add(((_item == null)
                      ? null
                      : new AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>(
                          this, _item, true, adviceExpressionPropertyTree, treeUse)));
            }
          }
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends AdviceExpressionsType> P init(final P product) {
      if (this.adviceExpression != null) {
        final List<AdviceExpressionType> adviceExpression =
            new ArrayList<AdviceExpressionType>(this.adviceExpression.size());
        for (AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>> _item : this.adviceExpression) {
          adviceExpression.add(_item.build());
        }
        product.adviceExpression = adviceExpression;
      }
      product.adviceExpression_RO =
          ((adviceExpression == null) ? null : Collections
              .unmodifiableList(product.adviceExpression));
      return product;
    }

    public AdviceExpressionsType.Builder<TParentBuilder> addAdviceExpression(
        final List<? extends AdviceExpressionType> adviceExpression) {
      if (this.adviceExpression == null) {
        this.adviceExpression =
            new ArrayList<AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>>();
      }
      for (AdviceExpressionType _item : adviceExpression) {
        this.adviceExpression
            .add(new AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>(
                this, _item, false));
      }
      return this;
    }

    public AdviceExpressionsType.Builder<TParentBuilder> withAdviceExpression(
        final List<? extends AdviceExpressionType> adviceExpression) {
      if (this.adviceExpression != null) {
        this.adviceExpression.clear();
      }
      return addAdviceExpression(adviceExpression);
    }

    public AdviceExpressionsType.Builder<TParentBuilder> addAdviceExpression(
        AdviceExpressionType... adviceExpression) {
      addAdviceExpression(Arrays.asList(adviceExpression));
      return this;
    }

    public AdviceExpressionsType.Builder<TParentBuilder> withAdviceExpression(
        AdviceExpressionType... adviceExpression) {
      withAdviceExpression(Arrays.asList(adviceExpression));
      return this;
    }

    public AdviceExpressionType.Builder<? extends AdviceExpressionsType.Builder<TParentBuilder>> addAdviceExpression() {
      if (this.adviceExpression == null) {
        this.adviceExpression =
            new ArrayList<AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>>();
      }
      final AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>> adviceExpressionBuilder =
          new AdviceExpressionType.Builder<AdviceExpressionsType.Builder<TParentBuilder>>(this,
              null, false);
      this.adviceExpression.add(adviceExpressionBuilder);
      return adviceExpressionBuilder;
    }

    public AdviceExpressionsType build() {
      if (this._product == null) {
        return this.init(new AdviceExpressionsType());
      } else {
        return ((AdviceExpressionsType) this._product);
      }
    }

  }

  public static class Select extends
      AdviceExpressionsType.Selector<AdviceExpressionsType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static AdviceExpressionsType.Select _root() {
      return new AdviceExpressionsType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AdviceExpressionType.Selector<TRoot, AdviceExpressionsType.Selector<TRoot, TParent>> adviceExpression =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.adviceExpression != null) {
        products.put("adviceExpression", this.adviceExpression.init());
      }
      return products;
    }

    public AdviceExpressionType.Selector<TRoot, AdviceExpressionsType.Selector<TRoot, TParent>> adviceExpression() {
      return ((this.adviceExpression == null) ? this.adviceExpression =
          new AdviceExpressionType.Selector<TRoot, AdviceExpressionsType.Selector<TRoot, TParent>>(
              this._root, this, "adviceExpression") : this.adviceExpression);
    }

  }

}
