//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for ResultType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ResultType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Decision"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Status" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Obligations" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AssociatedAdvice" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Attributes" maxOccurs="unbounded" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}PolicyIdentifierList" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ResultType", propOrder = {
    "decision", "status", "obligations", "associatedAdvice", "attributes", "policyIdentifierList"})
public class ResultType implements Cloneable {

  @XmlElement(name = "Decision", required = true)
  @XmlSchemaType(name = "string")
  protected DecisionType decision;
  @XmlElement(name = "Status")
  protected StatusType status;
  @XmlElement(name = "Obligations")
  protected ObligationsType obligations;
  @XmlElement(name = "AssociatedAdvice")
  protected AssociatedAdviceType associatedAdvice;
  @XmlElement(name = "Attributes")
  protected List<AttributesType> attributes;
  @XmlElement(name = "PolicyIdentifierList")
  protected PolicyIdentifierListType policyIdentifierList;
  protected transient List<AttributesType> attributes_RO = null;

  /**
   * Gets the value of the decision property.
   * 
   * @return possible object is {@link DecisionType }
   * 
   */
  public DecisionType getDecision() {
    return decision;
  }

  /**
   * Sets the value of the decision property.
   * 
   * @param value allowed object is {@link DecisionType }
   * 
   */
  protected void setDecision(DecisionType value) {
    this.decision = value;
  }

  /**
   * Gets the value of the status property.
   * 
   * @return possible object is {@link StatusType }
   * 
   */
  public StatusType getStatus() {
    return status;
  }

  /**
   * Sets the value of the status property.
   * 
   * @param value allowed object is {@link StatusType }
   * 
   */
  protected void setStatus(StatusType value) {
    this.status = value;
  }

  /**
   * Gets the value of the obligations property.
   * 
   * @return possible object is {@link ObligationsType }
   * 
   */
  public ObligationsType getObligations() {
    return obligations;
  }

  /**
   * Sets the value of the obligations property.
   * 
   * @param value allowed object is {@link ObligationsType }
   * 
   */
  protected void setObligations(ObligationsType value) {
    this.obligations = value;
  }

  /**
   * Gets the value of the associatedAdvice property.
   * 
   * @return possible object is {@link AssociatedAdviceType }
   * 
   */
  public AssociatedAdviceType getAssociatedAdvice() {
    return associatedAdvice;
  }

  /**
   * Sets the value of the associatedAdvice property.
   * 
   * @param value allowed object is {@link AssociatedAdviceType }
   * 
   */
  protected void setAssociatedAdvice(AssociatedAdviceType value) {
    this.associatedAdvice = value;
  }

  /**
   * Gets the value of the policyIdentifierList property.
   * 
   * @return possible object is {@link PolicyIdentifierListType }
   * 
   */
  public PolicyIdentifierListType getPolicyIdentifierList() {
    return policyIdentifierList;
  }

  /**
   * Sets the value of the policyIdentifierList property.
   * 
   * @param value allowed object is {@link PolicyIdentifierListType }
   * 
   */
  protected void setPolicyIdentifierList(PolicyIdentifierListType value) {
    this.policyIdentifierList = value;
  }

  public static ResultType.Builder<Void> builder() {
    return new ResultType.Builder<Void>(null, null, false);
  }

  public static ResultType.Builder<Void> copyOf(final ResultType other) {
    return new ResultType.Builder<Void>(null, other, true);
  }

  public static ResultType.Builder<Void> copyOf(final ResultType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new ResultType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static ResultType.Builder<Void> copyExcept(final ResultType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ResultType.Builder<Void> copyOnly(final ResultType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((((((((((((((("(decision = " + decision) + "), ") + "(status = ") + status) + "), ") + "(obligations = ") + obligations) + "), ") + "(associatedAdvice = ") + associatedAdvice) + "), ") + "(attributes = ") + attributes) + "), ") + "(policyIdentifierList = ") + policyIdentifierList) + ") ");
  }

  @Override
  public ResultType clone() throws CloneNotSupportedException {
    final ResultType newObject = ((ResultType) super.clone());
    newObject.status = ((this.status == null) ? null : this.status.clone());
    newObject.obligations = ((this.obligations == null) ? null : this.obligations.clone());
    newObject.associatedAdvice =
        ((this.associatedAdvice == null) ? null : this.associatedAdvice.clone());
    if (this.attributes == null) {
      newObject.attributes = null;
    } else {
      newObject.attributes = new ArrayList<AttributesType>();
      for (AttributesType item : this.attributes) {
        newObject.attributes.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.attributes_RO =
        ((attributes == null) ? null : Collections.unmodifiableList(newObject.attributes));
    newObject.policyIdentifierList =
        ((this.policyIdentifierList == null) ? null : this.policyIdentifierList.clone());
    return newObject;
  }

  public List<AttributesType> getAttributes() {
    if (this.attributes == null) {
      this.attributes = new ArrayList<AttributesType>();
    }
    if (this.attributes_RO == null) {
      this.attributes_RO =
          ((attributes == null) ? null : Collections.unmodifiableList(this.attributes));
    }
    return this.attributes_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final ResultType _product;
    private DecisionType decision;
    private StatusType.Builder<ResultType.Builder<TParentBuilder>> status;
    private ObligationsType.Builder<ResultType.Builder<TParentBuilder>> obligations;
    private AssociatedAdviceType.Builder<ResultType.Builder<TParentBuilder>> associatedAdvice;
    private List<AttributesType.Builder<ResultType.Builder<TParentBuilder>>> attributes;
    private PolicyIdentifierListType.Builder<ResultType.Builder<TParentBuilder>> policyIdentifierList;

    public Builder(final TParentBuilder parentBuilder, final ResultType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.decision = other.decision;
        this.status =
            ((other.status == null) ? null
                : new StatusType.Builder<ResultType.Builder<TParentBuilder>>(this, other.status,
                    true));
        this.obligations =
            ((other.obligations == null) ? null
                : new ObligationsType.Builder<ResultType.Builder<TParentBuilder>>(this,
                    other.obligations, true));
        this.associatedAdvice =
            ((other.associatedAdvice == null) ? null
                : new AssociatedAdviceType.Builder<ResultType.Builder<TParentBuilder>>(this,
                    other.associatedAdvice, true));
        if (other.attributes == null) {
          this.attributes = null;
        } else {
          this.attributes =
              new ArrayList<AttributesType.Builder<ResultType.Builder<TParentBuilder>>>();
          for (AttributesType _item : other.attributes) {
            this.attributes
                .add(((_item == null) ? null
                    : new AttributesType.Builder<ResultType.Builder<TParentBuilder>>(this, _item,
                        true)));
          }
        }
        this.policyIdentifierList =
            ((other.policyIdentifierList == null) ? null
                : new PolicyIdentifierListType.Builder<ResultType.Builder<TParentBuilder>>(this,
                    other.policyIdentifierList, true));
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ResultType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree decisionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("decision"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (decisionPropertyTree != null)
            : ((decisionPropertyTree == null) || (!decisionPropertyTree.isLeaf())))) {
          this.decision = other.decision;
        }
        final PropertyTree statusPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("status"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (statusPropertyTree != null)
            : ((statusPropertyTree == null) || (!statusPropertyTree.isLeaf())))) {
          this.status =
              ((other.status == null) ? null
                  : new StatusType.Builder<ResultType.Builder<TParentBuilder>>(this, other.status,
                      true, statusPropertyTree, treeUse));
        }
        final PropertyTree obligationsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("obligations"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (obligationsPropertyTree != null)
            : ((obligationsPropertyTree == null) || (!obligationsPropertyTree.isLeaf())))) {
          this.obligations =
              ((other.obligations == null) ? null
                  : new ObligationsType.Builder<ResultType.Builder<TParentBuilder>>(this,
                      other.obligations, true, obligationsPropertyTree, treeUse));
        }
        final PropertyTree associatedAdvicePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("associatedAdvice"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (associatedAdvicePropertyTree != null)
            : ((associatedAdvicePropertyTree == null) || (!associatedAdvicePropertyTree.isLeaf())))) {
          this.associatedAdvice =
              ((other.associatedAdvice == null) ? null
                  : new AssociatedAdviceType.Builder<ResultType.Builder<TParentBuilder>>(this,
                      other.associatedAdvice, true, associatedAdvicePropertyTree, treeUse));
        }
        final PropertyTree attributesPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributes"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributesPropertyTree != null)
            : ((attributesPropertyTree == null) || (!attributesPropertyTree.isLeaf())))) {
          if (other.attributes == null) {
            this.attributes = null;
          } else {
            this.attributes =
                new ArrayList<AttributesType.Builder<ResultType.Builder<TParentBuilder>>>();
            for (AttributesType _item : other.attributes) {
              this.attributes.add(((_item == null) ? null
                  : new AttributesType.Builder<ResultType.Builder<TParentBuilder>>(this, _item,
                      true, attributesPropertyTree, treeUse)));
            }
          }
        }
        final PropertyTree policyIdentifierListPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("policyIdentifierList"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (policyIdentifierListPropertyTree != null)
            : ((policyIdentifierListPropertyTree == null) || (!policyIdentifierListPropertyTree
                .isLeaf())))) {
          this.policyIdentifierList =
              ((other.policyIdentifierList == null) ? null
                  : new PolicyIdentifierListType.Builder<ResultType.Builder<TParentBuilder>>(this,
                      other.policyIdentifierList, true, policyIdentifierListPropertyTree, treeUse));
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends ResultType> P init(final P product) {
      product.decision = this.decision;
      product.status = ((this.status == null) ? null : this.status.build());
      product.obligations = ((this.obligations == null) ? null : this.obligations.build());
      product.associatedAdvice =
          ((this.associatedAdvice == null) ? null : this.associatedAdvice.build());
      if (this.attributes != null) {
        final List<AttributesType> attributes =
            new ArrayList<AttributesType>(this.attributes.size());
        for (AttributesType.Builder<ResultType.Builder<TParentBuilder>> _item : this.attributes) {
          attributes.add(_item.build());
        }
        product.attributes = attributes;
      }
      product.attributes_RO =
          ((attributes == null) ? null : Collections.unmodifiableList(product.attributes));
      product.policyIdentifierList =
          ((this.policyIdentifierList == null) ? null : this.policyIdentifierList.build());
      return product;
    }

    public ResultType.Builder<TParentBuilder> withDecision(final DecisionType decision) {
      this.decision = decision;
      return this;
    }

    public ResultType.Builder<TParentBuilder> withStatus(final StatusType status) {
      this.status =
          ((status == null) ? null : new StatusType.Builder<ResultType.Builder<TParentBuilder>>(
              this, status, false));
      return this;
    }

    public StatusType.Builder<? extends ResultType.Builder<TParentBuilder>> withStatus() {
      return this.status =
          new StatusType.Builder<ResultType.Builder<TParentBuilder>>(this, null, false);
    }

    public ResultType.Builder<TParentBuilder> withObligations(final ObligationsType obligations) {
      this.obligations =
          ((obligations == null) ? null
              : new ObligationsType.Builder<ResultType.Builder<TParentBuilder>>(this, obligations,
                  false));
      return this;
    }

    public ObligationsType.Builder<? extends ResultType.Builder<TParentBuilder>> withObligations() {
      return this.obligations =
          new ObligationsType.Builder<ResultType.Builder<TParentBuilder>>(this, null, false);
    }

    public ResultType.Builder<TParentBuilder> withAssociatedAdvice(
        final AssociatedAdviceType associatedAdvice) {
      this.associatedAdvice =
          ((associatedAdvice == null) ? null
              : new AssociatedAdviceType.Builder<ResultType.Builder<TParentBuilder>>(this,
                  associatedAdvice, false));
      return this;
    }

    public AssociatedAdviceType.Builder<? extends ResultType.Builder<TParentBuilder>> withAssociatedAdvice() {
      return this.associatedAdvice =
          new AssociatedAdviceType.Builder<ResultType.Builder<TParentBuilder>>(this, null, false);
    }

    public ResultType.Builder<TParentBuilder> addAttributes(
        final List<? extends AttributesType> attributes) {
      if (this.attributes == null) {
        this.attributes =
            new ArrayList<AttributesType.Builder<ResultType.Builder<TParentBuilder>>>();
      }
      for (AttributesType _item : attributes) {
        this.attributes.add(new AttributesType.Builder<ResultType.Builder<TParentBuilder>>(this,
            _item, false));
      }
      return this;
    }

    public ResultType.Builder<TParentBuilder> withAttributes(
        final List<? extends AttributesType> attributes) {
      if (this.attributes != null) {
        this.attributes.clear();
      }
      return addAttributes(attributes);
    }

    public ResultType.Builder<TParentBuilder> addAttributes(AttributesType... attributes) {
      addAttributes(Arrays.asList(attributes));
      return this;
    }

    public ResultType.Builder<TParentBuilder> withAttributes(AttributesType... attributes) {
      withAttributes(Arrays.asList(attributes));
      return this;
    }

    public AttributesType.Builder<? extends ResultType.Builder<TParentBuilder>> addAttributes() {
      if (this.attributes == null) {
        this.attributes =
            new ArrayList<AttributesType.Builder<ResultType.Builder<TParentBuilder>>>();
      }
      final AttributesType.Builder<ResultType.Builder<TParentBuilder>> attributesBuilder =
          new AttributesType.Builder<ResultType.Builder<TParentBuilder>>(this, null, false);
      this.attributes.add(attributesBuilder);
      return attributesBuilder;
    }

    public ResultType.Builder<TParentBuilder> withPolicyIdentifierList(
        final PolicyIdentifierListType policyIdentifierList) {
      this.policyIdentifierList =
          ((policyIdentifierList == null) ? null
              : new PolicyIdentifierListType.Builder<ResultType.Builder<TParentBuilder>>(this,
                  policyIdentifierList, false));
      return this;
    }

    public PolicyIdentifierListType.Builder<? extends ResultType.Builder<TParentBuilder>> withPolicyIdentifierList() {
      return this.policyIdentifierList =
          new PolicyIdentifierListType.Builder<ResultType.Builder<TParentBuilder>>(this, null,
              false);
    }

    public ResultType build() {
      if (this._product == null) {
        return this.init(new ResultType());
      } else {
        return ((ResultType) this._product);
      }
    }

  }

  public static class Select extends ResultType.Selector<ResultType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ResultType.Select _root() {
      return new ResultType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, ResultType.Selector<TRoot, TParent>> decision = null;
    private StatusType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> status = null;
    private ObligationsType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> obligations = null;
    private AssociatedAdviceType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> associatedAdvice =
        null;
    private AttributesType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> attributes = null;
    private PolicyIdentifierListType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> policyIdentifierList =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.decision != null) {
        products.put("decision", this.decision.init());
      }
      if (this.status != null) {
        products.put("status", this.status.init());
      }
      if (this.obligations != null) {
        products.put("obligations", this.obligations.init());
      }
      if (this.associatedAdvice != null) {
        products.put("associatedAdvice", this.associatedAdvice.init());
      }
      if (this.attributes != null) {
        products.put("attributes", this.attributes.init());
      }
      if (this.policyIdentifierList != null) {
        products.put("policyIdentifierList", this.policyIdentifierList.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, ResultType.Selector<TRoot, TParent>> decision() {
      return ((this.decision == null) ? this.decision =
          new com.kscs.util.jaxb.Selector<TRoot, ResultType.Selector<TRoot, TParent>>(this._root,
              this, "decision") : this.decision);
    }

    public StatusType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> status() {
      return ((this.status == null) ? this.status =
          new StatusType.Selector<TRoot, ResultType.Selector<TRoot, TParent>>(this._root, this,
              "status") : this.status);
    }

    public ObligationsType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> obligations() {
      return ((this.obligations == null) ? this.obligations =
          new ObligationsType.Selector<TRoot, ResultType.Selector<TRoot, TParent>>(this._root,
              this, "obligations") : this.obligations);
    }

    public AssociatedAdviceType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> associatedAdvice() {
      return ((this.associatedAdvice == null) ? this.associatedAdvice =
          new AssociatedAdviceType.Selector<TRoot, ResultType.Selector<TRoot, TParent>>(this._root,
              this, "associatedAdvice") : this.associatedAdvice);
    }

    public AttributesType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> attributes() {
      return ((this.attributes == null) ? this.attributes =
          new AttributesType.Selector<TRoot, ResultType.Selector<TRoot, TParent>>(this._root, this,
              "attributes") : this.attributes);
    }

    public PolicyIdentifierListType.Selector<TRoot, ResultType.Selector<TRoot, TParent>> policyIdentifierList() {
      return ((this.policyIdentifierList == null) ? this.policyIdentifierList =
          new PolicyIdentifierListType.Selector<TRoot, ResultType.Selector<TRoot, TParent>>(
              this._root, this, "policyIdentifierList") : this.policyIdentifierList);
    }

  }

}
