//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for CombinerParametersType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="CombinerParametersType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}CombinerParameter" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "CombinerParametersType", propOrder = {"combinerParameter"})
@XmlSeeAlso({
    RuleCombinerParametersType.class, PolicyCombinerParametersType.class,
    PolicySetCombinerParametersType.class})
public class CombinerParametersType implements Cloneable {

  @XmlElement(name = "CombinerParameter")
  protected List<CombinerParameterType> combinerParameter;

  /**
   * Gets the value of the combinerParameter property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the combinerParameter property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getCombinerParameter().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link CombinerParameterType }
   * 
   * 
   */
  public List<CombinerParameterType> getCombinerParameter() {
    if (combinerParameter == null) {
      combinerParameter = new ArrayList<CombinerParameterType>();
    }
    return this.combinerParameter;
  }

  public static CombinerParametersType.Builder<Void> builder() {
    return new CombinerParametersType.Builder<Void>(null, null, false);
  }

  public static CombinerParametersType.Builder<Void> copyOf(final CombinerParametersType other) {
    return new CombinerParametersType.Builder<Void>(null, other, true);
  }

  public static CombinerParametersType.Builder<Void> copyOf(final CombinerParametersType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new CombinerParametersType.Builder<Void>(null, other, true, propertyTree,
        propertyTreeUse);
  }

  public static CombinerParametersType.Builder<Void> copyExcept(final CombinerParametersType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static CombinerParametersType.Builder<Void> copyOnly(final CombinerParametersType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(combinerParameter = " + combinerParameter) + ") ");
  }

  @Override
  public CombinerParametersType clone() throws CloneNotSupportedException {
    final CombinerParametersType newObject = ((CombinerParametersType) super.clone());
    if (this.combinerParameter == null) {
      newObject.combinerParameter = null;
    } else {
      newObject.combinerParameter = new ArrayList<CombinerParameterType>();
      for (CombinerParameterType item : this.combinerParameter) {
        newObject.combinerParameter.add(((item == null) ? null : item.clone()));
      }
    }
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final CombinerParametersType _product;
    private List<CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>> combinerParameter;

    public Builder(final TParentBuilder parentBuilder, final CombinerParametersType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.combinerParameter == null) {
          this.combinerParameter = null;
        } else {
          this.combinerParameter =
              new ArrayList<CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>>();
          for (CombinerParameterType _item : other.combinerParameter) {
            this.combinerParameter
                .add(((_item == null)
                    ? null
                    : new CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>(
                        this, _item, true)));
          }
        }
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final CombinerParametersType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree combinerParameterPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("combinerParameter"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (combinerParameterPropertyTree != null)
            : ((combinerParameterPropertyTree == null) || (!combinerParameterPropertyTree.isLeaf())))) {
          if (other.combinerParameter == null) {
            this.combinerParameter = null;
          } else {
            this.combinerParameter =
                new ArrayList<CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>>();
            for (CombinerParameterType _item : other.combinerParameter) {
              this.combinerParameter
                  .add(((_item == null)
                      ? null
                      : new CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>(
                          this, _item, true, combinerParameterPropertyTree, treeUse)));
            }
          }
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends CombinerParametersType> P init(final P product) {
      if (this.combinerParameter != null) {
        final List<CombinerParameterType> combinerParameter =
            new ArrayList<CombinerParameterType>(this.combinerParameter.size());
        for (CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>> _item : this.combinerParameter) {
          combinerParameter.add(_item.build());
        }
        product.combinerParameter = combinerParameter;
      }
      return product;
    }

    public CombinerParametersType.Builder<TParentBuilder> addCombinerParameter(
        final List<? extends CombinerParameterType> combinerParameter) {
      if (this.combinerParameter == null) {
        this.combinerParameter =
            new ArrayList<CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>>();
      }
      for (CombinerParameterType _item : combinerParameter) {
        this.combinerParameter
            .add(new CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>(
                this, _item, false));
      }
      return this;
    }

    public CombinerParametersType.Builder<TParentBuilder> withCombinerParameter(
        final List<? extends CombinerParameterType> combinerParameter) {
      if (this.combinerParameter != null) {
        this.combinerParameter.clear();
      }
      return addCombinerParameter(combinerParameter);
    }

    public CombinerParametersType.Builder<TParentBuilder> addCombinerParameter(
        CombinerParameterType... combinerParameter) {
      addCombinerParameter(Arrays.asList(combinerParameter));
      return this;
    }

    public CombinerParametersType.Builder<TParentBuilder> withCombinerParameter(
        CombinerParameterType... combinerParameter) {
      withCombinerParameter(Arrays.asList(combinerParameter));
      return this;
    }

    public CombinerParameterType.Builder<? extends CombinerParametersType.Builder<TParentBuilder>> addCombinerParameter() {
      if (this.combinerParameter == null) {
        this.combinerParameter =
            new ArrayList<CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>>();
      }
      final CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>> combinerParameterBuilder =
          new CombinerParameterType.Builder<CombinerParametersType.Builder<TParentBuilder>>(this,
              null, false);
      this.combinerParameter.add(combinerParameterBuilder);
      return combinerParameterBuilder;
    }

    public CombinerParametersType build() {
      if (this._product == null) {
        return this.init(new CombinerParametersType());
      } else {
        return ((CombinerParametersType) this._product);
      }
    }

  }

  public static class Select extends
      CombinerParametersType.Selector<CombinerParametersType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static CombinerParametersType.Select _root() {
      return new CombinerParametersType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private CombinerParameterType.Selector<TRoot, CombinerParametersType.Selector<TRoot, TParent>> combinerParameter =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.combinerParameter != null) {
        products.put("combinerParameter", this.combinerParameter.init());
      }
      return products;
    }

    public CombinerParameterType.Selector<TRoot, CombinerParametersType.Selector<TRoot, TParent>> combinerParameter() {
      return ((this.combinerParameter == null)
          ? this.combinerParameter =
              new CombinerParameterType.Selector<TRoot, CombinerParametersType.Selector<TRoot, TParent>>(
                  this._root, this, "combinerParameter") : this.combinerParameter);
    }

  }

}
