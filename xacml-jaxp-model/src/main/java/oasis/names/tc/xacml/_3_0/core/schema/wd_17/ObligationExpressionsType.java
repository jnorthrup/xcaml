//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for ObligationExpressionsType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ObligationExpressionsType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}ObligationExpression" maxOccurs="unbounded"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ObligationExpressionsType", propOrder = {"obligationExpression"})
public class ObligationExpressionsType implements Cloneable {

  @XmlElement(name = "ObligationExpression", required = true)
  protected List<ObligationExpressionType> obligationExpression;
  protected transient List<ObligationExpressionType> obligationExpression_RO = null;

  public static ObligationExpressionsType.Builder<Void> builder() {
    return new ObligationExpressionsType.Builder<Void>(null, null, false);
  }

  public static ObligationExpressionsType.Builder<Void> copyOf(final ObligationExpressionsType other) {
    return new ObligationExpressionsType.Builder<Void>(null, other, true);
  }

  public static ObligationExpressionsType.Builder<Void> copyOf(
      final ObligationExpressionsType other, final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    return new ObligationExpressionsType.Builder<Void>(null, other, true, propertyTree,
        propertyTreeUse);
  }

  public static ObligationExpressionsType.Builder<Void> copyExcept(
      final ObligationExpressionsType other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ObligationExpressionsType.Builder<Void> copyOnly(
      final ObligationExpressionsType other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(obligationExpression = " + obligationExpression) + ") ");
  }

  @Override
  public ObligationExpressionsType clone() throws CloneNotSupportedException {
    final ObligationExpressionsType newObject = ((ObligationExpressionsType) super.clone());
    if (this.obligationExpression == null) {
      newObject.obligationExpression = null;
    } else {
      newObject.obligationExpression = new ArrayList<ObligationExpressionType>();
      for (ObligationExpressionType item : this.obligationExpression) {
        newObject.obligationExpression.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.obligationExpression_RO =
        ((obligationExpression == null) ? null : Collections
            .unmodifiableList(newObject.obligationExpression));
    return newObject;
  }

  public List<ObligationExpressionType> getObligationExpression() {
    if (this.obligationExpression == null) {
      this.obligationExpression = new ArrayList<ObligationExpressionType>();
    }
    if (this.obligationExpression_RO == null) {
      this.obligationExpression_RO =
          ((obligationExpression == null) ? null : Collections
              .unmodifiableList(this.obligationExpression));
    }
    return this.obligationExpression_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final ObligationExpressionsType _product;
    private List<ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>> obligationExpression;

    public Builder(final TParentBuilder parentBuilder, final ObligationExpressionsType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.obligationExpression == null) {
          this.obligationExpression = null;
        } else {
          this.obligationExpression =
              new ArrayList<ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>>();
          for (ObligationExpressionType _item : other.obligationExpression) {
            this.obligationExpression
                .add(((_item == null)
                    ? null
                    : new ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>(
                        this, _item, true)));
          }
        }
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ObligationExpressionsType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree obligationExpressionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("obligationExpression"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (obligationExpressionPropertyTree != null)
            : ((obligationExpressionPropertyTree == null) || (!obligationExpressionPropertyTree
                .isLeaf())))) {
          if (other.obligationExpression == null) {
            this.obligationExpression = null;
          } else {
            this.obligationExpression =
                new ArrayList<ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>>();
            for (ObligationExpressionType _item : other.obligationExpression) {
              this.obligationExpression
                  .add(((_item == null)
                      ? null
                      : new ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>(
                          this, _item, true, obligationExpressionPropertyTree, treeUse)));
            }
          }
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends ObligationExpressionsType> P init(final P product) {
      if (this.obligationExpression != null) {
        final List<ObligationExpressionType> obligationExpression =
            new ArrayList<ObligationExpressionType>(this.obligationExpression.size());
        for (ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>> _item : this.obligationExpression) {
          obligationExpression.add(_item.build());
        }
        product.obligationExpression = obligationExpression;
      }
      product.obligationExpression_RO =
          ((obligationExpression == null) ? null : Collections
              .unmodifiableList(product.obligationExpression));
      return product;
    }

    public ObligationExpressionsType.Builder<TParentBuilder> addObligationExpression(
        final List<? extends ObligationExpressionType> obligationExpression) {
      if (this.obligationExpression == null) {
        this.obligationExpression =
            new ArrayList<ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>>();
      }
      for (ObligationExpressionType _item : obligationExpression) {
        this.obligationExpression
            .add(new ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>(
                this, _item, false));
      }
      return this;
    }

    public ObligationExpressionsType.Builder<TParentBuilder> withObligationExpression(
        final List<? extends ObligationExpressionType> obligationExpression) {
      if (this.obligationExpression != null) {
        this.obligationExpression.clear();
      }
      return addObligationExpression(obligationExpression);
    }

    public ObligationExpressionsType.Builder<TParentBuilder> addObligationExpression(
        ObligationExpressionType... obligationExpression) {
      addObligationExpression(Arrays.asList(obligationExpression));
      return this;
    }

    public ObligationExpressionsType.Builder<TParentBuilder> withObligationExpression(
        ObligationExpressionType... obligationExpression) {
      withObligationExpression(Arrays.asList(obligationExpression));
      return this;
    }

    public ObligationExpressionType.Builder<? extends ObligationExpressionsType.Builder<TParentBuilder>> addObligationExpression() {
      if (this.obligationExpression == null) {
        this.obligationExpression =
            new ArrayList<ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>>();
      }
      final ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>> obligationExpressionBuilder =
          new ObligationExpressionType.Builder<ObligationExpressionsType.Builder<TParentBuilder>>(
              this, null, false);
      this.obligationExpression.add(obligationExpressionBuilder);
      return obligationExpressionBuilder;
    }

    public ObligationExpressionsType build() {
      if (this._product == null) {
        return this.init(new ObligationExpressionsType());
      } else {
        return ((ObligationExpressionsType) this._product);
      }
    }

  }

  public static class Select extends
      ObligationExpressionsType.Selector<ObligationExpressionsType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ObligationExpressionsType.Select _root() {
      return new ObligationExpressionsType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private ObligationExpressionType.Selector<TRoot, ObligationExpressionsType.Selector<TRoot, TParent>> obligationExpression =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.obligationExpression != null) {
        products.put("obligationExpression", this.obligationExpression.init());
      }
      return products;
    }

    public ObligationExpressionType.Selector<TRoot, ObligationExpressionsType.Selector<TRoot, TParent>> obligationExpression() {
      return ((this.obligationExpression == null)
          ? this.obligationExpression =
              new ObligationExpressionType.Selector<TRoot, ObligationExpressionsType.Selector<TRoot, TParent>>(
                  this._root, this, "obligationExpression") : this.obligationExpression);
    }

  }

}
