//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for AdviceExpressionType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AdviceExpressionType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AttributeAssignmentExpression" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="AdviceId" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="AppliesTo" use="required" type="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}EffectType" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AdviceExpressionType", propOrder = {"attributeAssignmentExpression"})
public class AdviceExpressionType implements Cloneable {

  @XmlElement(name = "AttributeAssignmentExpression")
  protected List<AttributeAssignmentExpressionType> attributeAssignmentExpression;
  @XmlAttribute(name = "AdviceId", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String adviceId;
  @XmlAttribute(name = "AppliesTo", required = true)
  protected EffectType appliesTo;
  protected transient List<AttributeAssignmentExpressionType> attributeAssignmentExpression_RO =
      null;

  /**
   * Gets the value of the adviceId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getAdviceId() {
    return adviceId;
  }

  /**
   * Sets the value of the adviceId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setAdviceId(String value) {
    this.adviceId = value;
  }

  /**
   * Gets the value of the appliesTo property.
   * 
   * @return possible object is {@link EffectType }
   * 
   */
  public EffectType getAppliesTo() {
    return appliesTo;
  }

  /**
   * Sets the value of the appliesTo property.
   * 
   * @param value allowed object is {@link EffectType }
   * 
   */
  protected void setAppliesTo(EffectType value) {
    this.appliesTo = value;
  }

  public static AdviceExpressionType.Builder<Void> builder() {
    return new AdviceExpressionType.Builder<Void>(null, null, false);
  }

  public static AdviceExpressionType.Builder<Void> copyOf(final AdviceExpressionType other) {
    return new AdviceExpressionType.Builder<Void>(null, other, true);
  }

  public static AdviceExpressionType.Builder<Void> copyOf(final AdviceExpressionType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new AdviceExpressionType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static AdviceExpressionType.Builder<Void> copyExcept(final AdviceExpressionType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static AdviceExpressionType.Builder<Void> copyOnly(final AdviceExpressionType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((("(attributeAssignmentExpression = " + attributeAssignmentExpression) + "), ") + "(adviceId = ") + adviceId) + "), ") + "(appliesTo = ") + appliesTo) + ") ");
  }

  @Override
  public AdviceExpressionType clone() throws CloneNotSupportedException {
    final AdviceExpressionType newObject = ((AdviceExpressionType) super.clone());
    if (this.attributeAssignmentExpression == null) {
      newObject.attributeAssignmentExpression = null;
    } else {
      newObject.attributeAssignmentExpression = new ArrayList<AttributeAssignmentExpressionType>();
      for (AttributeAssignmentExpressionType item : this.attributeAssignmentExpression) {
        newObject.attributeAssignmentExpression.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.attributeAssignmentExpression_RO =
        ((attributeAssignmentExpression == null) ? null : Collections
            .unmodifiableList(newObject.attributeAssignmentExpression));
    return newObject;
  }

  public List<AttributeAssignmentExpressionType> getAttributeAssignmentExpression() {
    if (this.attributeAssignmentExpression == null) {
      this.attributeAssignmentExpression = new ArrayList<AttributeAssignmentExpressionType>();
    }
    if (this.attributeAssignmentExpression_RO == null) {
      this.attributeAssignmentExpression_RO =
          ((attributeAssignmentExpression == null) ? null : Collections
              .unmodifiableList(this.attributeAssignmentExpression));
    }
    return this.attributeAssignmentExpression_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final AdviceExpressionType _product;
    private List<AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>> attributeAssignmentExpression;
    private String adviceId;
    private EffectType appliesTo;

    public Builder(final TParentBuilder parentBuilder, final AdviceExpressionType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.attributeAssignmentExpression == null) {
          this.attributeAssignmentExpression = null;
        } else {
          this.attributeAssignmentExpression =
              new ArrayList<AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>>();
          for (AttributeAssignmentExpressionType _item : other.attributeAssignmentExpression) {
            this.attributeAssignmentExpression
                .add(((_item == null)
                    ? null
                    : new AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>(
                        this, _item, true)));
          }
        }
        this.adviceId = other.adviceId;
        this.appliesTo = other.appliesTo;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final AdviceExpressionType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree attributeAssignmentExpressionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeAssignmentExpression"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (attributeAssignmentExpressionPropertyTree != null)
            : ((attributeAssignmentExpressionPropertyTree == null) || (!attributeAssignmentExpressionPropertyTree
                .isLeaf())))) {
          if (other.attributeAssignmentExpression == null) {
            this.attributeAssignmentExpression = null;
          } else {
            this.attributeAssignmentExpression =
                new ArrayList<AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>>();
            for (AttributeAssignmentExpressionType _item : other.attributeAssignmentExpression) {
              this.attributeAssignmentExpression
                  .add(((_item == null)
                      ? null
                      : new AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>(
                          this, _item, true, attributeAssignmentExpressionPropertyTree, treeUse)));
            }
          }
        }
        final PropertyTree adviceIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("adviceId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (adviceIdPropertyTree != null)
            : ((adviceIdPropertyTree == null) || (!adviceIdPropertyTree.isLeaf())))) {
          this.adviceId = other.adviceId;
        }
        final PropertyTree appliesToPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("appliesTo"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (appliesToPropertyTree != null)
            : ((appliesToPropertyTree == null) || (!appliesToPropertyTree.isLeaf())))) {
          this.appliesTo = other.appliesTo;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends AdviceExpressionType> P init(final P product) {
      if (this.attributeAssignmentExpression != null) {
        final List<AttributeAssignmentExpressionType> attributeAssignmentExpression =
            new ArrayList<AttributeAssignmentExpressionType>(this.attributeAssignmentExpression
                .size());
        for (AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>> _item : this.attributeAssignmentExpression) {
          attributeAssignmentExpression.add(_item.build());
        }
        product.attributeAssignmentExpression = attributeAssignmentExpression;
      }
      product.attributeAssignmentExpression_RO =
          ((attributeAssignmentExpression == null) ? null : Collections
              .unmodifiableList(product.attributeAssignmentExpression));
      product.adviceId = this.adviceId;
      product.appliesTo = this.appliesTo;
      return product;
    }

    public AdviceExpressionType.Builder<TParentBuilder> addAttributeAssignmentExpression(
        final List<? extends AttributeAssignmentExpressionType> attributeAssignmentExpression) {
      if (this.attributeAssignmentExpression == null) {
        this.attributeAssignmentExpression =
            new ArrayList<AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>>();
      }
      for (AttributeAssignmentExpressionType _item : attributeAssignmentExpression) {
        this.attributeAssignmentExpression
            .add(new AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>(
                this, _item, false));
      }
      return this;
    }

    public AdviceExpressionType.Builder<TParentBuilder> withAttributeAssignmentExpression(
        final List<? extends AttributeAssignmentExpressionType> attributeAssignmentExpression) {
      if (this.attributeAssignmentExpression != null) {
        this.attributeAssignmentExpression.clear();
      }
      return addAttributeAssignmentExpression(attributeAssignmentExpression);
    }

    public AdviceExpressionType.Builder<TParentBuilder> addAttributeAssignmentExpression(
        AttributeAssignmentExpressionType... attributeAssignmentExpression) {
      addAttributeAssignmentExpression(Arrays.asList(attributeAssignmentExpression));
      return this;
    }

    public AdviceExpressionType.Builder<TParentBuilder> withAttributeAssignmentExpression(
        AttributeAssignmentExpressionType... attributeAssignmentExpression) {
      withAttributeAssignmentExpression(Arrays.asList(attributeAssignmentExpression));
      return this;
    }

    public AttributeAssignmentExpressionType.Builder<? extends AdviceExpressionType.Builder<TParentBuilder>> addAttributeAssignmentExpression() {
      if (this.attributeAssignmentExpression == null) {
        this.attributeAssignmentExpression =
            new ArrayList<AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>>();
      }
      final AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>> attributeAssignmentExpressionBuilder =
          new AttributeAssignmentExpressionType.Builder<AdviceExpressionType.Builder<TParentBuilder>>(
              this, null, false);
      this.attributeAssignmentExpression.add(attributeAssignmentExpressionBuilder);
      return attributeAssignmentExpressionBuilder;
    }

    public AdviceExpressionType.Builder<TParentBuilder> withAdviceId(final String adviceId) {
      this.adviceId = adviceId;
      return this;
    }

    public AdviceExpressionType.Builder<TParentBuilder> withAppliesTo(final EffectType appliesTo) {
      this.appliesTo = appliesTo;
      return this;
    }

    public AdviceExpressionType build() {
      if (this._product == null) {
        return this.init(new AdviceExpressionType());
      } else {
        return ((AdviceExpressionType) this._product);
      }
    }

  }

  public static class Select extends
      AdviceExpressionType.Selector<AdviceExpressionType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static AdviceExpressionType.Select _root() {
      return new AdviceExpressionType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AttributeAssignmentExpressionType.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>> attributeAssignmentExpression =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>> adviceId =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>> appliesTo =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.attributeAssignmentExpression != null) {
        products.put("attributeAssignmentExpression", this.attributeAssignmentExpression.init());
      }
      if (this.adviceId != null) {
        products.put("adviceId", this.adviceId.init());
      }
      if (this.appliesTo != null) {
        products.put("appliesTo", this.appliesTo.init());
      }
      return products;
    }

    public AttributeAssignmentExpressionType.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>> attributeAssignmentExpression() {
      return ((this.attributeAssignmentExpression == null)
          ? this.attributeAssignmentExpression =
              new AttributeAssignmentExpressionType.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>>(
                  this._root, this, "attributeAssignmentExpression")
          : this.attributeAssignmentExpression);
    }

    public com.kscs.util.jaxb.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>> adviceId() {
      return ((this.adviceId == null) ? this.adviceId =
          new com.kscs.util.jaxb.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>>(
              this._root, this, "adviceId") : this.adviceId);
    }

    public com.kscs.util.jaxb.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>> appliesTo() {
      return ((this.appliesTo == null) ? this.appliesTo =
          new com.kscs.util.jaxb.Selector<TRoot, AdviceExpressionType.Selector<TRoot, TParent>>(
              this._root, this, "appliesTo") : this.appliesTo);
    }

  }

}
