//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for VariableReferenceType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="VariableReferenceType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}ExpressionType"&gt;
 *       &lt;attribute name="VariableId" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "VariableReferenceType")
public class VariableReferenceType extends ExpressionType implements Cloneable {

  @XmlAttribute(name = "VariableId", required = true)
  protected String variableId;

  /**
   * Gets the value of the variableId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getVariableId() {
    return variableId;
  }

  /**
   * Sets the value of the variableId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setVariableId(String value) {
    this.variableId = value;
  }

  public static VariableReferenceType.Builder<Void> builder() {
    return new VariableReferenceType.Builder<Void>(null, null, false);
  }

  public static VariableReferenceType.Builder<Void> copyOf(final VariableReferenceType other) {
    return new VariableReferenceType.Builder<Void>(null, other, true);
  }

  public static VariableReferenceType.Builder<Void> copyOf(final VariableReferenceType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new VariableReferenceType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static VariableReferenceType.Builder<Void> copyExcept(final VariableReferenceType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static VariableReferenceType.Builder<Void> copyOnly(final VariableReferenceType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((super.toString() + "(variableId = ") + variableId) + ") ");
  }

  @Override
  public VariableReferenceType clone() throws CloneNotSupportedException {
    final VariableReferenceType newObject = ((VariableReferenceType) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> extends ExpressionType.Builder<TParentBuilder> {

    private String variableId;

    public Builder(final TParentBuilder parentBuilder, final VariableReferenceType other,
        final boolean copy) {
      super(parentBuilder, other, copy);
      if (copy) {
        this.variableId = other.variableId;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final VariableReferenceType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      super(parentBuilder, other, copy);
      if (copy) {
        final PropertyTree variableIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("variableId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (variableIdPropertyTree != null)
            : ((variableIdPropertyTree == null) || (!variableIdPropertyTree.isLeaf())))) {
          this.variableId = other.variableId;
        }
      }
    }

    protected <P extends VariableReferenceType> P init(final P product) {
      product.variableId = this.variableId;
      return super.init(product);
    }

    public VariableReferenceType.Builder<TParentBuilder> withVariableId(final String variableId) {
      this.variableId = variableId;
      return this;
    }

    public VariableReferenceType build() {
      if (this._product == null) {
        return this.init(new VariableReferenceType());
      } else {
        return ((VariableReferenceType) this._product);
      }
    }

  }

  public static class Select extends
      VariableReferenceType.Selector<VariableReferenceType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static VariableReferenceType.Select _root() {
      return new VariableReferenceType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends ExpressionType.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, VariableReferenceType.Selector<TRoot, TParent>> variableId =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.variableId != null) {
        products.put("variableId", this.variableId.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, VariableReferenceType.Selector<TRoot, TParent>> variableId() {
      return ((this.variableId == null) ? this.variableId =
          new com.kscs.util.jaxb.Selector<TRoot, VariableReferenceType.Selector<TRoot, TParent>>(
              this._root, this, "variableId") : this.variableId);
    }

  }

}
