//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAnyElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;
import org.w3c.dom.Element;

/**
 * <p>
 * Java class for StatusDetailType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StatusDetailType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;any processContents='lax' maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StatusDetailType", propOrder = {"any"})
public class StatusDetailType implements Cloneable {

  @XmlAnyElement(lax = true)
  protected List<Object> any;

  /**
   * Gets the value of the any property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the any property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getAny().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link Element } {@link Object }
   * 
   * 
   */
  public List<Object> getAny() {
    if (any == null) {
      any = new ArrayList<Object>();
    }
    return this.any;
  }

  public static StatusDetailType.Builder<Void> builder() {
    return new StatusDetailType.Builder<Void>(null, null, false);
  }

  public static StatusDetailType.Builder<Void> copyOf(final StatusDetailType other) {
    return new StatusDetailType.Builder<Void>(null, other, true);
  }

  public static StatusDetailType.Builder<Void> copyOf(final StatusDetailType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new StatusDetailType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static StatusDetailType.Builder<Void> copyExcept(final StatusDetailType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static StatusDetailType.Builder<Void> copyOnly(final StatusDetailType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(any = " + any) + ") ");
  }

  @Override
  public StatusDetailType clone() throws CloneNotSupportedException {
    final StatusDetailType newObject = ((StatusDetailType) super.clone());
    newObject.any = ((this.any == null) ? null : new ArrayList<Object>(this.any));
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final StatusDetailType _product;
    private List<Object> any;

    public Builder(final TParentBuilder parentBuilder, final StatusDetailType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.any = ((other.any == null) ? null : new ArrayList<Object>(other.any));
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final StatusDetailType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree anyPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("any"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (anyPropertyTree != null)
            : ((anyPropertyTree == null) || (!anyPropertyTree.isLeaf())))) {
          this.any = ((other.any == null) ? null : new ArrayList<Object>(other.any));
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends StatusDetailType> P init(final P product) {
      product.any = this.any;
      return product;
    }

    public StatusDetailType.Builder<TParentBuilder> addAny(final List<?> any) {
      if (this.any == null) {
        this.any = new ArrayList<Object>();
      }
      this.any.addAll(any);
      return this;
    }

    public StatusDetailType.Builder<TParentBuilder> withAny(final List<?> any) {
      if (this.any != null) {
        this.any.clear();
      }
      return addAny(any);
    }

    public StatusDetailType.Builder<TParentBuilder> addAny(Object... any) {
      addAny(Arrays.asList(any));
      return this;
    }

    public StatusDetailType.Builder<TParentBuilder> withAny(Object... any) {
      withAny(Arrays.asList(any));
      return this;
    }

    public StatusDetailType build() {
      if (this._product == null) {
        return this.init(new StatusDetailType());
      } else {
        return ((StatusDetailType) this._product);
      }
    }

  }

  public static class Select extends StatusDetailType.Selector<StatusDetailType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static StatusDetailType.Select _root() {
      return new StatusDetailType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, StatusDetailType.Selector<TRoot, TParent>> any =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.any != null) {
        products.put("any", this.any.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, StatusDetailType.Selector<TRoot, TParent>> any() {
      return ((this.any == null) ? this.any =
          new com.kscs.util.jaxb.Selector<TRoot, StatusDetailType.Selector<TRoot, TParent>>(
              this._root, this, "any") : this.any);
    }

  }

}
