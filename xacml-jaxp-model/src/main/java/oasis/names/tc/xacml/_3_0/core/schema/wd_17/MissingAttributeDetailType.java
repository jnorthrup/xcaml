//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for MissingAttributeDetailType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="MissingAttributeDetailType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AttributeValue" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="Category" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="AttributeId" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="DataType" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="Issuer" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "MissingAttributeDetailType", propOrder = {"attributeValue"})
public class MissingAttributeDetailType implements Cloneable {

  @XmlElement(name = "AttributeValue")
  protected List<AttributeValueType> attributeValue;
  @XmlAttribute(name = "Category", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String category;
  @XmlAttribute(name = "AttributeId", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String attributeId;
  @XmlAttribute(name = "DataType", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String dataType;
  @XmlAttribute(name = "Issuer")
  protected String issuer;

  /**
   * Gets the value of the attributeValue property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the attributeValue property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getAttributeValue().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link AttributeValueType }
   * 
   * 
   */
  public List<AttributeValueType> getAttributeValue() {
    if (attributeValue == null) {
      attributeValue = new ArrayList<AttributeValueType>();
    }
    return this.attributeValue;
  }

  /**
   * Gets the value of the category property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getCategory() {
    return category;
  }

  /**
   * Sets the value of the category property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setCategory(String value) {
    this.category = value;
  }

  /**
   * Gets the value of the attributeId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getAttributeId() {
    return attributeId;
  }

  /**
   * Sets the value of the attributeId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setAttributeId(String value) {
    this.attributeId = value;
  }

  /**
   * Gets the value of the dataType property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getDataType() {
    return dataType;
  }

  /**
   * Sets the value of the dataType property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setDataType(String value) {
    this.dataType = value;
  }

  /**
   * Gets the value of the issuer property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getIssuer() {
    return issuer;
  }

  /**
   * Sets the value of the issuer property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setIssuer(String value) {
    this.issuer = value;
  }

  public static MissingAttributeDetailType.Builder<Void> builder() {
    return new MissingAttributeDetailType.Builder<Void>(null, null, false);
  }

  public static MissingAttributeDetailType.Builder<Void> copyOf(
      final MissingAttributeDetailType other) {
    return new MissingAttributeDetailType.Builder<Void>(null, other, true);
  }

  public static MissingAttributeDetailType.Builder<Void> copyOf(
      final MissingAttributeDetailType other, final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    return new MissingAttributeDetailType.Builder<Void>(null, other, true, propertyTree,
        propertyTreeUse);
  }

  public static MissingAttributeDetailType.Builder<Void> copyExcept(
      final MissingAttributeDetailType other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static MissingAttributeDetailType.Builder<Void> copyOnly(
      final MissingAttributeDetailType other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((((((((("(attributeValue = " + attributeValue) + "), ") + "(category = ") + category) + "), ") + "(attributeId = ") + attributeId) + "), ") + "(dataType = ") + dataType) + "), ") + "(issuer = ") + issuer) + ") ");
  }

  @Override
  public MissingAttributeDetailType clone() throws CloneNotSupportedException {
    final MissingAttributeDetailType newObject = ((MissingAttributeDetailType) super.clone());
    if (this.attributeValue == null) {
      newObject.attributeValue = null;
    } else {
      newObject.attributeValue = new ArrayList<AttributeValueType>();
      for (AttributeValueType item : this.attributeValue) {
        newObject.attributeValue.add(((item == null) ? null : item.clone()));
      }
    }
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final MissingAttributeDetailType _product;
    private List<AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>> attributeValue;
    private String category;
    private String attributeId;
    private String dataType;
    private String issuer;

    public Builder(final TParentBuilder parentBuilder, final MissingAttributeDetailType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.attributeValue == null) {
          this.attributeValue = null;
        } else {
          this.attributeValue =
              new ArrayList<AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>>();
          for (AttributeValueType _item : other.attributeValue) {
            this.attributeValue
                .add(((_item == null)
                    ? null
                    : new AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>(
                        this, _item, true)));
          }
        }
        this.category = other.category;
        this.attributeId = other.attributeId;
        this.dataType = other.dataType;
        this.issuer = other.issuer;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final MissingAttributeDetailType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree attributeValuePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeValue"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributeValuePropertyTree != null)
            : ((attributeValuePropertyTree == null) || (!attributeValuePropertyTree.isLeaf())))) {
          if (other.attributeValue == null) {
            this.attributeValue = null;
          } else {
            this.attributeValue =
                new ArrayList<AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>>();
            for (AttributeValueType _item : other.attributeValue) {
              this.attributeValue
                  .add(((_item == null)
                      ? null
                      : new AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>(
                          this, _item, true, attributeValuePropertyTree, treeUse)));
            }
          }
        }
        final PropertyTree categoryPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("category"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (categoryPropertyTree != null)
            : ((categoryPropertyTree == null) || (!categoryPropertyTree.isLeaf())))) {
          this.category = other.category;
        }
        final PropertyTree attributeIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributeIdPropertyTree != null)
            : ((attributeIdPropertyTree == null) || (!attributeIdPropertyTree.isLeaf())))) {
          this.attributeId = other.attributeId;
        }
        final PropertyTree dataTypePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("dataType"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (dataTypePropertyTree != null)
            : ((dataTypePropertyTree == null) || (!dataTypePropertyTree.isLeaf())))) {
          this.dataType = other.dataType;
        }
        final PropertyTree issuerPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("issuer"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (issuerPropertyTree != null)
            : ((issuerPropertyTree == null) || (!issuerPropertyTree.isLeaf())))) {
          this.issuer = other.issuer;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends MissingAttributeDetailType> P init(final P product) {
      if (this.attributeValue != null) {
        final List<AttributeValueType> attributeValue =
            new ArrayList<AttributeValueType>(this.attributeValue.size());
        for (AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>> _item : this.attributeValue) {
          attributeValue.add(_item.build());
        }
        product.attributeValue = attributeValue;
      }
      product.category = this.category;
      product.attributeId = this.attributeId;
      product.dataType = this.dataType;
      product.issuer = this.issuer;
      return product;
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> addAttributeValue(
        final List<? extends AttributeValueType> attributeValue) {
      if (this.attributeValue == null) {
        this.attributeValue =
            new ArrayList<AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>>();
      }
      for (AttributeValueType _item : attributeValue) {
        this.attributeValue
            .add(new AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>(
                this, _item, false));
      }
      return this;
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> withAttributeValue(
        final List<? extends AttributeValueType> attributeValue) {
      if (this.attributeValue != null) {
        this.attributeValue.clear();
      }
      return addAttributeValue(attributeValue);
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> addAttributeValue(
        AttributeValueType... attributeValue) {
      addAttributeValue(Arrays.asList(attributeValue));
      return this;
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> withAttributeValue(
        AttributeValueType... attributeValue) {
      withAttributeValue(Arrays.asList(attributeValue));
      return this;
    }

    public AttributeValueType.Builder<? extends MissingAttributeDetailType.Builder<TParentBuilder>> addAttributeValue() {
      if (this.attributeValue == null) {
        this.attributeValue =
            new ArrayList<AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>>();
      }
      final AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>> attributeValueBuilder =
          new AttributeValueType.Builder<MissingAttributeDetailType.Builder<TParentBuilder>>(this,
              null, false);
      this.attributeValue.add(attributeValueBuilder);
      return attributeValueBuilder;
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> withCategory(final String category) {
      this.category = category;
      return this;
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> withAttributeId(
        final String attributeId) {
      this.attributeId = attributeId;
      return this;
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> withDataType(final String dataType) {
      this.dataType = dataType;
      return this;
    }

    public MissingAttributeDetailType.Builder<TParentBuilder> withIssuer(final String issuer) {
      this.issuer = issuer;
      return this;
    }

    public MissingAttributeDetailType build() {
      if (this._product == null) {
        return this.init(new MissingAttributeDetailType());
      } else {
        return ((MissingAttributeDetailType) this._product);
      }
    }

  }

  public static class Select extends
      MissingAttributeDetailType.Selector<MissingAttributeDetailType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static MissingAttributeDetailType.Select _root() {
      return new MissingAttributeDetailType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AttributeValueType.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> attributeValue =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> category =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> attributeId =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> dataType =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> issuer =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.attributeValue != null) {
        products.put("attributeValue", this.attributeValue.init());
      }
      if (this.category != null) {
        products.put("category", this.category.init());
      }
      if (this.attributeId != null) {
        products.put("attributeId", this.attributeId.init());
      }
      if (this.dataType != null) {
        products.put("dataType", this.dataType.init());
      }
      if (this.issuer != null) {
        products.put("issuer", this.issuer.init());
      }
      return products;
    }

    public AttributeValueType.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> attributeValue() {
      return ((this.attributeValue == null)
          ? this.attributeValue =
              new AttributeValueType.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>>(
                  this._root, this, "attributeValue") : this.attributeValue);
    }

    public com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> category() {
      return ((this.category == null)
          ? this.category =
              new com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>>(
                  this._root, this, "category") : this.category);
    }

    public com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> attributeId() {
      return ((this.attributeId == null)
          ? this.attributeId =
              new com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>>(
                  this._root, this, "attributeId") : this.attributeId);
    }

    public com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> dataType() {
      return ((this.dataType == null)
          ? this.dataType =
              new com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>>(
                  this._root, this, "dataType") : this.dataType);
    }

    public com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>> issuer() {
      return ((this.issuer == null)
          ? this.issuer =
              new com.kscs.util.jaxb.Selector<TRoot, MissingAttributeDetailType.Selector<TRoot, TParent>>(
                  this._root, this, "issuer") : this.issuer);
    }

  }

}
