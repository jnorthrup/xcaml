//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for PolicyType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="PolicyType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Description" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}PolicyIssuer" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}PolicyDefaults" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Target"/&gt;
 *         &lt;choice maxOccurs="unbounded"&gt;
 *           &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}CombinerParameters" minOccurs="0"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}RuleCombinerParameters" minOccurs="0"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}VariableDefinition"/&gt;
 *           &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}Rule"/&gt;
 *         &lt;/choice&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}ObligationExpressions" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AdviceExpressions" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="PolicyId" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="Version" use="required" type="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}VersionType" /&gt;
 *       &lt;attribute name="RuleCombiningAlgId" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="MaxDelegationDepth" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "PolicyType", propOrder = {
    "description", "policyIssuer", "policyDefaults", "target",
    "combinerParametersOrRuleCombinerParametersOrVariableDefinition", "obligationExpressions",
    "adviceExpressions"})
public class PolicyType implements Cloneable {

  @XmlElement(name = "Description")
  protected String description;
  @XmlElement(name = "PolicyIssuer")
  protected PolicyIssuerType policyIssuer;
  @XmlElement(name = "PolicyDefaults")
  protected DefaultsType policyDefaults;
  @XmlElement(name = "Target", required = true)
  protected TargetType target;
  @XmlElements({
      @XmlElement(name = "CombinerParameters", type = CombinerParametersType.class),
      @XmlElement(name = "RuleCombinerParameters", type = RuleCombinerParametersType.class),
      @XmlElement(name = "VariableDefinition", type = VariableDefinitionType.class),
      @XmlElement(name = "Rule", type = RuleType.class)})
  protected List<Object> combinerParametersOrRuleCombinerParametersOrVariableDefinition;
  @XmlElement(name = "ObligationExpressions")
  protected ObligationExpressionsType obligationExpressions;
  @XmlElement(name = "AdviceExpressions")
  protected AdviceExpressionsType adviceExpressions;
  @XmlAttribute(name = "PolicyId", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String policyId;
  @XmlAttribute(name = "Version", required = true)
  protected String version;
  @XmlAttribute(name = "RuleCombiningAlgId", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String ruleCombiningAlgId;
  @XmlAttribute(name = "MaxDelegationDepth")
  protected BigInteger maxDelegationDepth;
  protected transient List<Object> combinerParametersOrRuleCombinerParametersOrVariableDefinition_RO =
      null;

  /**
   * Gets the value of the description property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getDescription() {
    return description;
  }

  /**
   * Sets the value of the description property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setDescription(String value) {
    this.description = value;
  }

  /**
   * Gets the value of the policyIssuer property.
   * 
   * @return possible object is {@link PolicyIssuerType }
   * 
   */
  public PolicyIssuerType getPolicyIssuer() {
    return policyIssuer;
  }

  /**
   * Sets the value of the policyIssuer property.
   * 
   * @param value allowed object is {@link PolicyIssuerType }
   * 
   */
  protected void setPolicyIssuer(PolicyIssuerType value) {
    this.policyIssuer = value;
  }

  /**
   * Gets the value of the policyDefaults property.
   * 
   * @return possible object is {@link DefaultsType }
   * 
   */
  public DefaultsType getPolicyDefaults() {
    return policyDefaults;
  }

  /**
   * Sets the value of the policyDefaults property.
   * 
   * @param value allowed object is {@link DefaultsType }
   * 
   */
  protected void setPolicyDefaults(DefaultsType value) {
    this.policyDefaults = value;
  }

  /**
   * Gets the value of the target property.
   * 
   * @return possible object is {@link TargetType }
   * 
   */
  public TargetType getTarget() {
    return target;
  }

  /**
   * Sets the value of the target property.
   * 
   * @param value allowed object is {@link TargetType }
   * 
   */
  protected void setTarget(TargetType value) {
    this.target = value;
  }

  /**
   * Gets the value of the obligationExpressions property.
   * 
   * @return possible object is {@link ObligationExpressionsType }
   * 
   */
  public ObligationExpressionsType getObligationExpressions() {
    return obligationExpressions;
  }

  /**
   * Sets the value of the obligationExpressions property.
   * 
   * @param value allowed object is {@link ObligationExpressionsType }
   * 
   */
  protected void setObligationExpressions(ObligationExpressionsType value) {
    this.obligationExpressions = value;
  }

  /**
   * Gets the value of the adviceExpressions property.
   * 
   * @return possible object is {@link AdviceExpressionsType }
   * 
   */
  public AdviceExpressionsType getAdviceExpressions() {
    return adviceExpressions;
  }

  /**
   * Sets the value of the adviceExpressions property.
   * 
   * @param value allowed object is {@link AdviceExpressionsType }
   * 
   */
  protected void setAdviceExpressions(AdviceExpressionsType value) {
    this.adviceExpressions = value;
  }

  /**
   * Gets the value of the policyId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getPolicyId() {
    return policyId;
  }

  /**
   * Sets the value of the policyId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setPolicyId(String value) {
    this.policyId = value;
  }

  /**
   * Gets the value of the version property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getVersion() {
    return version;
  }

  /**
   * Sets the value of the version property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setVersion(String value) {
    this.version = value;
  }

  /**
   * Gets the value of the ruleCombiningAlgId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getRuleCombiningAlgId() {
    return ruleCombiningAlgId;
  }

  /**
   * Sets the value of the ruleCombiningAlgId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setRuleCombiningAlgId(String value) {
    this.ruleCombiningAlgId = value;
  }

  /**
   * Gets the value of the maxDelegationDepth property.
   * 
   * @return possible object is {@link BigInteger }
   * 
   */
  public BigInteger getMaxDelegationDepth() {
    return maxDelegationDepth;
  }

  /**
   * Sets the value of the maxDelegationDepth property.
   * 
   * @param value allowed object is {@link BigInteger }
   * 
   */
  protected void setMaxDelegationDepth(BigInteger value) {
    this.maxDelegationDepth = value;
  }

  public static PolicyType.Builder<Void> builder() {
    return new PolicyType.Builder<Void>(null, null, false);
  }

  public static PolicyType.Builder<Void> copyOf(final PolicyType other) {
    return new PolicyType.Builder<Void>(null, other, true);
  }

  public static PolicyType.Builder<Void> copyOf(final PolicyType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new PolicyType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static PolicyType.Builder<Void> copyExcept(final PolicyType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static PolicyType.Builder<Void> copyOnly(final PolicyType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((((((((((((((((((((((((((("(description = " + description) + "), ") + "(policyIssuer = ") + policyIssuer) + "), ") + "(policyDefaults = ") + policyDefaults) + "), ") + "(target = ") + target) + "), ") + "(combinerParametersOrRuleCombinerParametersOrVariableDefinition = ") + combinerParametersOrRuleCombinerParametersOrVariableDefinition) + "), ") + "(obligationExpressions = ") + obligationExpressions) + "), ") + "(adviceExpressions = ") + adviceExpressions) + "), ") + "(policyId = ") + policyId) + "), ") + "(version = ") + version) + "), ") + "(ruleCombiningAlgId = ") + ruleCombiningAlgId) + "), ") + "(maxDelegationDepth = ") + maxDelegationDepth) + ") ");
  }

  @Override
  public PolicyType clone() throws CloneNotSupportedException {
    final PolicyType newObject = ((PolicyType) super.clone());
    newObject.policyIssuer = ((this.policyIssuer == null) ? null : this.policyIssuer.clone());
    newObject.policyDefaults = ((this.policyDefaults == null) ? null : this.policyDefaults.clone());
    newObject.target = ((this.target == null) ? null : this.target.clone());
    newObject.combinerParametersOrRuleCombinerParametersOrVariableDefinition =
        ((this.combinerParametersOrRuleCombinerParametersOrVariableDefinition == null) ? null
            : new ArrayList<Object>(
                this.combinerParametersOrRuleCombinerParametersOrVariableDefinition));
    newObject.combinerParametersOrRuleCombinerParametersOrVariableDefinition_RO =
        ((combinerParametersOrRuleCombinerParametersOrVariableDefinition == null)
            ? null
            : Collections
                .unmodifiableList(newObject.combinerParametersOrRuleCombinerParametersOrVariableDefinition));
    newObject.obligationExpressions =
        ((this.obligationExpressions == null) ? null : this.obligationExpressions.clone());
    newObject.adviceExpressions =
        ((this.adviceExpressions == null) ? null : this.adviceExpressions.clone());
    return newObject;
  }

  public List<Object> getCombinerParametersOrRuleCombinerParametersOrVariableDefinition() {
    if (this.combinerParametersOrRuleCombinerParametersOrVariableDefinition == null) {
      this.combinerParametersOrRuleCombinerParametersOrVariableDefinition = new ArrayList<Object>();
    }
    if (this.combinerParametersOrRuleCombinerParametersOrVariableDefinition_RO == null) {
      this.combinerParametersOrRuleCombinerParametersOrVariableDefinition_RO =
          ((combinerParametersOrRuleCombinerParametersOrVariableDefinition == null)
              ? null
              : Collections
                  .unmodifiableList(this.combinerParametersOrRuleCombinerParametersOrVariableDefinition));
    }
    return this.combinerParametersOrRuleCombinerParametersOrVariableDefinition_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final PolicyType _product;
    private String description;
    private PolicyIssuerType.Builder<PolicyType.Builder<TParentBuilder>> policyIssuer;
    private DefaultsType.Builder<PolicyType.Builder<TParentBuilder>> policyDefaults;
    private TargetType.Builder<PolicyType.Builder<TParentBuilder>> target;
    private List<Object> combinerParametersOrRuleCombinerParametersOrVariableDefinition;
    private ObligationExpressionsType.Builder<PolicyType.Builder<TParentBuilder>> obligationExpressions;
    private AdviceExpressionsType.Builder<PolicyType.Builder<TParentBuilder>> adviceExpressions;
    private String policyId;
    private String version;
    private String ruleCombiningAlgId;
    private BigInteger maxDelegationDepth;

    public Builder(final TParentBuilder parentBuilder, final PolicyType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.description = other.description;
        this.policyIssuer =
            ((other.policyIssuer == null) ? null
                : new PolicyIssuerType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                    other.policyIssuer, true));
        this.policyDefaults =
            ((other.policyDefaults == null) ? null
                : new DefaultsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                    other.policyDefaults, true));
        this.target =
            ((other.target == null) ? null
                : new TargetType.Builder<PolicyType.Builder<TParentBuilder>>(this, other.target,
                    true));
        this.combinerParametersOrRuleCombinerParametersOrVariableDefinition =
            ((other.combinerParametersOrRuleCombinerParametersOrVariableDefinition == null) ? null
                : new ArrayList<Object>(
                    other.combinerParametersOrRuleCombinerParametersOrVariableDefinition));
        this.obligationExpressions =
            ((other.obligationExpressions == null) ? null
                : new ObligationExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                    other.obligationExpressions, true));
        this.adviceExpressions =
            ((other.adviceExpressions == null) ? null
                : new AdviceExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                    other.adviceExpressions, true));
        this.policyId = other.policyId;
        this.version = other.version;
        this.ruleCombiningAlgId = other.ruleCombiningAlgId;
        this.maxDelegationDepth = other.maxDelegationDepth;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final PolicyType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree descriptionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("description"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (descriptionPropertyTree != null)
            : ((descriptionPropertyTree == null) || (!descriptionPropertyTree.isLeaf())))) {
          this.description = other.description;
        }
        final PropertyTree policyIssuerPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("policyIssuer"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (policyIssuerPropertyTree != null)
            : ((policyIssuerPropertyTree == null) || (!policyIssuerPropertyTree.isLeaf())))) {
          this.policyIssuer =
              ((other.policyIssuer == null) ? null
                  : new PolicyIssuerType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                      other.policyIssuer, true, policyIssuerPropertyTree, treeUse));
        }
        final PropertyTree policyDefaultsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("policyDefaults"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (policyDefaultsPropertyTree != null)
            : ((policyDefaultsPropertyTree == null) || (!policyDefaultsPropertyTree.isLeaf())))) {
          this.policyDefaults =
              ((other.policyDefaults == null) ? null
                  : new DefaultsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                      other.policyDefaults, true, policyDefaultsPropertyTree, treeUse));
        }
        final PropertyTree targetPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("target"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (targetPropertyTree != null)
            : ((targetPropertyTree == null) || (!targetPropertyTree.isLeaf())))) {
          this.target =
              ((other.target == null) ? null
                  : new TargetType.Builder<PolicyType.Builder<TParentBuilder>>(this, other.target,
                      true, targetPropertyTree, treeUse));
        }
        final PropertyTree combinerParametersOrRuleCombinerParametersOrVariableDefinitionPropertyTree =
            ((propertyTree == null) ? null : propertyTree
                .get("combinerParametersOrRuleCombinerParametersOrVariableDefinition"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (combinerParametersOrRuleCombinerParametersOrVariableDefinitionPropertyTree != null)
            : ((combinerParametersOrRuleCombinerParametersOrVariableDefinitionPropertyTree == null) || (!combinerParametersOrRuleCombinerParametersOrVariableDefinitionPropertyTree
                .isLeaf())))) {
          this.combinerParametersOrRuleCombinerParametersOrVariableDefinition =
              ((other.combinerParametersOrRuleCombinerParametersOrVariableDefinition == null)
                  ? null : new ArrayList<Object>(
                      other.combinerParametersOrRuleCombinerParametersOrVariableDefinition));
        }
        final PropertyTree obligationExpressionsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("obligationExpressions"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (obligationExpressionsPropertyTree != null)
            : ((obligationExpressionsPropertyTree == null) || (!obligationExpressionsPropertyTree
                .isLeaf())))) {
          this.obligationExpressions =
              ((other.obligationExpressions == null)
                  ? null
                  : new ObligationExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                      other.obligationExpressions, true, obligationExpressionsPropertyTree, treeUse));
        }
        final PropertyTree adviceExpressionsPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("adviceExpressions"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (adviceExpressionsPropertyTree != null)
            : ((adviceExpressionsPropertyTree == null) || (!adviceExpressionsPropertyTree.isLeaf())))) {
          this.adviceExpressions =
              ((other.adviceExpressions == null) ? null
                  : new AdviceExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                      other.adviceExpressions, true, adviceExpressionsPropertyTree, treeUse));
        }
        final PropertyTree policyIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("policyId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (policyIdPropertyTree != null)
            : ((policyIdPropertyTree == null) || (!policyIdPropertyTree.isLeaf())))) {
          this.policyId = other.policyId;
        }
        final PropertyTree versionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("version"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (versionPropertyTree != null)
            : ((versionPropertyTree == null) || (!versionPropertyTree.isLeaf())))) {
          this.version = other.version;
        }
        final PropertyTree ruleCombiningAlgIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("ruleCombiningAlgId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (ruleCombiningAlgIdPropertyTree != null)
            : ((ruleCombiningAlgIdPropertyTree == null) || (!ruleCombiningAlgIdPropertyTree
                .isLeaf())))) {
          this.ruleCombiningAlgId = other.ruleCombiningAlgId;
        }
        final PropertyTree maxDelegationDepthPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("maxDelegationDepth"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (maxDelegationDepthPropertyTree != null)
            : ((maxDelegationDepthPropertyTree == null) || (!maxDelegationDepthPropertyTree
                .isLeaf())))) {
          this.maxDelegationDepth = other.maxDelegationDepth;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends PolicyType> P init(final P product) {
      product.description = this.description;
      product.policyIssuer = ((this.policyIssuer == null) ? null : this.policyIssuer.build());
      product.policyDefaults = ((this.policyDefaults == null) ? null : this.policyDefaults.build());
      product.target = ((this.target == null) ? null : this.target.build());
      product.combinerParametersOrRuleCombinerParametersOrVariableDefinition =
          this.combinerParametersOrRuleCombinerParametersOrVariableDefinition;
      product.combinerParametersOrRuleCombinerParametersOrVariableDefinition_RO =
          ((combinerParametersOrRuleCombinerParametersOrVariableDefinition == null)
              ? null
              : Collections
                  .unmodifiableList(product.combinerParametersOrRuleCombinerParametersOrVariableDefinition));
      product.obligationExpressions =
          ((this.obligationExpressions == null) ? null : this.obligationExpressions.build());
      product.adviceExpressions =
          ((this.adviceExpressions == null) ? null : this.adviceExpressions.build());
      product.policyId = this.policyId;
      product.version = this.version;
      product.ruleCombiningAlgId = this.ruleCombiningAlgId;
      product.maxDelegationDepth = this.maxDelegationDepth;
      return product;
    }

    public PolicyType.Builder<TParentBuilder> withDescription(final String description) {
      this.description = description;
      return this;
    }

    public PolicyType.Builder<TParentBuilder> withPolicyIssuer(final PolicyIssuerType policyIssuer) {
      this.policyIssuer =
          ((policyIssuer == null) ? null
              : new PolicyIssuerType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                  policyIssuer, false));
      return this;
    }

    public PolicyIssuerType.Builder<? extends PolicyType.Builder<TParentBuilder>> withPolicyIssuer() {
      return this.policyIssuer =
          new PolicyIssuerType.Builder<PolicyType.Builder<TParentBuilder>>(this, null, false);
    }

    public PolicyType.Builder<TParentBuilder> withPolicyDefaults(final DefaultsType policyDefaults) {
      this.policyDefaults =
          ((policyDefaults == null) ? null
              : new DefaultsType.Builder<PolicyType.Builder<TParentBuilder>>(this, policyDefaults,
                  false));
      return this;
    }

    public DefaultsType.Builder<? extends PolicyType.Builder<TParentBuilder>> withPolicyDefaults() {
      return this.policyDefaults =
          new DefaultsType.Builder<PolicyType.Builder<TParentBuilder>>(this, null, false);
    }

    public PolicyType.Builder<TParentBuilder> withTarget(final TargetType target) {
      this.target =
          ((target == null) ? null : new TargetType.Builder<PolicyType.Builder<TParentBuilder>>(
              this, target, false));
      return this;
    }

    public TargetType.Builder<? extends PolicyType.Builder<TParentBuilder>> withTarget() {
      return this.target =
          new TargetType.Builder<PolicyType.Builder<TParentBuilder>>(this, null, false);
    }

    public PolicyType.Builder<TParentBuilder> addCombinerParametersOrRuleCombinerParametersOrVariableDefinition(
        final List<?> combinerParametersOrRuleCombinerParametersOrVariableDefinition) {
      if (this.combinerParametersOrRuleCombinerParametersOrVariableDefinition == null) {
        this.combinerParametersOrRuleCombinerParametersOrVariableDefinition =
            new ArrayList<Object>();
      }
      this.combinerParametersOrRuleCombinerParametersOrVariableDefinition
          .addAll(combinerParametersOrRuleCombinerParametersOrVariableDefinition);
      return this;
    }

    public PolicyType.Builder<TParentBuilder> withCombinerParametersOrRuleCombinerParametersOrVariableDefinition(
        final List<?> combinerParametersOrRuleCombinerParametersOrVariableDefinition) {
      if (this.combinerParametersOrRuleCombinerParametersOrVariableDefinition != null) {
        this.combinerParametersOrRuleCombinerParametersOrVariableDefinition.clear();
      }
      return addCombinerParametersOrRuleCombinerParametersOrVariableDefinition(combinerParametersOrRuleCombinerParametersOrVariableDefinition);
    }

    public PolicyType.Builder<TParentBuilder> addCombinerParametersOrRuleCombinerParametersOrVariableDefinition(
        Object... combinerParametersOrRuleCombinerParametersOrVariableDefinition) {
      addCombinerParametersOrRuleCombinerParametersOrVariableDefinition(Arrays
          .asList(combinerParametersOrRuleCombinerParametersOrVariableDefinition));
      return this;
    }

    public PolicyType.Builder<TParentBuilder> withCombinerParametersOrRuleCombinerParametersOrVariableDefinition(
        Object... combinerParametersOrRuleCombinerParametersOrVariableDefinition) {
      withCombinerParametersOrRuleCombinerParametersOrVariableDefinition(Arrays
          .asList(combinerParametersOrRuleCombinerParametersOrVariableDefinition));
      return this;
    }

    public PolicyType.Builder<TParentBuilder> withObligationExpressions(
        final ObligationExpressionsType obligationExpressions) {
      this.obligationExpressions =
          ((obligationExpressions == null) ? null
              : new ObligationExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                  obligationExpressions, false));
      return this;
    }

    public ObligationExpressionsType.Builder<? extends PolicyType.Builder<TParentBuilder>> withObligationExpressions() {
      return this.obligationExpressions =
          new ObligationExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this, null,
              false);
    }

    public PolicyType.Builder<TParentBuilder> withAdviceExpressions(
        final AdviceExpressionsType adviceExpressions) {
      this.adviceExpressions =
          ((adviceExpressions == null) ? null
              : new AdviceExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this,
                  adviceExpressions, false));
      return this;
    }

    public AdviceExpressionsType.Builder<? extends PolicyType.Builder<TParentBuilder>> withAdviceExpressions() {
      return this.adviceExpressions =
          new AdviceExpressionsType.Builder<PolicyType.Builder<TParentBuilder>>(this, null, false);
    }

    public PolicyType.Builder<TParentBuilder> withPolicyId(final String policyId) {
      this.policyId = policyId;
      return this;
    }

    public PolicyType.Builder<TParentBuilder> withVersion(final String version) {
      this.version = version;
      return this;
    }

    public PolicyType.Builder<TParentBuilder> withRuleCombiningAlgId(final String ruleCombiningAlgId) {
      this.ruleCombiningAlgId = ruleCombiningAlgId;
      return this;
    }

    public PolicyType.Builder<TParentBuilder> withMaxDelegationDepth(
        final BigInteger maxDelegationDepth) {
      this.maxDelegationDepth = maxDelegationDepth;
      return this;
    }

    public PolicyType build() {
      if (this._product == null) {
        return this.init(new PolicyType());
      } else {
        return ((PolicyType) this._product);
      }
    }

  }

  public static class Select extends PolicyType.Selector<PolicyType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static PolicyType.Select _root() {
      return new PolicyType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> description =
        null;
    private PolicyIssuerType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> policyIssuer =
        null;
    private DefaultsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> policyDefaults = null;
    private TargetType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> target = null;
    private com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> combinerParametersOrRuleCombinerParametersOrVariableDefinition =
        null;
    private ObligationExpressionsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> obligationExpressions =
        null;
    private AdviceExpressionsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> adviceExpressions =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> policyId = null;
    private com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> version = null;
    private com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> ruleCombiningAlgId =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> maxDelegationDepth =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.description != null) {
        products.put("description", this.description.init());
      }
      if (this.policyIssuer != null) {
        products.put("policyIssuer", this.policyIssuer.init());
      }
      if (this.policyDefaults != null) {
        products.put("policyDefaults", this.policyDefaults.init());
      }
      if (this.target != null) {
        products.put("target", this.target.init());
      }
      if (this.combinerParametersOrRuleCombinerParametersOrVariableDefinition != null) {
        products.put("combinerParametersOrRuleCombinerParametersOrVariableDefinition",
            this.combinerParametersOrRuleCombinerParametersOrVariableDefinition.init());
      }
      if (this.obligationExpressions != null) {
        products.put("obligationExpressions", this.obligationExpressions.init());
      }
      if (this.adviceExpressions != null) {
        products.put("adviceExpressions", this.adviceExpressions.init());
      }
      if (this.policyId != null) {
        products.put("policyId", this.policyId.init());
      }
      if (this.version != null) {
        products.put("version", this.version.init());
      }
      if (this.ruleCombiningAlgId != null) {
        products.put("ruleCombiningAlgId", this.ruleCombiningAlgId.init());
      }
      if (this.maxDelegationDepth != null) {
        products.put("maxDelegationDepth", this.maxDelegationDepth.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> description() {
      return ((this.description == null) ? this.description =
          new com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root,
              this, "description") : this.description);
    }

    public PolicyIssuerType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> policyIssuer() {
      return ((this.policyIssuer == null) ? this.policyIssuer =
          new PolicyIssuerType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root,
              this, "policyIssuer") : this.policyIssuer);
    }

    public DefaultsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> policyDefaults() {
      return ((this.policyDefaults == null) ? this.policyDefaults =
          new DefaultsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root, this,
              "policyDefaults") : this.policyDefaults);
    }

    public TargetType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> target() {
      return ((this.target == null) ? this.target =
          new TargetType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root, this,
              "target") : this.target);
    }

    public com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> combinerParametersOrRuleCombinerParametersOrVariableDefinition() {
      return ((this.combinerParametersOrRuleCombinerParametersOrVariableDefinition == null)
          ? this.combinerParametersOrRuleCombinerParametersOrVariableDefinition =
              new com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(
                  this._root, this,
                  "combinerParametersOrRuleCombinerParametersOrVariableDefinition")
          : this.combinerParametersOrRuleCombinerParametersOrVariableDefinition);
    }

    public ObligationExpressionsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> obligationExpressions() {
      return ((this.obligationExpressions == null) ? this.obligationExpressions =
          new ObligationExpressionsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(
              this._root, this, "obligationExpressions") : this.obligationExpressions);
    }

    public AdviceExpressionsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> adviceExpressions() {
      return ((this.adviceExpressions == null) ? this.adviceExpressions =
          new AdviceExpressionsType.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(
              this._root, this, "adviceExpressions") : this.adviceExpressions);
    }

    public com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> policyId() {
      return ((this.policyId == null) ? this.policyId =
          new com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root,
              this, "policyId") : this.policyId);
    }

    public com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> version() {
      return ((this.version == null) ? this.version =
          new com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root,
              this, "version") : this.version);
    }

    public com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> ruleCombiningAlgId() {
      return ((this.ruleCombiningAlgId == null) ? this.ruleCombiningAlgId =
          new com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root,
              this, "ruleCombiningAlgId") : this.ruleCombiningAlgId);
    }

    public com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>> maxDelegationDepth() {
      return ((this.maxDelegationDepth == null) ? this.maxDelegationDepth =
          new com.kscs.util.jaxb.Selector<TRoot, PolicyType.Selector<TRoot, TParent>>(this._root,
              this, "maxDelegationDepth") : this.maxDelegationDepth);
    }

  }

}
