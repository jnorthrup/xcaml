//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.29 at 09:44:49 AM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for StatusType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="StatusType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}StatusCode"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}StatusMessage" minOccurs="0"/&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}StatusDetail" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "StatusType", propOrder = {"statusCode", "statusMessage", "statusDetail"})
public class StatusType implements Cloneable {

  @XmlElement(name = "StatusCode", required = true)
  protected StatusCodeType statusCode;
  @XmlElement(name = "StatusMessage")
  protected String statusMessage;
  @XmlElement(name = "StatusDetail")
  protected StatusDetailType statusDetail;

  /**
   * Gets the value of the statusCode property.
   * 
   * @return possible object is {@link StatusCodeType }
   * 
   */
  public StatusCodeType getStatusCode() {
    return statusCode;
  }

  /**
   * Sets the value of the statusCode property.
   * 
   * @param value allowed object is {@link StatusCodeType }
   * 
   */
  public void setStatusCode(StatusCodeType value) {
    this.statusCode = value;
  }

  /**
   * Gets the value of the statusMessage property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getStatusMessage() {
    return statusMessage;
  }

  /**
   * Sets the value of the statusMessage property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setStatusMessage(String value) {
    this.statusMessage = value;
  }

  /**
   * Gets the value of the statusDetail property.
   * 
   * @return possible object is {@link StatusDetailType }
   * 
   */
  public StatusDetailType getStatusDetail() {
    return statusDetail;
  }

  /**
   * Sets the value of the statusDetail property.
   * 
   * @param value allowed object is {@link StatusDetailType }
   * 
   */
  public void setStatusDetail(StatusDetailType value) {
    this.statusDetail = value;
  }

  public static StatusType.Builder<Void> builder() {
    return new StatusType.Builder<Void>(null, null, false);
  }

  public static StatusType.Builder<Void> copyOf(final StatusType other) {
    return new StatusType.Builder<Void>(null, other, true);
  }

  public static StatusType.Builder<Void> copyOf(final StatusType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new StatusType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static StatusType.Builder<Void> copyExcept(final StatusType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static StatusType.Builder<Void> copyOnly(final StatusType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((("(statusCode = " + statusCode) + "), ") + "(statusMessage = ") + statusMessage) + "), ") + "(statusDetail = ") + statusDetail) + ") ");
  }

  @Override
  public StatusType clone() throws CloneNotSupportedException {
    final StatusType newObject = ((StatusType) super.clone());
    newObject.statusCode = ((this.statusCode == null) ? null : this.statusCode.clone());
    newObject.statusDetail = ((this.statusDetail == null) ? null : this.statusDetail.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final StatusType _product;
    private StatusCodeType.Builder<StatusType.Builder<TParentBuilder>> statusCode;
    private String statusMessage;
    private StatusDetailType.Builder<StatusType.Builder<TParentBuilder>> statusDetail;

    public Builder(final TParentBuilder parentBuilder, final StatusType other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.statusCode =
            ((other.statusCode == null) ? null
                : new StatusCodeType.Builder<StatusType.Builder<TParentBuilder>>(this,
                    other.statusCode, true));
        this.statusMessage = other.statusMessage;
        this.statusDetail =
            ((other.statusDetail == null) ? null
                : new StatusDetailType.Builder<StatusType.Builder<TParentBuilder>>(this,
                    other.statusDetail, true));
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final StatusType other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree statusCodePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("statusCode"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (statusCodePropertyTree != null)
            : ((statusCodePropertyTree == null) || (!statusCodePropertyTree.isLeaf())))) {
          this.statusCode =
              ((other.statusCode == null) ? null
                  : new StatusCodeType.Builder<StatusType.Builder<TParentBuilder>>(this,
                      other.statusCode, true, statusCodePropertyTree, treeUse));
        }
        final PropertyTree statusMessagePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("statusMessage"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (statusMessagePropertyTree != null)
            : ((statusMessagePropertyTree == null) || (!statusMessagePropertyTree.isLeaf())))) {
          this.statusMessage = other.statusMessage;
        }
        final PropertyTree statusDetailPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("statusDetail"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (statusDetailPropertyTree != null)
            : ((statusDetailPropertyTree == null) || (!statusDetailPropertyTree.isLeaf())))) {
          this.statusDetail =
              ((other.statusDetail == null) ? null
                  : new StatusDetailType.Builder<StatusType.Builder<TParentBuilder>>(this,
                      other.statusDetail, true, statusDetailPropertyTree, treeUse));
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends StatusType> P init(final P product) {
      product.statusCode = ((this.statusCode == null) ? null : this.statusCode.build());
      product.statusMessage = this.statusMessage;
      product.statusDetail = ((this.statusDetail == null) ? null : this.statusDetail.build());
      return product;
    }

    public StatusType.Builder<TParentBuilder> withStatusCode(final StatusCodeType statusCode) {
      this.statusCode =
          ((statusCode == null) ? null
              : new StatusCodeType.Builder<StatusType.Builder<TParentBuilder>>(this, statusCode,
                  false));
      return this;
    }

    public StatusCodeType.Builder<? extends StatusType.Builder<TParentBuilder>> withStatusCode() {
      return this.statusCode =
          new StatusCodeType.Builder<StatusType.Builder<TParentBuilder>>(this, null, false);
    }

    public StatusType.Builder<TParentBuilder> withStatusMessage(final String statusMessage) {
      this.statusMessage = statusMessage;
      return this;
    }

    public StatusType.Builder<TParentBuilder> withStatusDetail(final StatusDetailType statusDetail) {
      this.statusDetail =
          ((statusDetail == null) ? null
              : new StatusDetailType.Builder<StatusType.Builder<TParentBuilder>>(this,
                  statusDetail, false));
      return this;
    }

    public StatusDetailType.Builder<? extends StatusType.Builder<TParentBuilder>> withStatusDetail() {
      return this.statusDetail =
          new StatusDetailType.Builder<StatusType.Builder<TParentBuilder>>(this, null, false);
    }

    public StatusType build() {
      if (this._product == null) {
        return this.init(new StatusType());
      } else {
        return ((StatusType) this._product);
      }
    }

  }

  public static class Select extends StatusType.Selector<StatusType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static StatusType.Select _root() {
      return new StatusType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private StatusCodeType.Selector<TRoot, StatusType.Selector<TRoot, TParent>> statusCode = null;
    private com.kscs.util.jaxb.Selector<TRoot, StatusType.Selector<TRoot, TParent>> statusMessage =
        null;
    private StatusDetailType.Selector<TRoot, StatusType.Selector<TRoot, TParent>> statusDetail =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.statusCode != null) {
        products.put("statusCode", this.statusCode.init());
      }
      if (this.statusMessage != null) {
        products.put("statusMessage", this.statusMessage.init());
      }
      if (this.statusDetail != null) {
        products.put("statusDetail", this.statusDetail.init());
      }
      return products;
    }

    public StatusCodeType.Selector<TRoot, StatusType.Selector<TRoot, TParent>> statusCode() {
      return ((this.statusCode == null) ? this.statusCode =
          new StatusCodeType.Selector<TRoot, StatusType.Selector<TRoot, TParent>>(this._root, this,
              "statusCode") : this.statusCode);
    }

    public com.kscs.util.jaxb.Selector<TRoot, StatusType.Selector<TRoot, TParent>> statusMessage() {
      return ((this.statusMessage == null) ? this.statusMessage =
          new com.kscs.util.jaxb.Selector<TRoot, StatusType.Selector<TRoot, TParent>>(this._root,
              this, "statusMessage") : this.statusMessage);
    }

    public StatusDetailType.Selector<TRoot, StatusType.Selector<TRoot, TParent>> statusDetail() {
      return ((this.statusDetail == null) ? this.statusDetail =
          new StatusDetailType.Selector<TRoot, StatusType.Selector<TRoot, TParent>>(this._root,
              this, "statusDetail") : this.statusDetail);
    }

  }

}
