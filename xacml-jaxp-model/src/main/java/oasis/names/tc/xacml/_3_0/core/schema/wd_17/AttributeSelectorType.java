//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for AttributeSelectorType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AttributeSelectorType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}ExpressionType"&gt;
 *       &lt;attribute name="Category" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="ContextSelectorId" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="Path" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="DataType" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *       &lt;attribute name="MustBePresent" use="required" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AttributeSelectorType")
public class AttributeSelectorType extends ExpressionType implements Cloneable {

  @XmlAttribute(name = "Category", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String category;
  @XmlAttribute(name = "ContextSelectorId")
  @XmlSchemaType(name = "anyURI")
  protected String contextSelectorId;
  @XmlAttribute(name = "Path", required = true)
  protected String path;
  @XmlAttribute(name = "DataType", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String dataType;
  @XmlAttribute(name = "MustBePresent", required = true)
  protected boolean mustBePresent;

  /**
   * Gets the value of the category property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getCategory() {
    return category;
  }

  /**
   * Sets the value of the category property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setCategory(String value) {
    this.category = value;
  }

  /**
   * Gets the value of the contextSelectorId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getContextSelectorId() {
    return contextSelectorId;
  }

  /**
   * Sets the value of the contextSelectorId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setContextSelectorId(String value) {
    this.contextSelectorId = value;
  }

  /**
   * Gets the value of the path property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getPath() {
    return path;
  }

  /**
   * Sets the value of the path property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setPath(String value) {
    this.path = value;
  }

  /**
   * Gets the value of the dataType property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getDataType() {
    return dataType;
  }

  /**
   * Sets the value of the dataType property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setDataType(String value) {
    this.dataType = value;
  }

  /**
   * Gets the value of the mustBePresent property.
   * 
   */
  public boolean isMustBePresent() {
    return mustBePresent;
  }

  /**
   * Sets the value of the mustBePresent property.
   * 
   */
  protected void setMustBePresent(boolean value) {
    this.mustBePresent = value;
  }

  public static AttributeSelectorType.Builder<Void> builder() {
    return new AttributeSelectorType.Builder<Void>(null, null, false);
  }

  public static AttributeSelectorType.Builder<Void> copyOf(final AttributeSelectorType other) {
    return new AttributeSelectorType.Builder<Void>(null, other, true);
  }

  public static AttributeSelectorType.Builder<Void> copyOf(final AttributeSelectorType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new AttributeSelectorType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static AttributeSelectorType.Builder<Void> copyExcept(final AttributeSelectorType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static AttributeSelectorType.Builder<Void> copyOnly(final AttributeSelectorType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (((((((((((((((super.toString() + "(category = ") + category) + "), ") + "(contextSelectorId = ") + contextSelectorId) + "), ") + "(path = ") + path) + "), ") + "(dataType = ") + dataType) + "), ") + "(mustBePresent = ") + mustBePresent) + ") ");
  }

  @Override
  public AttributeSelectorType clone() throws CloneNotSupportedException {
    final AttributeSelectorType newObject = ((AttributeSelectorType) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> extends ExpressionType.Builder<TParentBuilder> {

    private String category;
    private String contextSelectorId;
    private String path;
    private String dataType;
    private boolean mustBePresent;

    public Builder(final TParentBuilder parentBuilder, final AttributeSelectorType other,
        final boolean copy) {
      super(parentBuilder, other, copy);
      if (copy) {
        this.category = other.category;
        this.contextSelectorId = other.contextSelectorId;
        this.path = other.path;
        this.dataType = other.dataType;
        this.mustBePresent = other.mustBePresent;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final AttributeSelectorType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      super(parentBuilder, other, copy);
      if (copy) {
        final PropertyTree categoryPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("category"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (categoryPropertyTree != null)
            : ((categoryPropertyTree == null) || (!categoryPropertyTree.isLeaf())))) {
          this.category = other.category;
        }
        final PropertyTree contextSelectorIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("contextSelectorId"));
        if (((treeUse == PropertyTreeUse.INCLUDE)
            ? (contextSelectorIdPropertyTree != null)
            : ((contextSelectorIdPropertyTree == null) || (!contextSelectorIdPropertyTree.isLeaf())))) {
          this.contextSelectorId = other.contextSelectorId;
        }
        final PropertyTree pathPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("path"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (pathPropertyTree != null)
            : ((pathPropertyTree == null) || (!pathPropertyTree.isLeaf())))) {
          this.path = other.path;
        }
        final PropertyTree dataTypePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("dataType"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (dataTypePropertyTree != null)
            : ((dataTypePropertyTree == null) || (!dataTypePropertyTree.isLeaf())))) {
          this.dataType = other.dataType;
        }
        final PropertyTree mustBePresentPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("mustBePresent"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (mustBePresentPropertyTree != null)
            : ((mustBePresentPropertyTree == null) || (!mustBePresentPropertyTree.isLeaf())))) {
          this.mustBePresent = other.mustBePresent;
        }
      }
    }

    protected <P extends AttributeSelectorType> P init(final P product) {
      product.category = this.category;
      product.contextSelectorId = this.contextSelectorId;
      product.path = this.path;
      product.dataType = this.dataType;
      product.mustBePresent = this.mustBePresent;
      return super.init(product);
    }

    public AttributeSelectorType.Builder<TParentBuilder> withCategory(final String category) {
      this.category = category;
      return this;
    }

    public AttributeSelectorType.Builder<TParentBuilder> withContextSelectorId(
        final String contextSelectorId) {
      this.contextSelectorId = contextSelectorId;
      return this;
    }

    public AttributeSelectorType.Builder<TParentBuilder> withPath(final String path) {
      this.path = path;
      return this;
    }

    public AttributeSelectorType.Builder<TParentBuilder> withDataType(final String dataType) {
      this.dataType = dataType;
      return this;
    }

    public AttributeSelectorType.Builder<TParentBuilder> withMustBePresent(
        final boolean mustBePresent) {
      this.mustBePresent = mustBePresent;
      return this;
    }

    public AttributeSelectorType build() {
      if (this._product == null) {
        return this.init(new AttributeSelectorType());
      } else {
        return ((AttributeSelectorType) this._product);
      }
    }

  }

  public static class Select extends
      AttributeSelectorType.Selector<AttributeSelectorType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static AttributeSelectorType.Select _root() {
      return new AttributeSelectorType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends ExpressionType.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> category =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> contextSelectorId =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> path =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> dataType =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.category != null) {
        products.put("category", this.category.init());
      }
      if (this.contextSelectorId != null) {
        products.put("contextSelectorId", this.contextSelectorId.init());
      }
      if (this.path != null) {
        products.put("path", this.path.init());
      }
      if (this.dataType != null) {
        products.put("dataType", this.dataType.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> category() {
      return ((this.category == null) ? this.category =
          new com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>>(
              this._root, this, "category") : this.category);
    }

    public com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> contextSelectorId() {
      return ((this.contextSelectorId == null) ? this.contextSelectorId =
          new com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>>(
              this._root, this, "contextSelectorId") : this.contextSelectorId);
    }

    public com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> path() {
      return ((this.path == null) ? this.path =
          new com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>>(
              this._root, this, "path") : this.path);
    }

    public com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>> dataType() {
      return ((this.dataType == null) ? this.dataType =
          new com.kscs.util.jaxb.Selector<TRoot, AttributeSelectorType.Selector<TRoot, TParent>>(
              this._root, this, "dataType") : this.dataType);
    }

  }

}
