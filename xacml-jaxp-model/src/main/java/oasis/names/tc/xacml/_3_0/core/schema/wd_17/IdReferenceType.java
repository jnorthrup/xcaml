//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.27 at 11:38:39 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.XmlValue;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for IdReferenceType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="IdReferenceType"&gt;
 *   &lt;simpleContent&gt;
 *     &lt;extension base="&lt;http://www.w3.org/2001/XMLSchema&gt;anyURI"&gt;
 *       &lt;attribute name="Version" type="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}VersionMatchType" /&gt;
 *       &lt;attribute name="EarliestVersion" type="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}VersionMatchType" /&gt;
 *       &lt;attribute name="LatestVersion" type="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}VersionMatchType" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/simpleContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IdReferenceType", propOrder = {"value"})
public class IdReferenceType implements Cloneable {

  @XmlValue
  @XmlSchemaType(name = "anyURI")
  protected String value;
  @XmlAttribute(name = "Version")
  protected String version;
  @XmlAttribute(name = "EarliestVersion")
  protected String earliestVersion;
  @XmlAttribute(name = "LatestVersion")
  protected String latestVersion;

  /**
   * Gets the value of the value property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getValue() {
    return value;
  }

  /**
   * Sets the value of the value property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setValue(String value) {
    this.value = value;
  }

  /**
   * Gets the value of the version property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getVersion() {
    return version;
  }

  /**
   * Sets the value of the version property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setVersion(String value) {
    this.version = value;
  }

  /**
   * Gets the value of the earliestVersion property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getEarliestVersion() {
    return earliestVersion;
  }

  /**
   * Sets the value of the earliestVersion property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setEarliestVersion(String value) {
    this.earliestVersion = value;
  }

  /**
   * Gets the value of the latestVersion property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLatestVersion() {
    return latestVersion;
  }

  /**
   * Sets the value of the latestVersion property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setLatestVersion(String value) {
    this.latestVersion = value;
  }

  public static IdReferenceType.Builder<Void> builder() {
    return new IdReferenceType.Builder<Void>(null, null, false);
  }

  public static IdReferenceType.Builder<Void> copyOf(final IdReferenceType other) {
    return new IdReferenceType.Builder<Void>(null, other, true);
  }

  public static IdReferenceType.Builder<Void> copyOf(final IdReferenceType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new IdReferenceType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static IdReferenceType.Builder<Void> copyExcept(final IdReferenceType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static IdReferenceType.Builder<Void> copyOnly(final IdReferenceType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((((((((("(value = " + value) + "), ") + "(version = ") + version) + "), ") + "(earliestVersion = ") + earliestVersion) + "), ") + "(latestVersion = ") + latestVersion) + ") ");
  }

  @Override
  public IdReferenceType clone() throws CloneNotSupportedException {
    final IdReferenceType newObject = ((IdReferenceType) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final IdReferenceType _product;
    private String value;
    private String version;
    private String earliestVersion;
    private String latestVersion;

    public Builder(final TParentBuilder parentBuilder, final IdReferenceType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.value = other.value;
        this.version = other.version;
        this.earliestVersion = other.earliestVersion;
        this.latestVersion = other.latestVersion;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final IdReferenceType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree valuePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("value"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (valuePropertyTree != null)
            : ((valuePropertyTree == null) || (!valuePropertyTree.isLeaf())))) {
          this.value = other.value;
        }
        final PropertyTree versionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("version"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (versionPropertyTree != null)
            : ((versionPropertyTree == null) || (!versionPropertyTree.isLeaf())))) {
          this.version = other.version;
        }
        final PropertyTree earliestVersionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("earliestVersion"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (earliestVersionPropertyTree != null)
            : ((earliestVersionPropertyTree == null) || (!earliestVersionPropertyTree.isLeaf())))) {
          this.earliestVersion = other.earliestVersion;
        }
        final PropertyTree latestVersionPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("latestVersion"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (latestVersionPropertyTree != null)
            : ((latestVersionPropertyTree == null) || (!latestVersionPropertyTree.isLeaf())))) {
          this.latestVersion = other.latestVersion;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends IdReferenceType> P init(final P product) {
      product.value = this.value;
      product.version = this.version;
      product.earliestVersion = this.earliestVersion;
      product.latestVersion = this.latestVersion;
      return product;
    }

    public IdReferenceType.Builder<TParentBuilder> withValue(final String value) {
      this.value = value;
      return this;
    }

    public IdReferenceType.Builder<TParentBuilder> withVersion(final String version) {
      this.version = version;
      return this;
    }

    public IdReferenceType.Builder<TParentBuilder> withEarliestVersion(final String earliestVersion) {
      this.earliestVersion = earliestVersion;
      return this;
    }

    public IdReferenceType.Builder<TParentBuilder> withLatestVersion(final String latestVersion) {
      this.latestVersion = latestVersion;
      return this;
    }

    public IdReferenceType build() {
      if (this._product == null) {
        return this.init(new IdReferenceType());
      } else {
        return ((IdReferenceType) this._product);
      }
    }

  }

  public static class Select extends IdReferenceType.Selector<IdReferenceType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static IdReferenceType.Select _root() {
      return new IdReferenceType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> value =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> version =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> earliestVersion =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> latestVersion =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.value != null) {
        products.put("value", this.value.init());
      }
      if (this.version != null) {
        products.put("version", this.version.init());
      }
      if (this.earliestVersion != null) {
        products.put("earliestVersion", this.earliestVersion.init());
      }
      if (this.latestVersion != null) {
        products.put("latestVersion", this.latestVersion.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> value() {
      return ((this.value == null) ? this.value =
          new com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>>(
              this._root, this, "value") : this.value);
    }

    public com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> version() {
      return ((this.version == null) ? this.version =
          new com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>>(
              this._root, this, "version") : this.version);
    }

    public com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> earliestVersion() {
      return ((this.earliestVersion == null) ? this.earliestVersion =
          new com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>>(
              this._root, this, "earliestVersion") : this.earliestVersion);
    }

    public com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>> latestVersion() {
      return ((this.latestVersion == null) ? this.latestVersion =
          new com.kscs.util.jaxb.Selector<TRoot, IdReferenceType.Selector<TRoot, TParent>>(
              this._root, this, "latestVersion") : this.latestVersion);
    }

  }

}
