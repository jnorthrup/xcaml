//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:04 PM PST
//

package oasis.names.tc.xacml._3_0.core.schema.wd_17;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * <p>
 * Java class for ObligationType complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ObligationType"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence&gt;
 *         &lt;element ref="{urn:oasis:names:tc:xacml:3.0:core:schema:wd-17}AttributeAssignment" maxOccurs="unbounded" minOccurs="0"/&gt;
 *       &lt;/sequence&gt;
 *       &lt;attribute name="ObligationId" use="required" type="{http://www.w3.org/2001/XMLSchema}anyURI" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "ObligationType", propOrder = {"attributeAssignment"})
public class ObligationType implements Cloneable {

  @XmlElement(name = "AttributeAssignment")
  protected List<AttributeAssignmentType> attributeAssignment;
  @XmlAttribute(name = "ObligationId", required = true)
  @XmlSchemaType(name = "anyURI")
  protected String obligationId;
  protected transient List<AttributeAssignmentType> attributeAssignment_RO = null;

  /**
   * Gets the value of the obligationId property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getObligationId() {
    return obligationId;
  }

  /**
   * Sets the value of the obligationId property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  protected void setObligationId(String value) {
    this.obligationId = value;
  }

  public static ObligationType.Builder<Void> builder() {
    return new ObligationType.Builder<Void>(null, null, false);
  }

  public static ObligationType.Builder<Void> copyOf(final ObligationType other) {
    return new ObligationType.Builder<Void>(null, other, true);
  }

  public static ObligationType.Builder<Void> copyOf(final ObligationType other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new ObligationType.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static ObligationType.Builder<Void> copyExcept(final ObligationType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static ObligationType.Builder<Void> copyOnly(final ObligationType other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((("(attributeAssignment = " + attributeAssignment) + "), ") + "(obligationId = ") + obligationId) + ") ");
  }

  @Override
  public ObligationType clone() throws CloneNotSupportedException {
    final ObligationType newObject = ((ObligationType) super.clone());
    if (this.attributeAssignment == null) {
      newObject.attributeAssignment = null;
    } else {
      newObject.attributeAssignment = new ArrayList<AttributeAssignmentType>();
      for (AttributeAssignmentType item : this.attributeAssignment) {
        newObject.attributeAssignment.add(((item == null) ? null : item.clone()));
      }
    }
    newObject.attributeAssignment_RO =
        ((attributeAssignment == null) ? null : Collections
            .unmodifiableList(newObject.attributeAssignment));
    return newObject;
  }

  public List<AttributeAssignmentType> getAttributeAssignment() {
    if (this.attributeAssignment == null) {
      this.attributeAssignment = new ArrayList<AttributeAssignmentType>();
    }
    if (this.attributeAssignment_RO == null) {
      this.attributeAssignment_RO =
          ((attributeAssignment == null) ? null : Collections
              .unmodifiableList(this.attributeAssignment));
    }
    return this.attributeAssignment_RO;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final ObligationType _product;
    private List<AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>> attributeAssignment;
    private String obligationId;

    public Builder(final TParentBuilder parentBuilder, final ObligationType other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        if (other.attributeAssignment == null) {
          this.attributeAssignment = null;
        } else {
          this.attributeAssignment =
              new ArrayList<AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>>();
          for (AttributeAssignmentType _item : other.attributeAssignment) {
            this.attributeAssignment.add(((_item == null) ? null
                : new AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>(this,
                    _item, true)));
          }
        }
        this.obligationId = other.obligationId;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final ObligationType other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree attributeAssignmentPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("attributeAssignment"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (attributeAssignmentPropertyTree != null)
            : ((attributeAssignmentPropertyTree == null) || (!attributeAssignmentPropertyTree
                .isLeaf())))) {
          if (other.attributeAssignment == null) {
            this.attributeAssignment = null;
          } else {
            this.attributeAssignment =
                new ArrayList<AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>>();
            for (AttributeAssignmentType _item : other.attributeAssignment) {
              this.attributeAssignment.add(((_item == null) ? null
                  : new AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>(
                      this, _item, true, attributeAssignmentPropertyTree, treeUse)));
            }
          }
        }
        final PropertyTree obligationIdPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("obligationId"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (obligationIdPropertyTree != null)
            : ((obligationIdPropertyTree == null) || (!obligationIdPropertyTree.isLeaf())))) {
          this.obligationId = other.obligationId;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends ObligationType> P init(final P product) {
      if (this.attributeAssignment != null) {
        final List<AttributeAssignmentType> attributeAssignment =
            new ArrayList<AttributeAssignmentType>(this.attributeAssignment.size());
        for (AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>> _item : this.attributeAssignment) {
          attributeAssignment.add(_item.build());
        }
        product.attributeAssignment = attributeAssignment;
      }
      product.attributeAssignment_RO =
          ((attributeAssignment == null) ? null : Collections
              .unmodifiableList(product.attributeAssignment));
      product.obligationId = this.obligationId;
      return product;
    }

    public ObligationType.Builder<TParentBuilder> addAttributeAssignment(
        final List<? extends AttributeAssignmentType> attributeAssignment) {
      if (this.attributeAssignment == null) {
        this.attributeAssignment =
            new ArrayList<AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>>();
      }
      for (AttributeAssignmentType _item : attributeAssignment) {
        this.attributeAssignment
            .add(new AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>(this,
                _item, false));
      }
      return this;
    }

    public ObligationType.Builder<TParentBuilder> withAttributeAssignment(
        final List<? extends AttributeAssignmentType> attributeAssignment) {
      if (this.attributeAssignment != null) {
        this.attributeAssignment.clear();
      }
      return addAttributeAssignment(attributeAssignment);
    }

    public ObligationType.Builder<TParentBuilder> addAttributeAssignment(
        AttributeAssignmentType... attributeAssignment) {
      addAttributeAssignment(Arrays.asList(attributeAssignment));
      return this;
    }

    public ObligationType.Builder<TParentBuilder> withAttributeAssignment(
        AttributeAssignmentType... attributeAssignment) {
      withAttributeAssignment(Arrays.asList(attributeAssignment));
      return this;
    }

    public AttributeAssignmentType.Builder<? extends ObligationType.Builder<TParentBuilder>> addAttributeAssignment() {
      if (this.attributeAssignment == null) {
        this.attributeAssignment =
            new ArrayList<AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>>();
      }
      final AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>> attributeAssignmentBuilder =
          new AttributeAssignmentType.Builder<ObligationType.Builder<TParentBuilder>>(this, null,
              false);
      this.attributeAssignment.add(attributeAssignmentBuilder);
      return attributeAssignmentBuilder;
    }

    public ObligationType.Builder<TParentBuilder> withObligationId(final String obligationId) {
      this.obligationId = obligationId;
      return this;
    }

    public ObligationType build() {
      if (this._product == null) {
        return this.init(new ObligationType());
      } else {
        return ((ObligationType) this._product);
      }
    }

  }

  public static class Select extends ObligationType.Selector<ObligationType.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static ObligationType.Select _root() {
      return new ObligationType.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private AttributeAssignmentType.Selector<TRoot, ObligationType.Selector<TRoot, TParent>> attributeAssignment =
        null;
    private com.kscs.util.jaxb.Selector<TRoot, ObligationType.Selector<TRoot, TParent>> obligationId =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.attributeAssignment != null) {
        products.put("attributeAssignment", this.attributeAssignment.init());
      }
      if (this.obligationId != null) {
        products.put("obligationId", this.obligationId.init());
      }
      return products;
    }

    public AttributeAssignmentType.Selector<TRoot, ObligationType.Selector<TRoot, TParent>> attributeAssignment() {
      return ((this.attributeAssignment == null) ? this.attributeAssignment =
          new AttributeAssignmentType.Selector<TRoot, ObligationType.Selector<TRoot, TParent>>(
              this._root, this, "attributeAssignment") : this.attributeAssignment);
    }

    public com.kscs.util.jaxb.Selector<TRoot, ObligationType.Selector<TRoot, TParent>> obligationId() {
      return ((this.obligationId == null) ? this.obligationId =
          new com.kscs.util.jaxb.Selector<TRoot, ObligationType.Selector<TRoot, TParent>>(
              this._root, this, "obligationId") : this.obligationId);
    }

  }

}
