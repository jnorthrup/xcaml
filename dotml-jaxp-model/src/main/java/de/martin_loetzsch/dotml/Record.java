//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:06 PM PST
//

package de.martin_loetzsch.dotml;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.bind.annotation.XmlType;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * A record inside a record
 * 
 * <p>
 * Java class for record complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="record"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;sequence maxOccurs="unbounded"&gt;
 *         &lt;choice&gt;
 *           &lt;element name="node" type="{http://www.martin-loetzsch.de/DOTML}node-inside-record"/&gt;
 *           &lt;element name="record" type="{http://www.martin-loetzsch.de/DOTML}record"/&gt;
 *         &lt;/choice&gt;
 *       &lt;/sequence&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "record", propOrder = {"nodeOrRecord"})
@XmlSeeAlso({RecordNode.class})
public class Record implements Cloneable {

  @XmlElements({
      @XmlElement(name = "node", type = NodeInsideRecord.class),
      @XmlElement(name = "record", type = Record.class)})
  protected List<Object> nodeOrRecord;

  /**
   * Gets the value of the nodeOrRecord property.
   * 
   * <p>
   * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to
   * the returned list will be present inside the JAXB object. This is why there is not a <CODE>set</CODE> method for
   * the nodeOrRecord property.
   * 
   * <p>
   * For example, to add a new item, do as follows:
   * 
   * <pre>
     *    getNodeOrRecord().add(newItem);
     * </pre>
   * 
   * 
   * <p>
   * Objects of the following type(s) are allowed in the list {@link NodeInsideRecord } {@link Record }
   * 
   * 
   */
  public List<Object> getNodeOrRecord() {
    if (nodeOrRecord == null) {
      nodeOrRecord = new ArrayList<Object>();
    }
    return this.nodeOrRecord;
  }

  public static Record.Builder<Void> builder() {
    return new Record.Builder<Void>(null, null, false);
  }

  public static Record.Builder<Void> copyOf(final Record other) {
    return new Record.Builder<Void>(null, other, true);
  }

  public static Record.Builder<Void> copyOf(final Record other, final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    return new Record.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static Record.Builder<Void> copyExcept(final Record other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static Record.Builder<Void> copyOnly(final Record other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return (("(nodeOrRecord = " + nodeOrRecord) + ") ");
  }

  @Override
  public Record clone() throws CloneNotSupportedException {
    final Record newObject = ((Record) super.clone());
    newObject.nodeOrRecord =
        ((this.nodeOrRecord == null) ? null : new ArrayList<Object>(this.nodeOrRecord));
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final Record _product;
    private List<Object> nodeOrRecord;

    public Builder(final TParentBuilder parentBuilder, final Record other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.nodeOrRecord =
            ((other.nodeOrRecord == null) ? null : new ArrayList<Object>(other.nodeOrRecord));
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final Record other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree nodeOrRecordPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("nodeOrRecord"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (nodeOrRecordPropertyTree != null)
            : ((nodeOrRecordPropertyTree == null) || (!nodeOrRecordPropertyTree.isLeaf())))) {
          this.nodeOrRecord =
              ((other.nodeOrRecord == null) ? null : new ArrayList<Object>(other.nodeOrRecord));
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends Record> P init(final P product) {
      product.nodeOrRecord = this.nodeOrRecord;
      return product;
    }

    public Record.Builder<TParentBuilder> addNodeOrRecord(final List<?> nodeOrRecord) {
      if (this.nodeOrRecord == null) {
        this.nodeOrRecord = new ArrayList<Object>();
      }
      this.nodeOrRecord.addAll(nodeOrRecord);
      return this;
    }

    public Record.Builder<TParentBuilder> withNodeOrRecord(final List<?> nodeOrRecord) {
      if (this.nodeOrRecord != null) {
        this.nodeOrRecord.clear();
      }
      return addNodeOrRecord(nodeOrRecord);
    }

    public Record.Builder<TParentBuilder> addNodeOrRecord(Object... nodeOrRecord) {
      addNodeOrRecord(Arrays.asList(nodeOrRecord));
      return this;
    }

    public Record.Builder<TParentBuilder> withNodeOrRecord(Object... nodeOrRecord) {
      withNodeOrRecord(Arrays.asList(nodeOrRecord));
      return this;
    }

    public Record build() {
      if (this._product == null) {
        return this.init(new Record());
      } else {
        return ((Record) this._product);
      }
    }

  }

  public static class Select extends Record.Selector<Record.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static Record.Select _root() {
      return new Record.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, Record.Selector<TRoot, TParent>> nodeOrRecord = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.nodeOrRecord != null) {
        products.put("nodeOrRecord", this.nodeOrRecord.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, Record.Selector<TRoot, TParent>> nodeOrRecord() {
      return ((this.nodeOrRecord == null) ? this.nodeOrRecord =
          new com.kscs.util.jaxb.Selector<TRoot, Record.Selector<TRoot, TParent>>(this._root, this,
              "nodeOrRecord") : this.nodeOrRecord);
    }

  }

}
