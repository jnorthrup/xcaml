//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:06 PM PST
//

package de.martin_loetzsch.dotml;

import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * A node inside a record.
 * 
 * <p>
 * Java class for node-inside-record complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="node-inside-record"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="id" use="required" type="{http://www.martin-loetzsch.de/DOTML}id" /&gt;
 *       &lt;attribute name="label" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "node-inside-record")
public class NodeInsideRecord implements Cloneable {

  @XmlAttribute(name = "id", required = true)
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  protected String id;
  @XmlAttribute(name = "label")
  protected String label;

  /**
   * Gets the value of the id property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getId() {
    return id;
  }

  /**
   * Sets the value of the id property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the label property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLabel() {
    return label;
  }

  /**
   * Sets the value of the label property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLabel(String value) {
    this.label = value;
  }

  public static NodeInsideRecord.Builder<Void> builder() {
    return new NodeInsideRecord.Builder<Void>(null, null, false);
  }

  public static NodeInsideRecord.Builder<Void> copyOf(final NodeInsideRecord other) {
    return new NodeInsideRecord.Builder<Void>(null, other, true);
  }

  public static NodeInsideRecord.Builder<Void> copyOf(final NodeInsideRecord other,
      final PropertyTree propertyTree, final PropertyTreeUse propertyTreeUse) {
    return new NodeInsideRecord.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static NodeInsideRecord.Builder<Void> copyExcept(final NodeInsideRecord other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static NodeInsideRecord.Builder<Void> copyOnly(final NodeInsideRecord other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((("(id = " + id) + "), ") + "(label = ") + label) + ") ");
  }

  @Override
  public NodeInsideRecord clone() throws CloneNotSupportedException {
    final NodeInsideRecord newObject = ((NodeInsideRecord) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final NodeInsideRecord _product;
    private String id;
    private String label;

    public Builder(final TParentBuilder parentBuilder, final NodeInsideRecord other,
        final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.id = other.id;
        this.label = other.label;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final NodeInsideRecord other,
        final boolean copy, final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree idPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("id"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (idPropertyTree != null)
            : ((idPropertyTree == null) || (!idPropertyTree.isLeaf())))) {
          this.id = other.id;
        }
        final PropertyTree labelPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("label"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labelPropertyTree != null)
            : ((labelPropertyTree == null) || (!labelPropertyTree.isLeaf())))) {
          this.label = other.label;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends NodeInsideRecord> P init(final P product) {
      product.id = this.id;
      product.label = this.label;
      return product;
    }

    public NodeInsideRecord.Builder<TParentBuilder> withId(final String id) {
      this.id = id;
      return this;
    }

    public NodeInsideRecord.Builder<TParentBuilder> withLabel(final String label) {
      this.label = label;
      return this;
    }

    public NodeInsideRecord build() {
      if (this._product == null) {
        return this.init(new NodeInsideRecord());
      } else {
        return ((NodeInsideRecord) this._product);
      }
    }

  }

  public static class Select extends NodeInsideRecord.Selector<NodeInsideRecord.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static NodeInsideRecord.Select _root() {
      return new NodeInsideRecord.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, NodeInsideRecord.Selector<TRoot, TParent>> id = null;
    private com.kscs.util.jaxb.Selector<TRoot, NodeInsideRecord.Selector<TRoot, TParent>> label =
        null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.id != null) {
        products.put("id", this.id.init());
      }
      if (this.label != null) {
        products.put("label", this.label.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, NodeInsideRecord.Selector<TRoot, TParent>> id() {
      return ((this.id == null) ? this.id =
          new com.kscs.util.jaxb.Selector<TRoot, NodeInsideRecord.Selector<TRoot, TParent>>(
              this._root, this, "id") : this.id);
    }

    public com.kscs.util.jaxb.Selector<TRoot, NodeInsideRecord.Selector<TRoot, TParent>> label() {
      return ((this.label == null) ? this.label =
          new com.kscs.util.jaxb.Selector<TRoot, NodeInsideRecord.Selector<TRoot, TParent>>(
              this._root, this, "label") : this.label);
    }

  }

}
