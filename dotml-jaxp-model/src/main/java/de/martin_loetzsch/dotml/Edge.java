//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:06 PM PST
//

package de.martin_loetzsch.dotml;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlSchemaType;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * Represents a single edge in the graph.
 * 
 * <p>
 * Java class for edge complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="edge"&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attGroup ref="{http://www.martin-loetzsch.de/DOTML}font-attributes"/&gt;
 *       &lt;attribute name="arrowhead" type="{http://www.martin-loetzsch.de/DOTML}arrow-type" /&gt;
 *       &lt;attribute name="arrowsize" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="arrowtail" type="{http://www.martin-loetzsch.de/DOTML}arrow-type" /&gt;
 *       &lt;attribute name="color" type="{http://www.martin-loetzsch.de/DOTML}color" /&gt;
 *       &lt;attribute name="constraint" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="decorate" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="dir" type="{http://www.martin-loetzsch.de/DOTML}dir" /&gt;
 *       &lt;attribute name="from" use="required" type="{http://www.martin-loetzsch.de/DOTML}id" /&gt;
 *       &lt;attribute name="headlabel" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="headport" type="{http://www.martin-loetzsch.de/DOTML}node-port" /&gt;
 *       &lt;attribute name="label" type="{http://www.martin-loetzsch.de/DOTML}label" /&gt;
 *       &lt;attribute name="labeldistance" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="labelfloat" type="{http://www.w3.org/2001/XMLSchema}boolean" /&gt;
 *       &lt;attribute name="labelfontcolor" type="{http://www.martin-loetzsch.de/DOTML}color" /&gt;
 *       &lt;attribute name="labelfontname" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="labelfontsize" type="{http://www.w3.org/2001/XMLSchema}decimal" /&gt;
 *       &lt;attribute name="lhead" type="{http://www.martin-loetzsch.de/DOTML}id" /&gt;
 *       &lt;attribute name="ltail" type="{http://www.martin-loetzsch.de/DOTML}id" /&gt;
 *       &lt;attribute name="minlen" type="{http://www.w3.org/2001/XMLSchema}integer" /&gt;
 *       &lt;attribute name="style" type="{http://www.martin-loetzsch.de/DOTML}style" /&gt;
 *       &lt;attribute name="samehead" type="{http://www.w3.org/2001/XMLSchema}NCName" /&gt;
 *       &lt;attribute name="sametail" type="{http://www.w3.org/2001/XMLSchema}NCName" /&gt;
 *       &lt;attribute name="taillabel" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="tailport" type="{http://www.martin-loetzsch.de/DOTML}node-port" /&gt;
 *       &lt;attribute name="to" use="required" type="{http://www.martin-loetzsch.de/DOTML}id" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "edge")
public class Edge implements Cloneable, FontAttributes {

  @XmlAttribute(name = "arrowhead")
  protected ArrowType arrowhead;
  @XmlAttribute(name = "arrowsize")
  protected BigDecimal arrowsize;
  @XmlAttribute(name = "arrowtail")
  protected ArrowType arrowtail;
  @XmlAttribute(name = "color")
  protected String color;
  @XmlAttribute(name = "constraint")
  protected Boolean constraint;
  @XmlAttribute(name = "decorate")
  protected Boolean decorate;
  @XmlAttribute(name = "dir")
  protected Dir dir;
  @XmlAttribute(name = "from", required = true)
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  protected String from;
  @XmlAttribute(name = "headlabel")
  protected String headlabel;
  @XmlAttribute(name = "headport")
  protected NodePort headport;
  @XmlAttribute(name = "label")
  protected String label;
  @XmlAttribute(name = "labeldistance")
  protected BigDecimal labeldistance;
  @XmlAttribute(name = "labelfloat")
  protected Boolean labelfloat;
  @XmlAttribute(name = "labelfontcolor")
  protected String labelfontcolor;
  @XmlAttribute(name = "labelfontname")
  protected String labelfontname;
  @XmlAttribute(name = "labelfontsize")
  protected BigDecimal labelfontsize;
  @XmlAttribute(name = "lhead")
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  protected String lhead;
  @XmlAttribute(name = "ltail")
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  protected String ltail;
  @XmlAttribute(name = "minlen")
  protected BigInteger minlen;
  @XmlAttribute(name = "style")
  protected Style style;
  @XmlAttribute(name = "samehead")
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  @XmlSchemaType(name = "NCName")
  protected String samehead;
  @XmlAttribute(name = "sametail")
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  @XmlSchemaType(name = "NCName")
  protected String sametail;
  @XmlAttribute(name = "taillabel")
  protected String taillabel;
  @XmlAttribute(name = "tailport")
  protected NodePort tailport;
  @XmlAttribute(name = "to", required = true)
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  protected String to;
  @XmlAttribute(name = "fontname")
  protected String fontname;
  @XmlAttribute(name = "fontsize")
  protected BigDecimal fontsize;
  @XmlAttribute(name = "fontcolor")
  protected String fontcolor;

  /**
   * Gets the value of the arrowhead property.
   * 
   * @return possible object is {@link ArrowType }
   * 
   */
  public ArrowType getArrowhead() {
    return arrowhead;
  }

  /**
   * Sets the value of the arrowhead property.
   * 
   * @param value allowed object is {@link ArrowType }
   * 
   */
  public void setArrowhead(ArrowType value) {
    this.arrowhead = value;
  }

  /**
   * Gets the value of the arrowsize property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getArrowsize() {
    return arrowsize;
  }

  /**
   * Sets the value of the arrowsize property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setArrowsize(BigDecimal value) {
    this.arrowsize = value;
  }

  /**
   * Gets the value of the arrowtail property.
   * 
   * @return possible object is {@link ArrowType }
   * 
   */
  public ArrowType getArrowtail() {
    return arrowtail;
  }

  /**
   * Sets the value of the arrowtail property.
   * 
   * @param value allowed object is {@link ArrowType }
   * 
   */
  public void setArrowtail(ArrowType value) {
    this.arrowtail = value;
  }

  /**
   * Gets the value of the color property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getColor() {
    return color;
  }

  /**
   * Sets the value of the color property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setColor(String value) {
    this.color = value;
  }

  /**
   * Gets the value of the constraint property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isConstraint() {
    return constraint;
  }

  /**
   * Sets the value of the constraint property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setConstraint(Boolean value) {
    this.constraint = value;
  }

  /**
   * Gets the value of the decorate property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isDecorate() {
    return decorate;
  }

  /**
   * Sets the value of the decorate property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setDecorate(Boolean value) {
    this.decorate = value;
  }

  /**
   * Gets the value of the dir property.
   * 
   * @return possible object is {@link Dir }
   * 
   */
  public Dir getDir() {
    return dir;
  }

  /**
   * Sets the value of the dir property.
   * 
   * @param value allowed object is {@link Dir }
   * 
   */
  public void setDir(Dir value) {
    this.dir = value;
  }

  /**
   * Gets the value of the from property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFrom() {
    return from;
  }

  /**
   * Sets the value of the from property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFrom(String value) {
    this.from = value;
  }

  /**
   * Gets the value of the headlabel property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getHeadlabel() {
    return headlabel;
  }

  /**
   * Sets the value of the headlabel property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setHeadlabel(String value) {
    this.headlabel = value;
  }

  /**
   * Gets the value of the headport property.
   * 
   * @return possible object is {@link NodePort }
   * 
   */
  public NodePort getHeadport() {
    return headport;
  }

  /**
   * Sets the value of the headport property.
   * 
   * @param value allowed object is {@link NodePort }
   * 
   */
  public void setHeadport(NodePort value) {
    this.headport = value;
  }

  /**
   * Gets the value of the label property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLabel() {
    return label;
  }

  /**
   * Sets the value of the label property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLabel(String value) {
    this.label = value;
  }

  /**
   * Gets the value of the labeldistance property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getLabeldistance() {
    return labeldistance;
  }

  /**
   * Sets the value of the labeldistance property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setLabeldistance(BigDecimal value) {
    this.labeldistance = value;
  }

  /**
   * Gets the value of the labelfloat property.
   * 
   * @return possible object is {@link Boolean }
   * 
   */
  public Boolean isLabelfloat() {
    return labelfloat;
  }

  /**
   * Sets the value of the labelfloat property.
   * 
   * @param value allowed object is {@link Boolean }
   * 
   */
  public void setLabelfloat(Boolean value) {
    this.labelfloat = value;
  }

  /**
   * Gets the value of the labelfontcolor property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLabelfontcolor() {
    return labelfontcolor;
  }

  /**
   * Sets the value of the labelfontcolor property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLabelfontcolor(String value) {
    this.labelfontcolor = value;
  }

  /**
   * Gets the value of the labelfontname property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLabelfontname() {
    return labelfontname;
  }

  /**
   * Sets the value of the labelfontname property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLabelfontname(String value) {
    this.labelfontname = value;
  }

  /**
   * Gets the value of the labelfontsize property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getLabelfontsize() {
    return labelfontsize;
  }

  /**
   * Sets the value of the labelfontsize property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setLabelfontsize(BigDecimal value) {
    this.labelfontsize = value;
  }

  /**
   * Gets the value of the lhead property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLhead() {
    return lhead;
  }

  /**
   * Sets the value of the lhead property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLhead(String value) {
    this.lhead = value;
  }

  /**
   * Gets the value of the ltail property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getLtail() {
    return ltail;
  }

  /**
   * Sets the value of the ltail property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setLtail(String value) {
    this.ltail = value;
  }

  /**
   * Gets the value of the minlen property.
   * 
   * @return possible object is {@link BigInteger }
   * 
   */
  public BigInteger getMinlen() {
    return minlen;
  }

  /**
   * Sets the value of the minlen property.
   * 
   * @param value allowed object is {@link BigInteger }
   * 
   */
  public void setMinlen(BigInteger value) {
    this.minlen = value;
  }

  /**
   * Gets the value of the style property.
   * 
   * @return possible object is {@link Style }
   * 
   */
  public Style getStyle() {
    return style;
  }

  /**
   * Sets the value of the style property.
   * 
   * @param value allowed object is {@link Style }
   * 
   */
  public void setStyle(Style value) {
    this.style = value;
  }

  /**
   * Gets the value of the samehead property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getSamehead() {
    return samehead;
  }

  /**
   * Sets the value of the samehead property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setSamehead(String value) {
    this.samehead = value;
  }

  /**
   * Gets the value of the sametail property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getSametail() {
    return sametail;
  }

  /**
   * Sets the value of the sametail property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setSametail(String value) {
    this.sametail = value;
  }

  /**
   * Gets the value of the taillabel property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getTaillabel() {
    return taillabel;
  }

  /**
   * Sets the value of the taillabel property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setTaillabel(String value) {
    this.taillabel = value;
  }

  /**
   * Gets the value of the tailport property.
   * 
   * @return possible object is {@link NodePort }
   * 
   */
  public NodePort getTailport() {
    return tailport;
  }

  /**
   * Sets the value of the tailport property.
   * 
   * @param value allowed object is {@link NodePort }
   * 
   */
  public void setTailport(NodePort value) {
    this.tailport = value;
  }

  /**
   * Gets the value of the to property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getTo() {
    return to;
  }

  /**
   * Sets the value of the to property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setTo(String value) {
    this.to = value;
  }

  /**
   * Gets the value of the fontname property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFontname() {
    return fontname;
  }

  /**
   * Sets the value of the fontname property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFontname(String value) {
    this.fontname = value;
  }

  /**
   * Gets the value of the fontsize property.
   * 
   * @return possible object is {@link BigDecimal }
   * 
   */
  public BigDecimal getFontsize() {
    return fontsize;
  }

  /**
   * Sets the value of the fontsize property.
   * 
   * @param value allowed object is {@link BigDecimal }
   * 
   */
  public void setFontsize(BigDecimal value) {
    this.fontsize = value;
  }

  /**
   * Gets the value of the fontcolor property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFontcolor() {
    return fontcolor;
  }

  /**
   * Sets the value of the fontcolor property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFontcolor(String value) {
    this.fontcolor = value;
  }

  public static Edge.Builder<Void> builder() {
    return new Edge.Builder<Void>(null, null, false);
  }

  public static Edge.Builder<Void> copyOf(final Edge other) {
    return new Edge.Builder<Void>(null, other, true);
  }

  public static Edge.Builder<Void> copyOf(final Edge other, final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    return new Edge.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static Edge.Builder<Void> copyExcept(final Edge other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static Edge.Builder<Void> copyOnly(final Edge other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((("(arrowhead = " + arrowhead) + "), ") + "(arrowsize = ") + arrowsize) + "), ") + "(arrowtail = ") + arrowtail) + "), ") + "(color = ") + color) + "), ") + "(constraint = ") + constraint) + "), ") + "(decorate = ") + decorate) + "), ") + "(dir = ") + dir) + "), ") + "(from = ") + from) + "), ") + "(headlabel = ") + headlabel) + "), ") + "(headport = ") + headport) + "), ") + "(label = ") + label) + "), ") + "(labeldistance = ") + labeldistance) + "), ") + "(labelfloat = ") + labelfloat) + "), ") + "(labelfontcolor = ") + labelfontcolor) + "), ") + "(labelfontname = ") + labelfontname) + "), ") + "(labelfontsize = ") + labelfontsize) + "), ") + "(lhead = ") + lhead) + "), ") + "(ltail = ") + ltail) + "), ") + "(minlen = ") + minlen) + "), ") + "(style = ") + style) + "), ") + "(samehead = ") + samehead) + "), ") + "(sametail = ") + sametail) + "), ") + "(taillabel = ") + taillabel) + "), ") + "(tailport = ") + tailport) + "), ") + "(to = ") + to) + "), ") + "(fontname = ") + fontname) + "), ") + "(fontsize = ") + fontsize) + "), ") + "(fontcolor = ") + fontcolor) + ") ");
  }

  @Override
  public Edge clone() throws CloneNotSupportedException {
    final Edge newObject = ((Edge) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> implements
      FontAttributes.BuildSupport<TParentBuilder> {

    protected final TParentBuilder _parentBuilder;
    protected final Edge _product;
    private ArrowType arrowhead;
    private BigDecimal arrowsize;
    private ArrowType arrowtail;
    private String color;
    private Boolean constraint;
    private Boolean decorate;
    private Dir dir;
    private String from;
    private String headlabel;
    private NodePort headport;
    private String label;
    private BigDecimal labeldistance;
    private Boolean labelfloat;
    private String labelfontcolor;
    private String labelfontname;
    private BigDecimal labelfontsize;
    private String lhead;
    private String ltail;
    private BigInteger minlen;
    private Style style;
    private String samehead;
    private String sametail;
    private String taillabel;
    private NodePort tailport;
    private String to;
    private String fontname;
    private BigDecimal fontsize;
    private String fontcolor;

    public Builder(final TParentBuilder parentBuilder, final Edge other, final boolean copy) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        this.arrowhead = other.arrowhead;
        this.arrowsize = other.arrowsize;
        this.arrowtail = other.arrowtail;
        this.color = other.color;
        this.constraint = other.constraint;
        this.decorate = other.decorate;
        this.dir = other.dir;
        this.from = other.from;
        this.headlabel = other.headlabel;
        this.headport = other.headport;
        this.label = other.label;
        this.labeldistance = other.labeldistance;
        this.labelfloat = other.labelfloat;
        this.labelfontcolor = other.labelfontcolor;
        this.labelfontname = other.labelfontname;
        this.labelfontsize = other.labelfontsize;
        this.lhead = other.lhead;
        this.ltail = other.ltail;
        this.minlen = other.minlen;
        this.style = other.style;
        this.samehead = other.samehead;
        this.sametail = other.sametail;
        this.taillabel = other.taillabel;
        this.tailport = other.tailport;
        this.to = other.to;
        this.fontname = other.fontname;
        this.fontsize = other.fontsize;
        this.fontcolor = other.fontcolor;
      } else {
        this._product = other;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final Edge other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      this._parentBuilder = parentBuilder;
      if (copy) {
        this._product = null;
        final PropertyTree arrowheadPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("arrowhead"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (arrowheadPropertyTree != null)
            : ((arrowheadPropertyTree == null) || (!arrowheadPropertyTree.isLeaf())))) {
          this.arrowhead = other.arrowhead;
        }
        final PropertyTree arrowsizePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("arrowsize"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (arrowsizePropertyTree != null)
            : ((arrowsizePropertyTree == null) || (!arrowsizePropertyTree.isLeaf())))) {
          this.arrowsize = other.arrowsize;
        }
        final PropertyTree arrowtailPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("arrowtail"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (arrowtailPropertyTree != null)
            : ((arrowtailPropertyTree == null) || (!arrowtailPropertyTree.isLeaf())))) {
          this.arrowtail = other.arrowtail;
        }
        final PropertyTree colorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("color"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (colorPropertyTree != null)
            : ((colorPropertyTree == null) || (!colorPropertyTree.isLeaf())))) {
          this.color = other.color;
        }
        final PropertyTree constraintPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("constraint"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (constraintPropertyTree != null)
            : ((constraintPropertyTree == null) || (!constraintPropertyTree.isLeaf())))) {
          this.constraint = other.constraint;
        }
        final PropertyTree decoratePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("decorate"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (decoratePropertyTree != null)
            : ((decoratePropertyTree == null) || (!decoratePropertyTree.isLeaf())))) {
          this.decorate = other.decorate;
        }
        final PropertyTree dirPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("dir"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (dirPropertyTree != null)
            : ((dirPropertyTree == null) || (!dirPropertyTree.isLeaf())))) {
          this.dir = other.dir;
        }
        final PropertyTree fromPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("from"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fromPropertyTree != null)
            : ((fromPropertyTree == null) || (!fromPropertyTree.isLeaf())))) {
          this.from = other.from;
        }
        final PropertyTree headlabelPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("headlabel"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (headlabelPropertyTree != null)
            : ((headlabelPropertyTree == null) || (!headlabelPropertyTree.isLeaf())))) {
          this.headlabel = other.headlabel;
        }
        final PropertyTree headportPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("headport"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (headportPropertyTree != null)
            : ((headportPropertyTree == null) || (!headportPropertyTree.isLeaf())))) {
          this.headport = other.headport;
        }
        final PropertyTree labelPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("label"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labelPropertyTree != null)
            : ((labelPropertyTree == null) || (!labelPropertyTree.isLeaf())))) {
          this.label = other.label;
        }
        final PropertyTree labeldistancePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("labeldistance"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labeldistancePropertyTree != null)
            : ((labeldistancePropertyTree == null) || (!labeldistancePropertyTree.isLeaf())))) {
          this.labeldistance = other.labeldistance;
        }
        final PropertyTree labelfloatPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("labelfloat"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labelfloatPropertyTree != null)
            : ((labelfloatPropertyTree == null) || (!labelfloatPropertyTree.isLeaf())))) {
          this.labelfloat = other.labelfloat;
        }
        final PropertyTree labelfontcolorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("labelfontcolor"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labelfontcolorPropertyTree != null)
            : ((labelfontcolorPropertyTree == null) || (!labelfontcolorPropertyTree.isLeaf())))) {
          this.labelfontcolor = other.labelfontcolor;
        }
        final PropertyTree labelfontnamePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("labelfontname"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labelfontnamePropertyTree != null)
            : ((labelfontnamePropertyTree == null) || (!labelfontnamePropertyTree.isLeaf())))) {
          this.labelfontname = other.labelfontname;
        }
        final PropertyTree labelfontsizePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("labelfontsize"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labelfontsizePropertyTree != null)
            : ((labelfontsizePropertyTree == null) || (!labelfontsizePropertyTree.isLeaf())))) {
          this.labelfontsize = other.labelfontsize;
        }
        final PropertyTree lheadPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("lhead"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (lheadPropertyTree != null)
            : ((lheadPropertyTree == null) || (!lheadPropertyTree.isLeaf())))) {
          this.lhead = other.lhead;
        }
        final PropertyTree ltailPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("ltail"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (ltailPropertyTree != null)
            : ((ltailPropertyTree == null) || (!ltailPropertyTree.isLeaf())))) {
          this.ltail = other.ltail;
        }
        final PropertyTree minlenPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("minlen"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (minlenPropertyTree != null)
            : ((minlenPropertyTree == null) || (!minlenPropertyTree.isLeaf())))) {
          this.minlen = other.minlen;
        }
        final PropertyTree stylePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("style"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (stylePropertyTree != null)
            : ((stylePropertyTree == null) || (!stylePropertyTree.isLeaf())))) {
          this.style = other.style;
        }
        final PropertyTree sameheadPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("samehead"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (sameheadPropertyTree != null)
            : ((sameheadPropertyTree == null) || (!sameheadPropertyTree.isLeaf())))) {
          this.samehead = other.samehead;
        }
        final PropertyTree sametailPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("sametail"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (sametailPropertyTree != null)
            : ((sametailPropertyTree == null) || (!sametailPropertyTree.isLeaf())))) {
          this.sametail = other.sametail;
        }
        final PropertyTree taillabelPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("taillabel"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (taillabelPropertyTree != null)
            : ((taillabelPropertyTree == null) || (!taillabelPropertyTree.isLeaf())))) {
          this.taillabel = other.taillabel;
        }
        final PropertyTree tailportPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("tailport"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (tailportPropertyTree != null)
            : ((tailportPropertyTree == null) || (!tailportPropertyTree.isLeaf())))) {
          this.tailport = other.tailport;
        }
        final PropertyTree toPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("to"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (toPropertyTree != null)
            : ((toPropertyTree == null) || (!toPropertyTree.isLeaf())))) {
          this.to = other.to;
        }
        final PropertyTree fontnamePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontname"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontnamePropertyTree != null)
            : ((fontnamePropertyTree == null) || (!fontnamePropertyTree.isLeaf())))) {
          this.fontname = other.fontname;
        }
        final PropertyTree fontsizePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontsize"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontsizePropertyTree != null)
            : ((fontsizePropertyTree == null) || (!fontsizePropertyTree.isLeaf())))) {
          this.fontsize = other.fontsize;
        }
        final PropertyTree fontcolorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fontcolor"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fontcolorPropertyTree != null)
            : ((fontcolorPropertyTree == null) || (!fontcolorPropertyTree.isLeaf())))) {
          this.fontcolor = other.fontcolor;
        }
      } else {
        this._product = other;
      }
    }

    public TParentBuilder end() {
      return this._parentBuilder;
    }

    protected <P extends Edge> P init(final P product) {
      product.arrowhead = this.arrowhead;
      product.arrowsize = this.arrowsize;
      product.arrowtail = this.arrowtail;
      product.color = this.color;
      product.constraint = this.constraint;
      product.decorate = this.decorate;
      product.dir = this.dir;
      product.from = this.from;
      product.headlabel = this.headlabel;
      product.headport = this.headport;
      product.label = this.label;
      product.labeldistance = this.labeldistance;
      product.labelfloat = this.labelfloat;
      product.labelfontcolor = this.labelfontcolor;
      product.labelfontname = this.labelfontname;
      product.labelfontsize = this.labelfontsize;
      product.lhead = this.lhead;
      product.ltail = this.ltail;
      product.minlen = this.minlen;
      product.style = this.style;
      product.samehead = this.samehead;
      product.sametail = this.sametail;
      product.taillabel = this.taillabel;
      product.tailport = this.tailport;
      product.to = this.to;
      product.fontname = this.fontname;
      product.fontsize = this.fontsize;
      product.fontcolor = this.fontcolor;
      return product;
    }

    public Edge.Builder<TParentBuilder> withArrowhead(final ArrowType arrowhead) {
      this.arrowhead = arrowhead;
      return this;
    }

    public Edge.Builder<TParentBuilder> withArrowsize(final BigDecimal arrowsize) {
      this.arrowsize = arrowsize;
      return this;
    }

    public Edge.Builder<TParentBuilder> withArrowtail(final ArrowType arrowtail) {
      this.arrowtail = arrowtail;
      return this;
    }

    public Edge.Builder<TParentBuilder> withColor(final String color) {
      this.color = color;
      return this;
    }

    public Edge.Builder<TParentBuilder> withConstraint(final Boolean constraint) {
      this.constraint = constraint;
      return this;
    }

    public Edge.Builder<TParentBuilder> withDecorate(final Boolean decorate) {
      this.decorate = decorate;
      return this;
    }

    public Edge.Builder<TParentBuilder> withDir(final Dir dir) {
      this.dir = dir;
      return this;
    }

    public Edge.Builder<TParentBuilder> withFrom(final String from) {
      this.from = from;
      return this;
    }

    public Edge.Builder<TParentBuilder> withHeadlabel(final String headlabel) {
      this.headlabel = headlabel;
      return this;
    }

    public Edge.Builder<TParentBuilder> withHeadport(final NodePort headport) {
      this.headport = headport;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLabel(final String label) {
      this.label = label;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLabeldistance(final BigDecimal labeldistance) {
      this.labeldistance = labeldistance;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLabelfloat(final Boolean labelfloat) {
      this.labelfloat = labelfloat;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLabelfontcolor(final String labelfontcolor) {
      this.labelfontcolor = labelfontcolor;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLabelfontname(final String labelfontname) {
      this.labelfontname = labelfontname;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLabelfontsize(final BigDecimal labelfontsize) {
      this.labelfontsize = labelfontsize;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLhead(final String lhead) {
      this.lhead = lhead;
      return this;
    }

    public Edge.Builder<TParentBuilder> withLtail(final String ltail) {
      this.ltail = ltail;
      return this;
    }

    public Edge.Builder<TParentBuilder> withMinlen(final BigInteger minlen) {
      this.minlen = minlen;
      return this;
    }

    public Edge.Builder<TParentBuilder> withStyle(final Style style) {
      this.style = style;
      return this;
    }

    public Edge.Builder<TParentBuilder> withSamehead(final String samehead) {
      this.samehead = samehead;
      return this;
    }

    public Edge.Builder<TParentBuilder> withSametail(final String sametail) {
      this.sametail = sametail;
      return this;
    }

    public Edge.Builder<TParentBuilder> withTaillabel(final String taillabel) {
      this.taillabel = taillabel;
      return this;
    }

    public Edge.Builder<TParentBuilder> withTailport(final NodePort tailport) {
      this.tailport = tailport;
      return this;
    }

    public Edge.Builder<TParentBuilder> withTo(final String to) {
      this.to = to;
      return this;
    }

    public Edge.Builder<TParentBuilder> withFontname(final String fontname) {
      this.fontname = fontname;
      return this;
    }

    public Edge.Builder<TParentBuilder> withFontsize(final BigDecimal fontsize) {
      this.fontsize = fontsize;
      return this;
    }

    public Edge.Builder<TParentBuilder> withFontcolor(final String fontcolor) {
      this.fontcolor = fontcolor;
      return this;
    }

    public Edge build() {
      if (this._product == null) {
        return this.init(new Edge());
      } else {
        return ((Edge) this._product);
      }
    }

  }

  public static class Select extends Edge.Selector<Edge.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static Edge.Select _root() {
      return new Edge.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends com.kscs.util.jaxb.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> arrowhead = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> arrowsize = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> arrowtail = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> color = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> constraint = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> decorate = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> dir = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> from = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> headlabel = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> headport = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> label = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labeldistance = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfloat = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfontcolor = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfontname = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfontsize = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> lhead = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> ltail = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> minlen = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> style = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> samehead = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> sametail = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> taillabel = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> tailport = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> to = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> fontname = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> fontsize = null;
    private com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> fontcolor = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.arrowhead != null) {
        products.put("arrowhead", this.arrowhead.init());
      }
      if (this.arrowsize != null) {
        products.put("arrowsize", this.arrowsize.init());
      }
      if (this.arrowtail != null) {
        products.put("arrowtail", this.arrowtail.init());
      }
      if (this.color != null) {
        products.put("color", this.color.init());
      }
      if (this.constraint != null) {
        products.put("constraint", this.constraint.init());
      }
      if (this.decorate != null) {
        products.put("decorate", this.decorate.init());
      }
      if (this.dir != null) {
        products.put("dir", this.dir.init());
      }
      if (this.from != null) {
        products.put("from", this.from.init());
      }
      if (this.headlabel != null) {
        products.put("headlabel", this.headlabel.init());
      }
      if (this.headport != null) {
        products.put("headport", this.headport.init());
      }
      if (this.label != null) {
        products.put("label", this.label.init());
      }
      if (this.labeldistance != null) {
        products.put("labeldistance", this.labeldistance.init());
      }
      if (this.labelfloat != null) {
        products.put("labelfloat", this.labelfloat.init());
      }
      if (this.labelfontcolor != null) {
        products.put("labelfontcolor", this.labelfontcolor.init());
      }
      if (this.labelfontname != null) {
        products.put("labelfontname", this.labelfontname.init());
      }
      if (this.labelfontsize != null) {
        products.put("labelfontsize", this.labelfontsize.init());
      }
      if (this.lhead != null) {
        products.put("lhead", this.lhead.init());
      }
      if (this.ltail != null) {
        products.put("ltail", this.ltail.init());
      }
      if (this.minlen != null) {
        products.put("minlen", this.minlen.init());
      }
      if (this.style != null) {
        products.put("style", this.style.init());
      }
      if (this.samehead != null) {
        products.put("samehead", this.samehead.init());
      }
      if (this.sametail != null) {
        products.put("sametail", this.sametail.init());
      }
      if (this.taillabel != null) {
        products.put("taillabel", this.taillabel.init());
      }
      if (this.tailport != null) {
        products.put("tailport", this.tailport.init());
      }
      if (this.to != null) {
        products.put("to", this.to.init());
      }
      if (this.fontname != null) {
        products.put("fontname", this.fontname.init());
      }
      if (this.fontsize != null) {
        products.put("fontsize", this.fontsize.init());
      }
      if (this.fontcolor != null) {
        products.put("fontcolor", this.fontcolor.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> arrowhead() {
      return ((this.arrowhead == null) ? this.arrowhead =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "arrowhead") : this.arrowhead);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> arrowsize() {
      return ((this.arrowsize == null) ? this.arrowsize =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "arrowsize") : this.arrowsize);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> arrowtail() {
      return ((this.arrowtail == null) ? this.arrowtail =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "arrowtail") : this.arrowtail);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> color() {
      return ((this.color == null) ? this.color =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "color") : this.color);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> constraint() {
      return ((this.constraint == null) ? this.constraint =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "constraint") : this.constraint);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> decorate() {
      return ((this.decorate == null) ? this.decorate =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "decorate") : this.decorate);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> dir() {
      return ((this.dir == null) ? this.dir =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "dir") : this.dir);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> from() {
      return ((this.from == null) ? this.from =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "from") : this.from);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> headlabel() {
      return ((this.headlabel == null) ? this.headlabel =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "headlabel") : this.headlabel);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> headport() {
      return ((this.headport == null) ? this.headport =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "headport") : this.headport);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> label() {
      return ((this.label == null) ? this.label =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "label") : this.label);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labeldistance() {
      return ((this.labeldistance == null) ? this.labeldistance =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "labeldistance") : this.labeldistance);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfloat() {
      return ((this.labelfloat == null) ? this.labelfloat =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "labelfloat") : this.labelfloat);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfontcolor() {
      return ((this.labelfontcolor == null) ? this.labelfontcolor =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "labelfontcolor") : this.labelfontcolor);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfontname() {
      return ((this.labelfontname == null) ? this.labelfontname =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "labelfontname") : this.labelfontname);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> labelfontsize() {
      return ((this.labelfontsize == null) ? this.labelfontsize =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "labelfontsize") : this.labelfontsize);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> lhead() {
      return ((this.lhead == null) ? this.lhead =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "lhead") : this.lhead);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> ltail() {
      return ((this.ltail == null) ? this.ltail =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "ltail") : this.ltail);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> minlen() {
      return ((this.minlen == null) ? this.minlen =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "minlen") : this.minlen);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> style() {
      return ((this.style == null) ? this.style =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "style") : this.style);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> samehead() {
      return ((this.samehead == null) ? this.samehead =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "samehead") : this.samehead);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> sametail() {
      return ((this.sametail == null) ? this.sametail =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "sametail") : this.sametail);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> taillabel() {
      return ((this.taillabel == null) ? this.taillabel =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "taillabel") : this.taillabel);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> tailport() {
      return ((this.tailport == null) ? this.tailport =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "tailport") : this.tailport);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> to() {
      return ((this.to == null) ? this.to =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "to") : this.to);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> fontname() {
      return ((this.fontname == null) ? this.fontname =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "fontname") : this.fontname);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> fontsize() {
      return ((this.fontsize == null) ? this.fontsize =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "fontsize") : this.fontsize);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>> fontcolor() {
      return ((this.fontcolor == null) ? this.fontcolor =
          new com.kscs.util.jaxb.Selector<TRoot, Edge.Selector<TRoot, TParent>>(this._root, this,
              "fontcolor") : this.fontcolor);
    }

  }

}
