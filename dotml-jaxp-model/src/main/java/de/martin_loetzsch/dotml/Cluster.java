//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.01.28 at 12:18:06 PM PST
//

package de.martin_loetzsch.dotml;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlType;
import javax.xml.bind.annotation.adapters.CollapsedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import com.kscs.util.jaxb.PropertyTree;
import com.kscs.util.jaxb.PropertyTreeUse;

/**
 * A rectangular cluster of nodes.
 * 
 * <p>
 * Java class for cluster complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="cluster"&gt;
 *   &lt;complexContent&gt;
 *     &lt;extension base="{http://www.martin-loetzsch.de/DOTML}cluster-or-graph"&gt;
 *       &lt;attribute name="color" type="{http://www.martin-loetzsch.de/DOTML}color" /&gt;
 *       &lt;attribute name="fillcolor" type="{http://www.martin-loetzsch.de/DOTML}color" /&gt;
 *       &lt;attribute name="id" use="required" type="{http://www.martin-loetzsch.de/DOTML}id" /&gt;
 *       &lt;attribute name="labeljust" type="{http://www.martin-loetzsch.de/DOTML}labeljust" /&gt;
 *       &lt;attribute name="labelloc" type="{http://www.martin-loetzsch.de/DOTML}labelloc" /&gt;
 *       &lt;attribute name="style" type="{http://www.martin-loetzsch.de/DOTML}style" /&gt;
 *     &lt;/extension&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "cluster")
public class Cluster extends ClusterOrGraph implements Cloneable {

  @XmlAttribute(name = "color")
  protected String color;
  @XmlAttribute(name = "fillcolor")
  protected String fillcolor;
  @XmlAttribute(name = "id", required = true)
  @XmlJavaTypeAdapter(CollapsedStringAdapter.class)
  protected String id;
  @XmlAttribute(name = "labeljust")
  protected Labeljust labeljust;
  @XmlAttribute(name = "labelloc")
  protected Labelloc labelloc;
  @XmlAttribute(name = "style")
  protected Style style;

  /**
   * Gets the value of the color property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getColor() {
    return color;
  }

  /**
   * Sets the value of the color property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setColor(String value) {
    this.color = value;
  }

  /**
   * Gets the value of the fillcolor property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getFillcolor() {
    return fillcolor;
  }

  /**
   * Sets the value of the fillcolor property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setFillcolor(String value) {
    this.fillcolor = value;
  }

  /**
   * Gets the value of the id property.
   * 
   * @return possible object is {@link String }
   * 
   */
  public String getId() {
    return id;
  }

  /**
   * Sets the value of the id property.
   * 
   * @param value allowed object is {@link String }
   * 
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the labeljust property.
   * 
   * @return possible object is {@link Labeljust }
   * 
   */
  public Labeljust getLabeljust() {
    return labeljust;
  }

  /**
   * Sets the value of the labeljust property.
   * 
   * @param value allowed object is {@link Labeljust }
   * 
   */
  public void setLabeljust(Labeljust value) {
    this.labeljust = value;
  }

  /**
   * Gets the value of the labelloc property.
   * 
   * @return possible object is {@link Labelloc }
   * 
   */
  public Labelloc getLabelloc() {
    return labelloc;
  }

  /**
   * Sets the value of the labelloc property.
   * 
   * @param value allowed object is {@link Labelloc }
   * 
   */
  public void setLabelloc(Labelloc value) {
    this.labelloc = value;
  }

  /**
   * Gets the value of the style property.
   * 
   * @return possible object is {@link Style }
   * 
   */
  public Style getStyle() {
    return style;
  }

  /**
   * Sets the value of the style property.
   * 
   * @param value allowed object is {@link Style }
   * 
   */
  public void setStyle(Style value) {
    this.style = value;
  }

  public static Cluster.Builder<Void> builder() {
    return new Cluster.Builder<Void>(null, null, false);
  }

  public static Cluster.Builder<Void> copyOf(final Cluster other) {
    return new Cluster.Builder<Void>(null, other, true);
  }

  public static Cluster.Builder<Void> copyOf(final Cluster other, final PropertyTree propertyTree,
      final PropertyTreeUse propertyTreeUse) {
    return new Cluster.Builder<Void>(null, other, true, propertyTree, propertyTreeUse);
  }

  public static Cluster.Builder<Void> copyExcept(final Cluster other,
      final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.EXCLUDE);
  }

  public static Cluster.Builder<Void> copyOnly(final Cluster other, final PropertyTree propertyTree) {
    return copyOf(other, propertyTree, PropertyTreeUse.INCLUDE);
  }

  @Override
  public String toString() {
    return ((((((((((((((((((super.toString() + "(color = ") + color) + "), ") + "(fillcolor = ") + fillcolor) + "), ") + "(id = ") + id) + "), ") + "(labeljust = ") + labeljust) + "), ") + "(labelloc = ") + labelloc) + "), ") + "(style = ") + style) + ") ");
  }

  @Override
  public Cluster clone() throws CloneNotSupportedException {
    final Cluster newObject = ((Cluster) super.clone());
    return newObject;
  }

  public static class Builder<TParentBuilder> extends ClusterOrGraph.Builder<TParentBuilder> {

    private String color;
    private String fillcolor;
    private String id;
    private Labeljust labeljust;
    private Labelloc labelloc;
    private Style style;

    public Builder(final TParentBuilder parentBuilder, final Cluster other, final boolean copy) {
      super(parentBuilder, other, copy);
      if (copy) {
        this.color = other.color;
        this.fillcolor = other.fillcolor;
        this.id = other.id;
        this.labeljust = other.labeljust;
        this.labelloc = other.labelloc;
        this.style = other.style;
      }
    }

    public Builder(final TParentBuilder parentBuilder, final Cluster other, final boolean copy,
        final PropertyTree propertyTree, final PropertyTreeUse treeUse) {
      super(parentBuilder, other, copy);
      if (copy) {
        final PropertyTree colorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("color"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (colorPropertyTree != null)
            : ((colorPropertyTree == null) || (!colorPropertyTree.isLeaf())))) {
          this.color = other.color;
        }
        final PropertyTree fillcolorPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("fillcolor"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (fillcolorPropertyTree != null)
            : ((fillcolorPropertyTree == null) || (!fillcolorPropertyTree.isLeaf())))) {
          this.fillcolor = other.fillcolor;
        }
        final PropertyTree idPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("id"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (idPropertyTree != null)
            : ((idPropertyTree == null) || (!idPropertyTree.isLeaf())))) {
          this.id = other.id;
        }
        final PropertyTree labeljustPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("labeljust"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labeljustPropertyTree != null)
            : ((labeljustPropertyTree == null) || (!labeljustPropertyTree.isLeaf())))) {
          this.labeljust = other.labeljust;
        }
        final PropertyTree labellocPropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("labelloc"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (labellocPropertyTree != null)
            : ((labellocPropertyTree == null) || (!labellocPropertyTree.isLeaf())))) {
          this.labelloc = other.labelloc;
        }
        final PropertyTree stylePropertyTree =
            ((propertyTree == null) ? null : propertyTree.get("style"));
        if (((treeUse == PropertyTreeUse.INCLUDE) ? (stylePropertyTree != null)
            : ((stylePropertyTree == null) || (!stylePropertyTree.isLeaf())))) {
          this.style = other.style;
        }
      }
    }

    protected <P extends Cluster> P init(final P product) {
      product.color = this.color;
      product.fillcolor = this.fillcolor;
      product.id = this.id;
      product.labeljust = this.labeljust;
      product.labelloc = this.labelloc;
      product.style = this.style;
      return super.init(product);
    }

    public Cluster.Builder<TParentBuilder> withColor(final String color) {
      this.color = color;
      return this;
    }

    public Cluster.Builder<TParentBuilder> withFillcolor(final String fillcolor) {
      this.fillcolor = fillcolor;
      return this;
    }

    public Cluster.Builder<TParentBuilder> withId(final String id) {
      this.id = id;
      return this;
    }

    public Cluster.Builder<TParentBuilder> withLabeljust(final Labeljust labeljust) {
      this.labeljust = labeljust;
      return this;
    }

    public Cluster.Builder<TParentBuilder> withLabelloc(final Labelloc labelloc) {
      this.labelloc = labelloc;
      return this;
    }

    public Cluster.Builder<TParentBuilder> withStyle(final Style style) {
      this.style = style;
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> addNodeOrClusterOrSubGraph(
        final List<?> nodeOrClusterOrSubGraph) {
      super.addNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> addNodeOrClusterOrSubGraph(
        Object... nodeOrClusterOrSubGraph) {
      super.addNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> withNodeOrClusterOrSubGraph(
        final List<?> nodeOrClusterOrSubGraph) {
      super.withNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> withNodeOrClusterOrSubGraph(
        Object... nodeOrClusterOrSubGraph) {
      super.withNodeOrClusterOrSubGraph(nodeOrClusterOrSubGraph);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> withBgcolor(final String bgcolor) {
      super.withBgcolor(bgcolor);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> withLabel(final String label) {
      super.withLabel(label);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> withFontname(final String fontname) {
      super.withFontname(fontname);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> withFontsize(final BigDecimal fontsize) {
      super.withFontsize(fontsize);
      return this;
    }

    @Override
    public Cluster.Builder<TParentBuilder> withFontcolor(final String fontcolor) {
      super.withFontcolor(fontcolor);
      return this;
    }

    public Cluster build() {
      if (this._product == null) {
        return this.init(new Cluster());
      } else {
        return ((Cluster) this._product);
      }
    }

  }

  public static class Select extends Cluster.Selector<Cluster.Select, Void> {

    Select() {
      super(null, null, null);
    }

    public static Cluster.Select _root() {
      return new Cluster.Select();
    }

  }

  public static class Selector<TRoot extends com.kscs.util.jaxb.Selector<TRoot, ?>, TParent>
      extends ClusterOrGraph.Selector<TRoot, TParent> {

    private com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> color = null;
    private com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> fillcolor = null;
    private com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> id = null;
    private com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> labeljust = null;
    private com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> labelloc = null;
    private com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> style = null;

    public Selector(final TRoot root, final TParent parent, final String propertyName) {
      super(root, parent, propertyName);
    }

    @Override
    public Map<String, PropertyTree> buildChildren() {
      final Map<String, PropertyTree> products = new HashMap<String, PropertyTree>();
      products.putAll(super.buildChildren());
      if (this.color != null) {
        products.put("color", this.color.init());
      }
      if (this.fillcolor != null) {
        products.put("fillcolor", this.fillcolor.init());
      }
      if (this.id != null) {
        products.put("id", this.id.init());
      }
      if (this.labeljust != null) {
        products.put("labeljust", this.labeljust.init());
      }
      if (this.labelloc != null) {
        products.put("labelloc", this.labelloc.init());
      }
      if (this.style != null) {
        products.put("style", this.style.init());
      }
      return products;
    }

    public com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> color() {
      return ((this.color == null) ? this.color =
          new com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>>(this._root,
              this, "color") : this.color);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> fillcolor() {
      return ((this.fillcolor == null) ? this.fillcolor =
          new com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>>(this._root,
              this, "fillcolor") : this.fillcolor);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> id() {
      return ((this.id == null) ? this.id =
          new com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>>(this._root,
              this, "id") : this.id);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> labeljust() {
      return ((this.labeljust == null) ? this.labeljust =
          new com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>>(this._root,
              this, "labeljust") : this.labeljust);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> labelloc() {
      return ((this.labelloc == null) ? this.labelloc =
          new com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>>(this._root,
              this, "labelloc") : this.labelloc);
    }

    public com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>> style() {
      return ((this.style == null) ? this.style =
          new com.kscs.util.jaxb.Selector<TRoot, Cluster.Selector<TRoot, TParent>>(this._root,
              this, "style") : this.style);
    }

  }

}
