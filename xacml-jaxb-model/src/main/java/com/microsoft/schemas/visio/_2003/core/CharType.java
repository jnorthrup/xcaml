//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation,
// v2.2.10-b140310.1920
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2015.02.04 at 10:47:30 AM PST
//

package com.microsoft.schemas.visio._2003.core;

import java.math.BigInteger;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlType;
import org.apache.commons.lang.builder.ToStringBuilder;
import org.apache.cxf.xjc.runtime.JAXBToStringStyle;

/**
 * <p>
 * Java class for Char_Type complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="Char_Type">
 *   &lt;complexContent>
 *     &lt;extension base="{http://schemas.microsoft.com/visio/2003/core}IndexedRow_Type">
 *       &lt;sequence>
 *         &lt;element name="Font" type="{http://schemas.microsoft.com/visio/2003/core}Font_Type" minOccurs="0"/>
 *         &lt;element name="Color" type="{http://schemas.microsoft.com/visio/2003/core}Color_Type" minOccurs="0"/>
 *         &lt;element name="Style" type="{http://schemas.microsoft.com/visio/2003/core}Style_Type" minOccurs="0"/>
 *         &lt;element name="Case" type="{http://schemas.microsoft.com/visio/2003/core}Case_Type" minOccurs="0"/>
 *         &lt;element name="Pos" type="{http://schemas.microsoft.com/visio/2003/core}Pos_Type" minOccurs="0"/>
 *         &lt;element name="FontScale" type="{http://schemas.microsoft.com/visio/2003/core}FontScale_Type" minOccurs="0"/>
 *         &lt;element name="Locale" type="{http://schemas.microsoft.com/visio/2003/core}Locale_Type" minOccurs="0"/>
 *         &lt;element name="Size" type="{http://schemas.microsoft.com/visio/2003/core}Size_Type" minOccurs="0"/>
 *         &lt;element name="DblUnderline" type="{http://schemas.microsoft.com/visio/2003/core}DblUnderline_Type" minOccurs="0"/>
 *         &lt;element name="Overline" type="{http://schemas.microsoft.com/visio/2003/core}Overline_Type" minOccurs="0"/>
 *         &lt;element name="Strikethru" type="{http://schemas.microsoft.com/visio/2003/core}Strikethru_Type" minOccurs="0"/>
 *         &lt;element name="Highlight" type="{http://schemas.microsoft.com/visio/2003/core}Highlight_Type" minOccurs="0"/>
 *         &lt;element name="Perpendicular" type="{http://schemas.microsoft.com/visio/2003/core}Perpendicular_Type" minOccurs="0"/>
 *         &lt;element name="DoubleStrikethrough" type="{http://schemas.microsoft.com/visio/2003/core}DoubleStrikethrough_Type" minOccurs="0"/>
 *         &lt;element name="RTLText" type="{http://schemas.microsoft.com/visio/2003/core}RTLText_Type" minOccurs="0"/>
 *         &lt;element name="UseVertical" type="{http://schemas.microsoft.com/visio/2003/core}UseVertical_Type" minOccurs="0"/>
 *         &lt;element name="Letterspace" type="{http://schemas.microsoft.com/visio/2003/core}Letterspace_Type" minOccurs="0"/>
 *         &lt;element name="ColorTrans" type="{http://schemas.microsoft.com/visio/2003/core}ColorTrans_Type" minOccurs="0"/>
 *         &lt;element name="AsianFont" type="{http://schemas.microsoft.com/visio/2003/core}AsianFont_Type" minOccurs="0"/>
 *         &lt;element name="ComplexScriptFont" type="{http://schemas.microsoft.com/visio/2003/core}ComplexScriptFont_Type" minOccurs="0"/>
 *         &lt;element name="LocalizeFont" type="{http://schemas.microsoft.com/visio/2003/core}LocalizeFont_Type" minOccurs="0"/>
 *         &lt;element name="ComplexScriptSize" type="{http://schemas.microsoft.com/visio/2003/core}ComplexScriptSize_Type" minOccurs="0"/>
 *         &lt;element name="LangID" type="{http://schemas.microsoft.com/visio/2003/core}LangID_Type" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "Char_Type", propOrder = {
    "font", "color", "style", "_case", "pos", "fontScale", "locale", "size", "dblUnderline",
    "overline", "strikethru", "highlight", "perpendicular", "doubleStrikethrough", "rtlText",
    "useVertical", "letterspace", "colorTrans", "asianFont", "complexScriptFont", "localizeFont",
    "complexScriptSize", "langID"})
public class CharType extends IndexedRowType {

  @XmlElement(name = "Font")
  protected FontType font;
  @XmlElement(name = "Color")
  protected ColorType color;
  @XmlElement(name = "Style")
  protected StyleType style;
  @XmlElement(name = "Case")
  protected CaseType _case;
  @XmlElement(name = "Pos")
  protected PosType pos;
  @XmlElement(name = "FontScale")
  protected FontScaleType fontScale;
  @XmlElement(name = "Locale")
  protected LocaleType locale;
  @XmlElement(name = "Size")
  protected SizeType size;
  @XmlElement(name = "DblUnderline")
  protected DblUnderlineType dblUnderline;
  @XmlElement(name = "Overline")
  protected OverlineType overline;
  @XmlElement(name = "Strikethru")
  protected StrikethruType strikethru;
  @XmlElement(name = "Highlight")
  protected HighlightType highlight;
  @XmlElement(name = "Perpendicular")
  protected PerpendicularType perpendicular;
  @XmlElement(name = "DoubleStrikethrough")
  protected DoubleStrikethroughType doubleStrikethrough;
  @XmlElement(name = "RTLText")
  protected RTLTextType rtlText;
  @XmlElement(name = "UseVertical")
  protected UseVerticalType useVertical;
  @XmlElement(name = "Letterspace")
  protected LetterspaceType letterspace;
  @XmlElement(name = "ColorTrans")
  protected ColorTransType colorTrans;
  @XmlElement(name = "AsianFont")
  protected AsianFontType asianFont;
  @XmlElement(name = "ComplexScriptFont")
  protected ComplexScriptFontType complexScriptFont;
  @XmlElement(name = "LocalizeFont")
  protected LocalizeFontType localizeFont;
  @XmlElement(name = "ComplexScriptSize")
  protected ComplexScriptSizeType complexScriptSize;
  @XmlElement(name = "LangID")
  protected LangIDType langID;

  /**
   * Gets the value of the font property.
   * 
   * @return possible object is {@link FontType }
   * 
   */
  public FontType getFont() {
    return font;
  }

  /**
   * Sets the value of the font property.
   * 
   * @param value allowed object is {@link FontType }
   * 
   */
  public void setFont(FontType value) {
    this.font = value;
  }

  /**
   * Gets the value of the color property.
   * 
   * @return possible object is {@link ColorType }
   * 
   */
  public ColorType getColor() {
    return color;
  }

  /**
   * Sets the value of the color property.
   * 
   * @param value allowed object is {@link ColorType }
   * 
   */
  public void setColor(ColorType value) {
    this.color = value;
  }

  /**
   * Gets the value of the style property.
   * 
   * @return possible object is {@link StyleType }
   * 
   */
  public StyleType getStyle() {
    return style;
  }

  /**
   * Sets the value of the style property.
   * 
   * @param value allowed object is {@link StyleType }
   * 
   */
  public void setStyle(StyleType value) {
    this.style = value;
  }

  /**
   * Gets the value of the case property.
   * 
   * @return possible object is {@link CaseType }
   * 
   */
  public CaseType getCase() {
    return _case;
  }

  /**
   * Sets the value of the case property.
   * 
   * @param value allowed object is {@link CaseType }
   * 
   */
  public void setCase(CaseType value) {
    this._case = value;
  }

  /**
   * Gets the value of the pos property.
   * 
   * @return possible object is {@link PosType }
   * 
   */
  public PosType getPos() {
    return pos;
  }

  /**
   * Sets the value of the pos property.
   * 
   * @param value allowed object is {@link PosType }
   * 
   */
  public void setPos(PosType value) {
    this.pos = value;
  }

  /**
   * Gets the value of the fontScale property.
   * 
   * @return possible object is {@link FontScaleType }
   * 
   */
  public FontScaleType getFontScale() {
    return fontScale;
  }

  /**
   * Sets the value of the fontScale property.
   * 
   * @param value allowed object is {@link FontScaleType }
   * 
   */
  public void setFontScale(FontScaleType value) {
    this.fontScale = value;
  }

  /**
   * Gets the value of the locale property.
   * 
   * @return possible object is {@link LocaleType }
   * 
   */
  public LocaleType getLocale() {
    return locale;
  }

  /**
   * Sets the value of the locale property.
   * 
   * @param value allowed object is {@link LocaleType }
   * 
   */
  public void setLocale(LocaleType value) {
    this.locale = value;
  }

  /**
   * Gets the value of the size property.
   * 
   * @return possible object is {@link SizeType }
   * 
   */
  public SizeType getSize() {
    return size;
  }

  /**
   * Sets the value of the size property.
   * 
   * @param value allowed object is {@link SizeType }
   * 
   */
  public void setSize(SizeType value) {
    this.size = value;
  }

  /**
   * Gets the value of the dblUnderline property.
   * 
   * @return possible object is {@link DblUnderlineType }
   * 
   */
  public DblUnderlineType getDblUnderline() {
    return dblUnderline;
  }

  /**
   * Sets the value of the dblUnderline property.
   * 
   * @param value allowed object is {@link DblUnderlineType }
   * 
   */
  public void setDblUnderline(DblUnderlineType value) {
    this.dblUnderline = value;
  }

  /**
   * Gets the value of the overline property.
   * 
   * @return possible object is {@link OverlineType }
   * 
   */
  public OverlineType getOverline() {
    return overline;
  }

  /**
   * Sets the value of the overline property.
   * 
   * @param value allowed object is {@link OverlineType }
   * 
   */
  public void setOverline(OverlineType value) {
    this.overline = value;
  }

  /**
   * Gets the value of the strikethru property.
   * 
   * @return possible object is {@link StrikethruType }
   * 
   */
  public StrikethruType getStrikethru() {
    return strikethru;
  }

  /**
   * Sets the value of the strikethru property.
   * 
   * @param value allowed object is {@link StrikethruType }
   * 
   */
  public void setStrikethru(StrikethruType value) {
    this.strikethru = value;
  }

  /**
   * Gets the value of the highlight property.
   * 
   * @return possible object is {@link HighlightType }
   * 
   */
  public HighlightType getHighlight() {
    return highlight;
  }

  /**
   * Sets the value of the highlight property.
   * 
   * @param value allowed object is {@link HighlightType }
   * 
   */
  public void setHighlight(HighlightType value) {
    this.highlight = value;
  }

  /**
   * Gets the value of the perpendicular property.
   * 
   * @return possible object is {@link PerpendicularType }
   * 
   */
  public PerpendicularType getPerpendicular() {
    return perpendicular;
  }

  /**
   * Sets the value of the perpendicular property.
   * 
   * @param value allowed object is {@link PerpendicularType }
   * 
   */
  public void setPerpendicular(PerpendicularType value) {
    this.perpendicular = value;
  }

  /**
   * Gets the value of the doubleStrikethrough property.
   * 
   * @return possible object is {@link DoubleStrikethroughType }
   * 
   */
  public DoubleStrikethroughType getDoubleStrikethrough() {
    return doubleStrikethrough;
  }

  /**
   * Sets the value of the doubleStrikethrough property.
   * 
   * @param value allowed object is {@link DoubleStrikethroughType }
   * 
   */
  public void setDoubleStrikethrough(DoubleStrikethroughType value) {
    this.doubleStrikethrough = value;
  }

  /**
   * Gets the value of the rtlText property.
   * 
   * @return possible object is {@link RTLTextType }
   * 
   */
  public RTLTextType getRTLText() {
    return rtlText;
  }

  /**
   * Sets the value of the rtlText property.
   * 
   * @param value allowed object is {@link RTLTextType }
   * 
   */
  public void setRTLText(RTLTextType value) {
    this.rtlText = value;
  }

  /**
   * Gets the value of the useVertical property.
   * 
   * @return possible object is {@link UseVerticalType }
   * 
   */
  public UseVerticalType getUseVertical() {
    return useVertical;
  }

  /**
   * Sets the value of the useVertical property.
   * 
   * @param value allowed object is {@link UseVerticalType }
   * 
   */
  public void setUseVertical(UseVerticalType value) {
    this.useVertical = value;
  }

  /**
   * Gets the value of the letterspace property.
   * 
   * @return possible object is {@link LetterspaceType }
   * 
   */
  public LetterspaceType getLetterspace() {
    return letterspace;
  }

  /**
   * Sets the value of the letterspace property.
   * 
   * @param value allowed object is {@link LetterspaceType }
   * 
   */
  public void setLetterspace(LetterspaceType value) {
    this.letterspace = value;
  }

  /**
   * Gets the value of the colorTrans property.
   * 
   * @return possible object is {@link ColorTransType }
   * 
   */
  public ColorTransType getColorTrans() {
    return colorTrans;
  }

  /**
   * Sets the value of the colorTrans property.
   * 
   * @param value allowed object is {@link ColorTransType }
   * 
   */
  public void setColorTrans(ColorTransType value) {
    this.colorTrans = value;
  }

  /**
   * Gets the value of the asianFont property.
   * 
   * @return possible object is {@link AsianFontType }
   * 
   */
  public AsianFontType getAsianFont() {
    return asianFont;
  }

  /**
   * Sets the value of the asianFont property.
   * 
   * @param value allowed object is {@link AsianFontType }
   * 
   */
  public void setAsianFont(AsianFontType value) {
    this.asianFont = value;
  }

  /**
   * Gets the value of the complexScriptFont property.
   * 
   * @return possible object is {@link ComplexScriptFontType }
   * 
   */
  public ComplexScriptFontType getComplexScriptFont() {
    return complexScriptFont;
  }

  /**
   * Sets the value of the complexScriptFont property.
   * 
   * @param value allowed object is {@link ComplexScriptFontType }
   * 
   */
  public void setComplexScriptFont(ComplexScriptFontType value) {
    this.complexScriptFont = value;
  }

  /**
   * Gets the value of the localizeFont property.
   * 
   * @return possible object is {@link LocalizeFontType }
   * 
   */
  public LocalizeFontType getLocalizeFont() {
    return localizeFont;
  }

  /**
   * Sets the value of the localizeFont property.
   * 
   * @param value allowed object is {@link LocalizeFontType }
   * 
   */
  public void setLocalizeFont(LocalizeFontType value) {
    this.localizeFont = value;
  }

  /**
   * Gets the value of the complexScriptSize property.
   * 
   * @return possible object is {@link ComplexScriptSizeType }
   * 
   */
  public ComplexScriptSizeType getComplexScriptSize() {
    return complexScriptSize;
  }

  /**
   * Sets the value of the complexScriptSize property.
   * 
   * @param value allowed object is {@link ComplexScriptSizeType }
   * 
   */
  public void setComplexScriptSize(ComplexScriptSizeType value) {
    this.complexScriptSize = value;
  }

  /**
   * Gets the value of the langID property.
   * 
   * @return possible object is {@link LangIDType }
   * 
   */
  public LangIDType getLangID() {
    return langID;
  }

  /**
   * Sets the value of the langID property.
   * 
   * @param value allowed object is {@link LangIDType }
   * 
   */
  public void setLangID(LangIDType value) {
    this.langID = value;
  }

  public CharType withFont(FontType value) {
    setFont(value);
    return this;
  }

  public CharType withColor(ColorType value) {
    setColor(value);
    return this;
  }

  public CharType withStyle(StyleType value) {
    setStyle(value);
    return this;
  }

  public CharType withCase(CaseType value) {
    setCase(value);
    return this;
  }

  public CharType withPos(PosType value) {
    setPos(value);
    return this;
  }

  public CharType withFontScale(FontScaleType value) {
    setFontScale(value);
    return this;
  }

  public CharType withLocale(LocaleType value) {
    setLocale(value);
    return this;
  }

  public CharType withSize(SizeType value) {
    setSize(value);
    return this;
  }

  public CharType withDblUnderline(DblUnderlineType value) {
    setDblUnderline(value);
    return this;
  }

  public CharType withOverline(OverlineType value) {
    setOverline(value);
    return this;
  }

  public CharType withStrikethru(StrikethruType value) {
    setStrikethru(value);
    return this;
  }

  public CharType withHighlight(HighlightType value) {
    setHighlight(value);
    return this;
  }

  public CharType withPerpendicular(PerpendicularType value) {
    setPerpendicular(value);
    return this;
  }

  public CharType withDoubleStrikethrough(DoubleStrikethroughType value) {
    setDoubleStrikethrough(value);
    return this;
  }

  public CharType withRTLText(RTLTextType value) {
    setRTLText(value);
    return this;
  }

  public CharType withUseVertical(UseVerticalType value) {
    setUseVertical(value);
    return this;
  }

  public CharType withLetterspace(LetterspaceType value) {
    setLetterspace(value);
    return this;
  }

  public CharType withColorTrans(ColorTransType value) {
    setColorTrans(value);
    return this;
  }

  public CharType withAsianFont(AsianFontType value) {
    setAsianFont(value);
    return this;
  }

  public CharType withComplexScriptFont(ComplexScriptFontType value) {
    setComplexScriptFont(value);
    return this;
  }

  public CharType withLocalizeFont(LocalizeFontType value) {
    setLocalizeFont(value);
    return this;
  }

  public CharType withComplexScriptSize(ComplexScriptSizeType value) {
    setComplexScriptSize(value);
    return this;
  }

  public CharType withLangID(LangIDType value) {
    setLangID(value);
    return this;
  }

  @Override
  public CharType withIX(BigInteger value) {
    setIX(value);
    return this;
  }

  @Override
  public CharType withDel(BigInteger value) {
    setDel(value);
    return this;
  }

  /**
   * Generates a String representation of the contents of this type. This is an extension method, produced by the 'ts'
   * xjc plugin
   * 
   */
  @Override
  public String toString() {
    return ToStringBuilder.reflectionToString(this, JAXBToStringStyle.DEFAULT_STYLE);
  }

}
